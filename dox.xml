<haxe>
	<class path="neko.Lib" params="" file="C:\HaxeToolkit\haxe\std/neko/Lib.hx">
		<load public="1" set="method" line="29" static="1">
			<f a="lib:prim:nargs">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<d/>
			</f>
			<haxe_doc>Load and return a Neko primitive from a NDLL library.</haxe_doc>
		</load>
		<loadLazy public="1" set="method" line="33" static="1"><f a="lib:prim:nargs">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<d/>
</f></loadLazy>
		<print public="1" set="method" line="44" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print the specified value on the default output.</haxe_doc>
		</print>
		<println public="1" set="method" line="51" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print the specified value on the default output followed by a newline character.</haxe_doc>
		</println>
		<rethrow public="1" set="method" line="59" static="1">
			<f a="e">
				<d/>
				<d/>
			</f>
			<haxe_doc>Rethrow an exception. This is useful when manually filtering an exception in order
		to keep the previous exception stack.</haxe_doc>
		</rethrow>
		<serialize public="1" set="method" line="67" static="1">
			<f a="v">
				<d/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Serialize using native Neko serialization. This will return a Binary string that can be
		stored for long term usage. The serialized data is optimized for speed and not for size.</haxe_doc>
		</serialize>
		<localUnserialize public="1" set="method" line="85" static="1">
			<f a="s">
				<c path="haxe.io.Bytes"/>
				<d/>
			</f>
			<haxe_doc>Unserialize a string using native Neko serialization. See [serialize].
		This function assume that all the serialized data was serialized with current
		module, even if the module name was different. This can happen if you are unserializing
		some data into mod_neko that was serialized on a different server using a different
		file path.</haxe_doc>
		</localUnserialize>
		<haxeToNeko public="1" set="method" line="127" static="1">
			<f a="v">
				<d/>
				<d/>
			</f>
			<haxe_doc>Converts a Neko value to its Haxe equivalent. Used to unwrap String and Arrays Objects into raw Neko values.</haxe_doc>
		</haxeToNeko>
		<getClasses public="1" set="method" line="162" static="1">
			<f a=""><d/></f>
			<haxe_doc>Returns an object containing all compiled packages and classes.</haxe_doc>
		</getClasses>
		<__serialize line="180" static="1"><f a="">
	<d/>
	<t path="haxe.io.BytesData"/>
</f></__serialize>
		<__unserialize line="181" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<a>
		<loadprim><f a="p:n">
	<unknown/>
	<unknown/>
	<unknown/>
</f></loadprim>
		<loadmodule><f a="m:l">
	<unknown/>
	<unknown/>
	<unknown/>
</f></loadmodule>
	</a>
	<unknown/>
</f></__unserialize>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="C:\HaxeToolkit\haxe\std/neko/_std/Array.hx">
		<new1 params="T" set="method" line="32" static="1"><f a="a:l">
	<c path="neko.NativeArray"><c path="new1.T"/></c>
	<x path="Int"/>
	<c path="Array"><c path="new1.T"/></c>
</f></new1>
		<__a><c path="neko.NativeArray"><c path="Array.T"/></c></__a>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method" line="39">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<copy public="1" set="method" line="50">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<insert public="1" set="method" line="69">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<join public="1" set="method" line="82">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<toString public="1" set="method" line="94">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<pop public="1" set="method" line="107">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method" line="116">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<unshift public="1" set="method" line="123">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<remove public="1" set="method" line="131">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method" line="148">
			<f a="x:?fromIndex" v=":null">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="165">
			<f a="x:?fromIndex" v=":null">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<reverse public="1" set="method" line="182">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method" line="196">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method" line="209">
			<f a="pos:?end" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method" line="226">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.sort.MergeSort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method" line="249">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<map public="1" params="S" set="method" line="272">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method" line="279">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<__get set="method" line="290"><f a="pos">
	<x path="Int"/>
	<c path="Array.T"/>
</f></__get>
		<__set set="method" line="294"><f a="pos:v">
	<x path="Int"/>
	<c path="Array.T"/>
	<c path="Array.T"/>
</f></__set>
		<__grow set="method" line="315"><f a="l">
	<x path="Int"/>
	<x path="Void"/>
</f></__grow>
		<__neko set="method" line="330"><f a=""><c path="neko.NativeArray"><c path="Array.T"/></c></f></__neko>
		<new public="1" set="method" line="27">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="C:\HaxeToolkit\haxe\std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="CleverSort" params="" file="C:\HaxeToolkit\haxe\lib/cleversort/1,0,2/src/CleverSort.hx"><haxe_doc><![CDATA[Syntax sugar for creating arrays that sorts on multiple properties

```
// Imagine we have this data:

class Person {
	var firstName:String;
	var surname:String;
	var age:Int;
	var postcode:PostCode;
}
class PostCode {
	var state:StateEnum;
	var number:Int;
}
var array:Array<Person> = ...;

// We call "using CleverSort" so that we can use the `cleverSort()` function on any array

using CleverSort;

//
// Example 1:
// Sort by surname, firstName, age
//

array.cleverSort(
	_.firstName.toLowerCase()
	_.surname.toLowerCase(),
	_.age
);

// Which is the equivalent of writing

array.sort( function(i1,i2) {
	var cmp:Int;
	cmp = Reflect.compare(i1.firstName.toLowerCase(),i2.firstName.toLowerCase());
		if ( cmp!=0 ) return cmp;
	cmp = Reflect.compare(i1.surname.toLowerCase(),i2.surname.toLowerCase());
		if ( cmp!=0 ) return cmp;
	cmp = Reflect.compare(i1.age,i2.age);
		if ( cmp!=0 ) return cmp;
	return 0;
});

//
// Example 2:
// Sort by state, postcode, surname, firstname
//

array.cleverSort(
	Type.enumConstructor( _.postcode.state ),
	_.postcode.number,
	_.surname,
	_.firstName
);

// Which is the equivalent of writing

array.sort( function(i1,i2) {
	var cmp:Int;
	cmp = Reflect.compare(Type.enumConstructor(i1.postcode.state),Type.enumConstructor(i2.postcode.state));
		if ( cmp!=0 ) return cmp;
	cmp = Reflect.compare(i1.postcode.number,i2.postcode.number);
		if ( cmp!=0 ) return cmp;
	cmp = Reflect.compare(i1.surname,i2.surname);
		if ( cmp!=0 ) return cmp;
	cmp = Reflect.compare(i1.firstName,i2.firstName);
		if ( cmp!=0 ) return cmp;
	return 0;
});
```

As you can see, the syntax is much more readable.  Winning!]]></haxe_doc></class>
	<class path="CompileTime" params="" file="C:\HaxeToolkit\haxe\lib/compiletime/2,5,1/src/CompileTime.hx"/>
	<class path="CompileTimeClassList" params="" file="C:\HaxeToolkit\haxe\lib/compiletime/2,5,1/src/CompileTimeClassList.hx">
		<lists line="14" static="1"><x path="Map">
	<c path="String"/>
	<c path="List"><x path="Class"><d/></x></c>
</x></lists>
		<get public="1" set="method" line="16" static="1"><f a="id">
	<c path="String"/>
	<c path="List"><x path="Class"><d/></x></c>
</f></get>
		<getTyped public="1" params="T" get="inline" set="null" line="22" static="1"><f a="id:type">
	<c path="String"/>
	<x path="Class"><c path="getTyped.T"/></x>
	<c path="List"><x path="Class"><c path="getTyped.T"/></x></c>
</f></getTyped>
		<initialise set="method" line="27" static="1"><f a=""><x path="Void"/></f></initialise>
		<haxe_doc>**
* Copyright (c) 2013 Jason O'Neil
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
* 
**</haxe_doc>
		<meta><m n="classLists">
	<e>["null,true,ufront.web.Controller","app.Routes,ufront.ufadmin.UFAdminModule,ufront.ufadmin.modules.DBAdminModule,ufront.ufadmin.modules.EasyAuthAdminModule,ufront.web.DefaultUfrontController"]</e>
	<e>["null,true,ufront.api.UFApi","ufront.auth.api.EasyAuthApi"]</e>
	<e>["null,true,ufront.ufadmin.UFAdminModule","ufront.ufadmin.modules.DBAdminModule,ufront.ufadmin.modules.EasyAuthAdminModule"]</e>
	<e>["null,true,ufront.db.Object","ufront.auth.model.Group,ufront.auth.model.Permission,ufront.auth.model.User,ufront.db.Relationship,ufront.db.joins.Join_Group_User"]</e>
</m></meta>
	</class>
	<class path="Config" params="" file="src/Config.hx">
		<app public="1" line="6" static="1"><a>
	<defaultLayout><c path="String"/></defaultLayout>
	<basePath><c path="String"/></basePath>
</a></app>
		<haxe_doc>* Class handling configuration files.</haxe_doc>
	</class>
	<class path="Date" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/Date.hx">
		<now public="1" set="method" line="69" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" line="73" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" line="81" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<new1 set="method" line="85" static="1"><f a="t">
	<d/>
	<c path="Date"/>
</f></new1>
		<date_new line="91" static="1"><f a="">
	<unknown/>
	<unknown/>
</f></date_new>
		<date_now line="92" static="1"><f a=""><unknown/></f></date_now>
		<date_format line="93" static="1"><f a=":">
	<d/>
	<unknown/>
	<c path="String"/>
</f></date_format>
		<date_set_hour line="94" static="1"><f a=":::">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></date_set_hour>
		<date_set_day line="95" static="1"><f a=":::">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<unknown/>
</f></date_set_day>
		<date_get_day line="96" static="1"><f a="">
	<d/>
	<a>
		<y><x path="Int"/></y>
		<m><x path="Int"/></m>
		<d><x path="Int"/></d>
	</a>
</f></date_get_day>
		<date_get_hour line="97" static="1"><f a="">
	<d/>
	<a>
		<s><x path="Int"/></s>
		<m><x path="Int"/></m>
		<h><x path="Int"/></h>
	</a>
</f></date_get_hour>
		<int32_to_float line="98" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></int32_to_float>
		<int32_add line="99" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<unknown/>
</f></int32_add>
		<int32_shl line="100" static="1"><f a=":">
	<unknown/>
	<x path="Int"/>
	<unknown/>
</f></int32_shl>
		<__t><d/></__t>
		<getTime public="1" set="method" line="33">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<getFullYear public="1" set="method" line="37">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method" line="41">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" set="method" line="45">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getHours public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method" line="53">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method" line="57">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getDay public="1" set="method" line="61">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range).</haxe_doc>
		</getDay>
		<toString public="1" set="method" line="65">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There is some extra functions available in the `DateTools` class.

	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<class path="DateTools" params="" file="C:\HaxeToolkit\haxe\std/DateTools.hx">
		<date_format line="34" static="1"><f a=":">
	<d/>
	<unknown/>
	<unknown/>
</f></date_format>
		<format public="1" set="method" line="114" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.</haxe_doc>
		</format>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="EReg" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/EReg.hx">
		<regexp_new_options line="200" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<unknown/>
</f></regexp_new_options>
		<regexp_match line="201" static="1"><f a=":::">
	<d/>
	<unknown/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></regexp_match>
		<regexp_matched line="202" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<c path="String"/>
</f></regexp_matched>
		<regexp_matched_pos line="203" static="1"><f a=":">
	<d/>
	<x path="Int"/>
	<a>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
	</a>
</f></regexp_matched_pos>
		<r><d/></r>
		<last><c path="String"/></last>
		<global><x path="Bool"/></global>
		<match public="1" set="method" line="36">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="45">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, an exception is thrown.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedRight public="1" set="method" line="55">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<matchedPos public="1" set="method" line="61">
			<f a=""><a>
	<pos><x path="Int"/></pos>
	<len><x path="Int"/></len>
</a></f>
			<haxe_doc>Returns the position and length of the last matched substring, within
		the String which was last used as argument to `this.match` or
		`this.matchSub`.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, the position and
		length of the leftmost substring is returned.</haxe_doc>
		</matchedPos>
		<matchSub public="1" set="method" line="65">
			<f a="s:pos:?len" v="::-1">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches a substring of String `s`.

		This function expects `pos` and `len` to describe a valid substring of
		`s`, or else the result is unspecified. To get more robust behavior,
		`this.match(s.substr(pos,len))` can be used instead.

		This method modifies the internal state.

		If `s` is null, the result is unspecified.</haxe_doc>
		</matchSub>
		<split public="1" set="method" line="74">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String "" between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<replace public="1" set="method" line="98">
			<f a="s:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replaces the first substring of `s` which `this` EReg matches with `by`.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `by` contains `$1` to `$9`, the digit corresponds to number of a
		matched sub-group and its value is used instead. If no such sub-group
		exists, the replacement is unspecified. The string `$$` becomes `$`.

		If `s` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<map public="1" set="method" line="175">
			<f a="s:f">
				<c path="String"/>
				<f a="">
					<c path="EReg"/>
					<c path="String"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Calls the function `f` for the substring of `s` which `this` EReg matches
		and replaces that substring with the result of `f` call.

		The `f` function takes `this` EReg object as its first argument and should
		return a replacement string for the substring matched.

		If `this` EReg does not match any substring, the result is `s`.

		By default, this method replaces only the first matched substring. If
		the global g modifier is in place, all matched substrings are replaced.

		If `s` or `f` are null, the result is unspecified.</haxe_doc>
		</map>
		<new public="1" set="method" line="28">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax ~/pattern/modifier

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	http://haxe.org/doc/cross/regexp</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="C:\HaxeToolkit\haxe\std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="C:\HaxeToolkit\haxe\std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="Lambda" params="" file="C:\HaxeToolkit\haxe\std/Lambda.hx">
		<array public="1" params="A" set="method" line="42" static="1">
			<f a="it">
				<t path="Iterable"><c path="array.A"/></t>
				<c path="Array"><c path="array.A"/></c>
			</f>
			<haxe_doc>Creates an Array from Iterable `it`.

		If `it` is an Array, this function returns a copy of it.</haxe_doc>
		</array>
		<list public="1" params="A" set="method" line="54" static="1">
			<f a="it">
				<t path="Iterable"><c path="list.A"/></t>
				<c path="List"><c path="list.A"/></c>
			</f>
			<haxe_doc>Creates a List form Iterable `it`.

		If `it` is a List, this function returns a copy of it.</haxe_doc>
		</list>
		<map public="1" params="A:B" set="method" line="68" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.A"/></t>
				<f a="">
					<c path="map.A"/>
					<c path="map.B"/>
				</f>
				<c path="List"><c path="map.B"/></c>
			</f>
			<haxe_doc>Creates a new List by applying function `f` to all elements of `it`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<has public="1" params="A" set="method" line="98" static="1">
			<f a="it:elt">
				<t path="Iterable"><c path="has.A"/></t>
				<c path="has.A"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `it` contains `elt`.

		This function returns true as soon as an element is found which is equal
		to `elt` according to the `==` operator.

		If no such element is found, the result is false.</haxe_doc>
		</has>
		<indexOf public="1" params="T" set="method" line="217" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with 'using Lambda' and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="List" params="T" file="C:\HaxeToolkit\haxe\std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="49">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="81">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<last public="1" set="method" line="90">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the last element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</last>
		<pop public="1" set="method" line="100">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="114">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="124">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="138">
			<f a="v">
				<c path="List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="161">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="203">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` List.

		The result is enclosed in { } with the individual elements being
		separated by a comma.</haxe_doc>
		</toString>
		<join public="1" set="method" line="224">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` List, with `sep` separating
		each element.</haxe_doc>
		</join>
		<filter public="1" set="method" line="243">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<x path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>Returns a list filtered with `f`. The returned list will contain all
		elements for which `f(x) == true`.</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="259">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>Returns a new list where all elements have been converted by the
		function `f`.</haxe_doc>
		</map>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="Map" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="Map.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="Map.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="Map.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="Map.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"><e>K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="C:\HaxeToolkit\haxe\std/Map.hx" private="1" module="Map"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="IMap" params="K:V" file="C:\HaxeToolkit\haxe\std/Map.hx" module="Map" interface="1">
		<get public="1" set="method"><f a="k">
	<c path="IMap.K"/>
	<t path="Null"><c path="IMap.V"/></t>
</f></get>
		<exists public="1" set="method"><f a="k">
	<c path="IMap.K"/>
	<x path="Bool"/>
</f></exists>
		<keys public="1" set="method"><f a=""><t path="Iterator"><c path="IMap.K"/></t></f></keys>
		<meta>
			<m n=":keep"/>
			<m n="interface"/>
		</meta>
	</class>
	<typedef path="_Map.Hashable" params="" file="C:\HaxeToolkit\haxe\std/Map.hx" private="1" module="Map"><a><hashCode set="method"><f a=""><x path="Int"/></f></hashCode></a></typedef>
	<class path="Math" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/Math.hx">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter, 
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with NaN as an operand will result in NaN.

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.

		In order to test if a value is NaN, you should use Math.isNaN() function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with NaN on Windows, 
		see [https://bugs.php.net/bug.php?id=42143]</haxe_doc>
		</NaN>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with POSITIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. 

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with NEGATIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. 

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<round public="1" set="method" line="42" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.
		
		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" line="43" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" line="44" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</ceil>
		<__rnd static="1"><unknown/></__rnd>
		<_rand_float line="55" static="1"><f a="">
	<unknown/>
	<x path="Float"/>
</f></_rand_float>
		<_rand_int line="56" static="1"><f a=":">
	<unknown/>
	<x path="Int"/>
	<unknown/>
</f></_rand_int>
		<random public="1" set="method" line="58" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0, 
		and less than 1.0.</haxe_doc>
		</random>
		<isNaN public="1" set="method" line="60" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is NaN, the result is true, otherwise the result is false. 
		In particular, both POSITIVE_INFINITY and NEGATIVE_INFINITY are
		not considered NaN.</haxe_doc>
		</isNaN>
		<isFinite public="1" set="method" line="61" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result 
		is false, otherwise the result is true.</haxe_doc>
		</isFinite>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<class path="PBKDF2" params="" file="C:\HaxeToolkit\haxe\lib/PBKDF2/1,0,0/src/PBKDF2.hx">
		<encode public="1" set="method" line="28" static="1"><f a="value:salt:?iterations:?numBytes" v="::1000:512">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></encode>
		<m_bpassword><c path="Array"><x path="Int"/></c></m_bpassword>
		<m_salt><c path="String"/></m_salt>
		<m_total_iterations><x path="Int"/></m_total_iterations>
		<m_iterations_in_chunk><x path="Int"/></m_iterations_in_chunk>
		<m_iterations_done><x path="Int"/></m_iterations_done>
		<m_key_length><x path="Int"/></m_key_length>
		<m_hash_length><x path="Int"/></m_hash_length>
		<m_total_blocks><x path="Int"/></m_total_blocks>
		<m_current_block><x path="Int"/></m_current_block>
		<m_ipad><c path="Array"><x path="Int"/></c></m_ipad>
		<m_opad><c path="Array"><x path="Int"/></c></m_opad>
		<m_buffer><c path="Array"><x path="Int"/></c></m_buffer>
		<m_key><c path="String"/></m_key>
		<m_result_func><f a="">
	<c path="String"/>
	<x path="Void"/>
</f></m_result_func>
		<m_status_func><f a="">
	<x path="Float"/>
	<x path="Void"/>
</f></m_status_func>
		<m_hash><c path="Array"><x path="Int"/></c></m_hash>
		<deriveKey set="method" line="222"><f a="?result_callback:?status_callback" v="null:null">
	<f a="">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<f a="">
		<x path="Float"/>
		<x path="Void"/>
	</f>
	<c path="String"/>
</f></deriveKey>
		<do_PBKDF2_iterations set="method" line="232"><f a=""><c path="String"/></f></do_PBKDF2_iterations>
		<new set="method" line="185"><f a="password:salt:num_iterations:num_bytes">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[**
* Copyright (c) 2013 Parvez Anandam, jeesmon@gmail.com, Jason O'Neil
* All rights reserved.
* 
* See README for how the Haxe version of this library was derived
* and who the respective copyrights belong to.
* 
* Redistribution and use in source and binary forms are permitted
* provided that the above copyright notice and this paragraph are
* duplicated in all such forms and that any documentation,
* advertising materials, and other materials related to such
* distribution and use acknowledge that the software was developed
* by the <organization>.  The name of the
* University may not be used to endorse or promote products derived
* from this software without specific prior written permission.
* THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
* IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
* 
**]]></haxe_doc>
	</class>
	<class path="_PBKDF2.SHA1Helpers" params="" file="C:\HaxeToolkit\haxe\lib/PBKDF2/1,0,0/src/PBKDF2.hx" private="1" module="PBKDF2">
		<hexcase public="1" line="321" static="1"><x path="Int"/></hexcase>
		<b64pad public="1" line="322" static="1"><c path="String"/></b64pad>
		<chrsz public="1" line="323" static="1"><x path="Int"/></chrsz>
		<hex_sha1 public="1" set="method" line="329" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></hex_sha1>
		<b64_sha1 public="1" set="method" line="330" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></b64_sha1>
		<str_sha1 public="1" set="method" line="331" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></str_sha1>
		<hex_hmac_sha1 public="1" set="method" line="332" static="1"><f a="key:data">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></hex_hmac_sha1>
		<b64_hmac_sha1 public="1" set="method" line="333" static="1"><f a="key:data">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></b64_hmac_sha1>
		<str_hmac_sha1 public="1" set="method" line="334" static="1"><f a="key:data">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></str_hmac_sha1>
		<sha1_vm_test public="1" set="method" line="339" static="1"><f a=""><x path="Bool"/></f></sha1_vm_test>
		<core_sha1 public="1" set="method" line="347" static="1"><f a="x:len">
	<c path="Array"><x path="Int"/></c>
	<x path="Int"/>
	<c path="Array"><x path="Int"/></c>
</f></core_sha1>
		<sha1_ft public="1" set="method" line="419" static="1"><f a="t:b:c:d">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></sha1_ft>
		<sha1_kt public="1" set="method" line="430" static="1"><f a="t">
	<x path="Int"/>
	<x path="Int"/>
</f></sha1_kt>
		<core_hmac_sha1 public="1" set="method" line="439" static="1"><f a="key:data">
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></core_hmac_sha1>
		<safe_add public="1" set="method" line="462" static="1"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></safe_add>
		<rol public="1" set="method" line="476" static="1"><f a="num:cnt">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></rol>
		<str2binb public="1" set="method" line="485" static="1"><f a="str">
	<c path="String"/>
	<c path="Array"><x path="Int"/></c>
</f></str2binb>
		<binb2str public="1" set="method" line="512" static="1"><f a="bin">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></binb2str>
		<binb2hex public="1" set="method" line="529" static="1"><f a="binarray">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></binb2hex>
		<binb2b64 public="1" set="method" line="545" static="1"><f a="binarray">
	<c path="Array"><x path="Int"/></c>
	<c path="String"/>
</f></binb2b64>
	</class>
	<class path="Random" params="" file="C:\HaxeToolkit\haxe\lib/random/1,4,0/src/Random.hx">
		<bool public="1" get="inline" set="null" line="15" static="1">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Return a random boolean value (true or false)</haxe_doc>
		</bool>
		<int public="1" get="inline" set="null" line="21" static="1">
			<f a="from:to">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Return a random integer between 'from' and 'to', inclusive.</haxe_doc>
		</int>
		<float public="1" get="inline" set="null" line="27" static="1">
			<f a="from:to">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Return a random float between 'from' and 'to', inclusive.</haxe_doc>
		</float>
		<string public="1" set="method" line="34" static="1">
			<f a="length:?charactersToUse" v=":'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'">
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Return a random string of a certain length.  You can optionally specify 
	    which characters to use, otherwise the default is (a-zA-Z0-9)</haxe_doc>
		</string>
		<date public="1" get="inline" set="null" line="45" static="1">
			<f a="earliest:latest">
				<c path="Date"/>
				<c path="Date"/>
				<c path="Date"/>
			</f>
			<haxe_doc><![CDATA[Return a random date & time from within a range.  The behaviour is unspecified if either `earliest` or `latest` is null.  Earliest and Latest are inclusive]]></haxe_doc>
		</date>
		<fromArray public="1" params="T" get="inline" set="null" line="51" static="1">
			<f a="arr">
				<c path="Array"><c path="fromArray.T"/></c>
				<t path="Null"><c path="fromArray.T"/></t>
			</f>
			<haxe_doc>Return a random item from an array.  Will return null if the array is null or empty.</haxe_doc>
		</fromArray>
		<shuffle public="1" params="T" set="method" line="58" static="1">
			<f a="arr">
				<c path="Array"><c path="shuffle.T"/></c>
				<c path="Array"><c path="shuffle.T"/></c>
			</f>
			<haxe_doc>Shuffle an Array.  This operation affects the array in place, and returns that array.
		The shuffle algorithm used is a variation of the [Fisher Yates Shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)</haxe_doc>
		</shuffle>
		<fromIterable public="1" params="T" get="inline" set="null" line="73" static="1">
			<f a="it">
				<t path="Iterable"><c path="fromIterable.T"/></t>
				<t path="Null"><c path="fromIterable.T"/></t>
			</f>
			<haxe_doc>Return a random item from an iterable.  Will return null if the iterable is null or empty.</haxe_doc>
		</fromIterable>
		<enumConstructor public="1" params="T" get="inline" set="null" line="79" static="1">
			<f a="e">
				<x path="Enum"><c path="enumConstructor.T"/></x>
				<t path="Null"><c path="enumConstructor.T"/></t>
			</f>
			<haxe_doc>Return a random constructor from an Enum.  Will return null if the enum has no constructors. Only works with enum constructors that take no parameters.</haxe_doc>
		</enumConstructor>
		<haxe_doc>**
* Copyright (c) 2013 Jason O'Neil
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
* 
**</haxe_doc>
	</class>
	<class path="Reflect" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/Reflect.hx">
		<hasField public="1" set="method" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<callMethod public="1" set="method" line="49" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Call a method with the given object and arguments.</haxe_doc>
		</callMethod>
		<fields public="1" set="method" line="61" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="81" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<isObject public="1" set="method" line="93" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[Tells if `v` is an object.

		The result is true if `v` is one of the following:

		- class instance
		- structure
		- Class<T>
		- Enum<T>

		Otherwise, including if `v` is null, the result is false.]]></haxe_doc>
		</isObject>
		<same_closure line="114" static="1"><f a=":">
	<d/>
	<d/>
	<x path="Bool"/>
</f></same_closure>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Server" params="" file="src/Server.hx">
		<ufrontApp public="1" static="1">
			<c path="ufront.app.UfrontApplication"/>
			<haxe_doc>* Store UfrontApplication object for availability.</haxe_doc>
		</ufrontApp>
		<main set="method" line="26" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>* Construct new UfrontApplication object. Configuration:
	 * - set index controller to app.Routes
	 * - set templating engine to Haxe
	 * - set default layout to 'layout.html'
	 * - set base path of app to app location on webserver
	 * Refer to cnf/app.json configuration file for details.
	 *
	 * Execute app once constructed.</haxe_doc>
		</main>
		<haxe_doc>* Application entry point.</haxe_doc>
	</class>
	<abstract path="Int" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.

	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Float" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.

	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.

	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.

	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="neko.Boot" params="" file="C:\HaxeToolkit\haxe\std/neko/Boot.hx">
		<__tmp_str set="method" line="27" static="1"><f a=""><c path="String"/></f></__tmp_str>
		<__enum_str set="method" line="31" static="1"><f a="e">
	<d/>
	<c path="String"/>
</f></__enum_str>
		<__interfLoop set="method" line="53" static="1"><f a="cc:cl">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__interfLoop>
		<__instanceof set="method" line="69" static="1">
			<f a="o:cl">
				<a>
					<__name__ set="null"><unknown/></__name__>
					<__enum__ set="null"><t path="Abstract<Dynamic>"/></__enum__>
					<__ename__ set="null"><unknown/></__ename__>
					<__class__ set="null"><unknown/></__class__>
				</a>
				<t path="Abstract<Dynamic>"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ifFeature"><e>"typed_catch"</e></m></meta>
		</__instanceof>
		<__serialize set="method" line="87" static="1"><f a="o">
	<a>
		<__enum__ set="null"><a><__ename__ set="null"><a><length set="null"><x path="Int"/></length></a></__ename__></a></__enum__>
		<__class__ set="null"><a><__name__ set="null"><a><length set="null"><x path="Int"/></length></a></__name__></a></__class__>
	</a>
	<c path="Array"><unknown/></c>
</f></__serialize>
		<__tagserialize set="method" line="107" static="1"><f a="o">
	<a>
		<tag set="null"><unknown/></tag>
		<__enum__ set="null"><a><__ename__ set="null"><a><length set="null"><x path="Int"/></length></a></__ename__></a></__enum__>
	</a>
	<c path="Array"><unknown/></c>
</f></__tagserialize>
		<__unserialize set="method" line="116" static="1"><f a="v">
	<c path="Array"><unknown/></c>
	<unknown/>
</f></__unserialize>
		<__init set="method" line="139" static="1"><f a=""><x path="Void"/></f></__init>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Std" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/Std.hx">
		<is public="1" set="method" line="25" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ifFeature"><e>"typed_cast"</e></m></meta>
			<haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
		</is>
		<instance public="1" params="T:S" set="method" line="29" static="1">
			<f a="value:c">
				<c path="instance.T"/>
				<x path="Class"><c path="instance.S"/></x>
				<c path="instance.S"/>
			</f>
			<haxe_doc>Checks if object `value` is an instance of class `c`.

		Compiles only if the class specified by `c` can be assigned to the type
		of `value`.

		This method checks if a downcast is possible. That is, if the runtime
		type of `value` is assignable to the class specified by `c`, `value` is
		returned. Otherwise null is returned.

		This method is not guaranteed to work with interfaces or core types such
		as String, Array and Date.

		If `value` is null, the result is null. If `c` is null, the result is
		unspecified.</haxe_doc>
		</instance>
		<string public="1" set="method" line="33" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<int public="1" set="method" line="37" static="1">
			<f a="x">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Converts a `Float` to an `Int`, rounded towards 0.

		If `x` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="42" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is null.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="53" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a NaN value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="60" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<typedef path="Null" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<typedef path="Iterator" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.

		This method is not required to check hasNext() first. A call to this
		method while hasNext() is false yields unspecified behavior.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\HaxeToolkit\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1">
		<haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc>
		<meta><m n="interface"/></meta>
	</class>
	<class path="String" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/String.hx">
		<__is_String static="1"><x path="Bool"/></__is_String>
		<__split line="25" static="1"><d/></__split>
		<fromCharCode public="1" set="method" line="200" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<charAt public="1" set="method" line="42">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method" line="54">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method" line="60">
			<f a="str:?startIndex" v=":null">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="69">
			<f a="str:?startIndex" v=":null">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method" line="84">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.

		If `this` String is the empty String "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String "", `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<substr public="1" set="method" line="100">
			<f a="pos:?len" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method" line="126">
			<f a="startIndex:?endIndex" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<toLowerCase public="1" set="method" line="150">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<toUpperCase public="1" set="method" line="166">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toString public="1" set="method" line="182">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<__compare set="method" line="188"><f a="o">
	<c path="String"/>
	<x path="Int"/>
</f></__compare>
		<__add set="method" line="192"><f a="s">
	<d/>
	<c path="String"/>
</f></__add>
		<__radd set="method" line="196"><f a="s">
	<d/>
	<c path="String"/>
</f></__radd>
		<new public="1" set="method" line="33">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the string literal syntax "string value".

	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":final"/>
		</meta>
	</class>
	<class path="StringBuf" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/StringBuf.hx">
		<__make line="52" static="1"><d/></__make>
		<__add line="53" static="1"><d/></__add>
		<__add_char line="54" static="1"><d/></__add_char>
		<__add_sub line="55" static="1"><d/></__add_sub>
		<__to_string line="56" static="1"><d/></__to_string>
		<__get_length line="57" static="1"><d/></__get_length>
		<b><d/></b>
		<get_length set="method" line="32">
			<f a=""><x path="Int"/></f>
			<meta><m n=":accessor"/></meta>
		</get_length>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringTools" params="" file="C:\HaxeToolkit\haxe\std/StringTools.hx">
		<htmlEscape public="1" set="method" line="97" static="1">
			<f a="s:?quotes" v=":null">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Escapes HTML special characters of the string `s`.

		The following replacements are made:

		- `&` becomes `&amp`;
		- `<` becomes `&lt`;
		- `>` becomes `&gt`;

		If `quotes` is true, the following characters are also replaced:

		- `"` becomes `&quot`;
		- `'` becomes `&#039`;]]></haxe_doc>
		</htmlEscape>
		<startsWith public="1" set="method" line="127" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is null, the result is unspecified.

		If `start` is the empty String "", the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="144" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is null, the result is unspecified.

		If `end` is the empty String "", the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="165" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String "", or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="179" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="204" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="226" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for ltrim(rtrim(s)).</haxe_doc>
		</trim>
		<replace public="1" set="method" line="291" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String "", `by` is inserted after each character
		of `s`. If `by` is also the empty String "", `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<_urlEncode line="392" static="1"><f a="">
	<unknown/>
	<c path="String"/>
</f></_urlEncode>
		<_urlDecode line="393" static="1"><f a="">
	<unknown/>
	<c path="String"/>
</f></_urlDecode>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Sys" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/Sys.hx">
		<print public="1" set="method" line="24" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output.</haxe_doc>
		</print>
		<println public="1" set="method" line="28" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Print any value on the standard output, followed by a newline</haxe_doc>
		</println>
		<systemName public="1" set="method" line="90" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the name of the system you are running on. For instance :
			"Windows", "Linux", "BSD" and "Mac" depending on your desktop OS.</haxe_doc>
		</systemName>
		<sys_string line="149" static="1"><f a=""><c path="String"/></f></sys_string>
		<haxe_doc>This class gives you access to many base functionalities of system platforms. Looks in [sys] sub packages for more system APIs.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="ValueType" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/Type.hx" module="Type">
		<TNull/>
		<TInt/>
		<TFloat/>
		<TBool/>
		<TObject/>
		<TFunction/>
		<TClass a="c"><x path="Class"><d/></x></TClass>
		<TEnum a="e"><x path="Enum"><d/></x></TEnum>
		<TUnknown/>
	</enum>
	<class path="Type" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="36" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" line="45" static="1">
			<f a="o">
				<x path="EnumValue"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc><![CDATA[Returns the enum of enum instance `o`.

		An enum instance is the result of using an enum constructor. Given an
		`enum Color { Red; }`, `getEnum(Red)` returns `Enum<Color>`.

		If `o` is null, null is returned.

		In general, type parameter information cannot be obtained at runtime.]]></haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" line="52" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="57" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" line="64" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		`pack1.pack2.(...).packN.EnumName`
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" line="69" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="84" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="98" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="111" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="117" static="1">
			<f a="e:constr:?params" v="::null">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="129" static="1">
			<f a="e:index:?params" v="::null">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" line="135" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the instance fields of class `c`.

		This only includes fields which are known at compile-time. In
		particular, using getInstanceFields(getClass(obj)) will not include
		any fields which were added to obj at runtime.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns instance fields that are public.</haxe_doc>
		</getInstanceFields>
		<getEnumConstructs public="1" set="method" line="168" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" line="173" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>Returns the runtime type of value `v`.

		The result corresponds to the type `v` has at runtime, which may vary
		per platform. Assumptions regarding this should be minimized to avoid
		surprises.</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" line="195" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" line="210" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" line="214" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</enumParameters>
		<allEnums public="1" params="T" set="method" line="222" static="1">
			<f a="e">
				<x path="Enum"><c path="allEnums.T"/></x>
				<c path="Array"><c path="allEnums.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</allEnums>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="ufront.web.Controller" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/Controller.hx">
		<context public="1" set="null">
			<c path="ufront.web.context.HttpContext"/>
			<meta>
				<m n="name"><e>"context"</e></m>
				<m n="type"><e>"ufront.web.context.HttpContext"</e></m>
				<m n="inject"/>
			</meta>
			<haxe_doc>The current HttpContext.

		This is set via dependency injection.

		If you want to run some code after this has been injected, you can use for example: `@post public function doAuthCheck() { context.auth.requirePermission(AccessAdminArea); }`.</haxe_doc>
		</context>
		<baseUri public="1" set="null">
			<c path="String"/>
			<haxe_doc>The Base URI that was used to access this controller.

		This will always include a trailing slash.

		For example if you had `/user/jason/profile/` trigger `UserController` (for Jason) and the `profile` action, then baseUrl would be `/user/jason/`.</haxe_doc>
		</baseUri>
		<execute public="1" set="method" line="133">
			<f a=""><t path="ufront.web.result.FutureActionOutcome"/></f>
			<haxe_doc><![CDATA[Execute the this controller with the current context.

		This will anazlyze the URI and the current `HttpRequest`, and match it to the appropriate action using the `@:route()` metadata.

		It will wrap the return result of your action in a `Surprise<ActionResult,tink.core.Error>`.

		Please note this is an abstract method.
		Each child class will have an override, provided by a build macro, that has the appropriate code for that class.]]></haxe_doc>
		</execute>
		<executeSubController public="1" set="method" line="140">
			<f a="controller">
				<x path="Class"><c path="ufront.web.Controller"/></x>
				<t path="ufront.web.result.FutureActionOutcome"/>
			</f>
			<haxe_doc>Instantiate and execute a sub controller.</haxe_doc>
		</executeSubController>
		<toString public="1" set="method" line="148">
			<f a=""><c path="String"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>A default toString() that prints the current class name.</haxe_doc>
		</toString>
		<ufTrace get="inline" set="null" line="156">
			<f a="msg:?pos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>A shortcut to `context.ufTrace()`</haxe_doc>
		</ufTrace>
		<ufLog get="inline" set="null" line="165">
			<f a="msg:?pos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>A shortcut to `context.ufLog()`</haxe_doc>
		</ufLog>
		<ufWarn get="inline" set="null" line="174">
			<f a="msg:?pos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>A shortcut to `context.ufWarn()`</haxe_doc>
		</ufWarn>
		<ufError get="inline" set="null" line="183">
			<f a="msg:?pos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>A shortcut to `context.ufError()`</haxe_doc>
		</ufError>
		<setBaseUri set="method" line="188"><f a="uriPartsBeforeRouting">
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></setBaseUri>
		<wrapResult set="method" line="198">
			<f a="result:wrappingRequired">
				<d/>
				<x path="haxe.EnumFlags"><e path="ufront.web.WrapRequired"/></x>
				<t path="tink.Surprise">
					<c path="ufront.web.result.ActionResult"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Based on a set of enum flags, wrap as required.  If null, return an appropriately wrapped EmptyResult()</haxe_doc>
		</wrapResult>
		<wrapInFuture params="T" set="method" line="213">
			<f a="result">
				<c path="wrapInFuture.T"/>
				<t path="tink.Future"><c path="wrapInFuture.T"/></t>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noDoc"/>
				<m n=":noUsing"/>
			</meta>
			<haxe_doc>A helper to wrap a return result in a Future</haxe_doc>
		</wrapInFuture>
		<wrapInOutcome params="T" set="method" line="219">
			<f a="future">
				<t path="tink.Future"><c path="wrapInOutcome.T"/></t>
				<t path="tink.Surprise">
					<c path="wrapInOutcome.T"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noDoc"/>
				<m n=":noUsing"/>
			</meta>
			<haxe_doc>A helper to wrap a return result in a Future</haxe_doc>
		</wrapInOutcome>
		<wrapResultOrError set="method" line="225">
			<f a="surprise">
				<t path="tink.Surprise">
					<d/>
					<d/>
				</t>
				<t path="tink.Surprise">
					<c path="ufront.web.result.ActionResult"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noDoc"/>
				<m n=":noUsing"/>
			</meta>
			<haxe_doc>A helper to wrap a return result in a Future</haxe_doc>
		</wrapResultOrError>
		<setContextActionResultWhenFinished set="method" line="234">
			<f a="result">
				<t path="tink.Surprise">
					<c path="ufront.web.result.ActionResult"/>
					<t path="tink.Error"/>
				</t>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":noDoc"/>
				<m n=":noUsing"/>
			</meta>
			<haxe_doc>A helper to set context.actionResult once the result of execute() has finished loading.</haxe_doc>
		</setContextActionResultWhenFinished>
		<new public="1" set="method" line="121">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create a new `Controller` instance.

		Most of the time a controller will be created using dependency injection:

		    `injector.instantiate( MyController )`

		If not creating a controller with `new MyController()` by sure to inject the dependencies (such as `context`) manually.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A base class for your controllers when using Ufront's MVC (Model View Controller) pattern.

A controller helps decide on the appropriate action to be taken given the route and parameters provided.
It then interacts with the site's API, and returns an `ActionResult`, (or `FutureActionResult`) which is used to write a response back to the client.

#### The base controller provides:

- A `this.context` property holding the current `HttpContext`
- An macro powered `this.execute()` method which:
	- decides which method to execute as the "action" for this request based upon the URI and parameters,
	- from the URI and HTTP parameters, extract variables required for the chosen action,
	- return a `Surprise`, that holds either an `ActionResult` or an `Error`.
- A `this.executeSubController()` method to create a sub controller, perform dependency injection, and execute it.
- A `this.baseUri` property with the base URI for reaching this controller in your app's routing.
- Shortcuts to `this.ufTrace()`, `this.ufLog()`, `this.ufWarn()` and `this.ufError()` that can be used in your controller code.
- A `this.toString()` method that prints the current class name, helpful when logging or debugging.

#### How to set up routes:

An "action" is a method of the controller that can be called by visiting a certain route.

You set up an action by defining function and giving it `@:route` metadata.

Here are some examples:

- `@:route('/') function homepage() {}`
- `@:route('/staff/') function staff() {}`
- `@:route('/staff/$name/') function viewPerson( name:String ) {}`
- `@:route('/staff/$name/contact/',GET) function contact( name:String ) {}`
- `@:route('/staff/$name/contact/',POST) function contact( name:String, args:{ subject:String, text:String } ) {}`
- `@:route('/article/$name/$page/') function article( name:String, page:Int ) {}`
- `@:route('/file/*') function viewFile( parts:Array<String> ) {}`
- `@:route('/ufadmin/*') var adminController:UFAdminHomeController; // Execute a sub controller at this route.`

#### How to write output to the browser:

- Each action must return a value
- Possible return values are:
	- `Surprise<ActionResult,tink.core.Error>`
	- `Surprise<Dynamic,Dynamic>`
	- `Future<Dynamic>`
	- `Outcome<ActionResult,tink.core.Error>`
	- `Outcome<Dynamic,tink.core.Error>`
	- `ActionResult`
	- `Dynamic`

Each different return type will be handled by `this.execute()`, and wrapped appropriately so that execute will always return a `Surprise<ActionResult,tink.core.Error>`.

Please note that if an exception is thrown in one of your actions, it will be caught and turned into an appropriate `tink.core.Error` object to be handled by your application's error handlers.

#### Build macro

The `this.execute()` method on this class is abstract, and should be overridden on each child class via a build macro customized especially for that class given the `@:route()` metadata.

The build macro will look for all methods with `@:route()` metadata, and create a giant if / else if / else statement:

```haxe
if ( uri=="/" ) return index();
else if ( uri=="/contact/" && method=="GET" ) return contactForm();
else if ( uri=="/contact/" && method=="POST" ) return sendContactEmail();
else throw HttpError.pageNotFound();
```

Of course it gets more complicated as your routes become more complicated, but this basic structure stays the same.

The `this.execute()` method will test each route in the order they are defined.
So if you have a wildcard route `@:route("/*")`  at the top of your class, and a specific route `@:route('/mypage/')` below it, the wildcard will match first and be called every time.

If the build macro encounters `@:route()` metadata on a variable rather than a method, it will:

- Check the given variable's type represents a Controller
- Create a method: `function execute_$varName() return executeSubController(context);`
- Perform the routing on the generated function

The build macro should not effect any existing fields other than `this.execute()`.]]></haxe_doc>
		<meta><m n=":autoBuild"><e>'???'</e></m></meta>
	</class>
	<class path="app.Routes" params="" file="src/app/Routes.hx">
		<extends path="ufront.web.Controller"/>
		<index public="1" set="method" line="20">
			<f a="?name" v="'world'">
				<c path="String"/>
				<c path="ufront.web.result.ViewResult"/>
			</f>
			<meta>
				<m n="wrapResult"><e>3</e></m>
				<m n=":route">
					<e>"/$name"</e>
					<e>GET</e>
				</m>
			</meta>
		</index>
		<submit public="1" set="method" line="29">
			<f a="args">
				<a><name><c path="String"/></name></a>
				<c path="ufront.web.result.RedirectResult"/>
			</f>
			<meta>
				<m n="wrapResult"><e>3</e></m>
				<m n=":route">
					<e>"/action/submit/"</e>
					<e>POST</e>
				</m>
			</meta>
		</submit>
		<execute public="1" set="method" line="419" override="1"><f a=""><t path="tink.Surprise">
	<c path="ufront.web.result.ActionResult"/>
	<t path="tink.core.Error"/>
</t></f></execute>
		<new public="1" set="method" line="17"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* Handles URI routing. View folder is set to root of view directory to avoid
 * UFront searching for views in '/view/Routes/' (because it guesses the folder
 * name to be the same as the class name).</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="viewFolder"><e>"/"</e></m>
		</meta>
	</class>
	<enum path="haxe.StackItem" params="" file="C:\HaxeToolkit\haxe\std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<LocalFunction a="v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<class path="haxe.CallStack" params="" file="C:\HaxeToolkit\haxe\std/haxe/CallStack.hx">
		<callStack public="1" set="method" line="43" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="115" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="170" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<itemToString set="method" line="179" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<makeStack set="method" line="206" static="1"><f a="s">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></makeStack>
		<haxe_doc>Get informations about the call stack.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.EnumFlags" params="T" file="C:\HaxeToolkit\haxe\std/haxe/EnumFlags.hx">
		<this><x path="Int"/></this>
		<haxe_doc>A typed interface for bit flags. This is not a real object, only a typed
	interface for an actual Int. Each flag can be tested/set with the
	corresponding enum instance. Up to 32 flags can be stored that way.

	Enum constructor indices are preserved from haxe syntax, so the first
	declared is index 0, the next index 1 etc. The methods are optimized if the
	enum instance is passed directly, e.g. as has(EnumCtor). Otherwise
	Type.enumIndex() reflection is used.</haxe_doc>
		<impl><class path="haxe._EnumFlags.EnumFlags_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumFlags.hx" private="1" module="haxe.EnumFlags"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params" v="::null">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params" v="::null">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="C:\HaxeToolkit\haxe\std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
	</class>
	<class path="haxe.Log" params="" file="C:\HaxeToolkit\haxe\std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="45" static="1">
			<f a="v:?infos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the trace() call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v,infos) { // handle trace }
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to trace() will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
	trace() in haxe code.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\HaxeToolkit\haxe\std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<c path="Array"><d/></c>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Serializer" params="" file="C:\HaxeToolkit\haxe\std/haxe/Serializer.hx">
		<USE_CACHE public="1" line="55" static="1">
			<x path="Bool"/>
			<haxe_doc>If the values you are serializing can contain circular references or
		objects repetitions, you should set USE_CACHE to true to prevent
		infinite loops.

		This may also reduce the size of serialization Strings at the expense of
		performance.

		This value can be changed for individual instances of Serializer by
		setting their useCache field.</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" line="67" static="1">
			<x path="Bool"/>
			<haxe_doc>Use constructor indexes for enums instead of names.

		This may reduce the size of serialization Strings, but makes them less
		suited for long-term storage: If constructors are removed or added from
		the enum, the indices may no longer match.

		This value can be changed for individual instances of Serializer by
		setting their useEnumIndex field.</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 line="69" static="1"><c path="String"/></BASE64>
		<run public="1" set="method" line="526" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Serializes `v` and returns the String representation.

		This is a convenience function for creating a new instance of
		Serializer, serialize `v` into it and obtain the result through a call
		to toString().</haxe_doc>
		</run>
		<base_encode line="533" static="1"><f a=":">
	<t path="haxe.io.BytesData"/>
	<unknown/>
	<c path="String"/>
</f></base_encode>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="haxe.ds.StringMap"><x path="Int"/></c></shash>
		<scount><x path="Int"/></scount>
		<useCache public="1">
			<x path="Bool"/>
			<haxe_doc>The individual cache setting for `this` Serializer instance.

		See USE_CACHE for a complete description.</haxe_doc>
		</useCache>
		<useEnumIndex public="1">
			<x path="Bool"/>
			<haxe_doc>The individual enum index setting for `this` Serializer instance.

		See USE_ENUM_INDEX for a complete description.</haxe_doc>
		</useEnumIndex>
		<toString public="1" set="method" line="115">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the String representation of `this` Serializer.

		The exact format specification can be found here:
		http://haxe.org/manual/serialization/format</haxe_doc>
		</toString>
		<serializeString set="method" line="150"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="169"><f a="v">
	<unknown/>
	<x path="Bool"/>
</f></serializeRef>
		<serializeFields set="method" line="206"><f a="v">
	<unknown/>
	<x path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="224">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Serializes `v`.

		All haxe-defined values and objects with the exception of functions can
		be serialized. Serialization of external/native objects is not
		guaranteed to work.

		The values of `this.useCache` and `this.useEnumIndex` may affect
		serialization output.</haxe_doc>
		</serialize>
		<serializeException public="1" set="method" line="503"><f a="e">
	<d/>
	<x path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="100">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Serializer instance.

		Subsequent calls to `this.serialize` will append values to the
		internal buffer of this String. Once complete, the contents can be
		retrieved through a call to `this.toString`.

		Each Serializer instance maintains its own cache if this.useCache` is
		true.</haxe_doc>
		</new>
		<haxe_doc>The Serializer class can be used to encode values and objects into a String,
	from which the Unserializer class can recreate the original representation.

	This class can be used in two ways:

	- create a new Serializer() instance, call its serialize() method with
		any argument and finally retrieve the String representation from
		toString()
	- call Serializer.run() to obtain the serialized representation of a
		single argument

	Serialization is guaranteed to work for all haxe-defined classes, but may
	or may not work for instances of external/native classes.

	The specification of the serialization format can be found here:
	`http://haxe.org/manual/serialization/format`</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="haxe._Template.TemplateExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/Template.hx" private="1" module="haxe.Template">
		<OpVar a="v"><c path="String"/></OpVar>
		<OpExpr a="expr"><f a=""><d/></f></OpExpr>
		<OpIf a="expr:eif:eelse">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
			<e path="haxe._Template.TemplateExpr"/>
		</OpIf>
		<OpStr a="str"><c path="String"/></OpStr>
		<OpBlock a="l"><c path="List"><e path="haxe._Template.TemplateExpr"/></c></OpBlock>
		<OpForeach a="expr:loop">
			<f a=""><d/></f>
			<e path="haxe._Template.TemplateExpr"/>
		</OpForeach>
		<OpMacro a="name:params">
			<c path="String"/>
			<c path="List"><e path="haxe._Template.TemplateExpr"/></c>
		</OpMacro>
	</enum>
	<typedef path="haxe._Template.Token" params="" file="C:\HaxeToolkit\haxe\std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="C:\HaxeToolkit\haxe\std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="haxe.Template" params="" file="C:\HaxeToolkit\haxe\std/haxe/Template.hx">
		<splitter line="54" static="1"><c path="EReg"/></splitter>
		<expr_splitter line="55" static="1"><c path="EReg"/></expr_splitter>
		<expr_trim line="56" static="1"><c path="EReg"/></expr_trim>
		<expr_int line="57" static="1"><c path="EReg"/></expr_int>
		<expr_float line="58" static="1"><c path="EReg"/></expr_float>
		<globals public="1" line="64" static="1">
			<d/>
			<haxe_doc>Global replacements which are used across all Template instances. This
		has lower priority than the context argument of execute().</haxe_doc>
		</globals>
		<expr><e path="haxe._Template.TemplateExpr"/></expr>
		<context><d/></context>
		<macros><d/></macros>
		<stack><c path="List"><d/></c></stack>
		<buf><c path="StringBuf"/></buf>
		<execute public="1" set="method" line="105">
			<f a="context:?macros" v=":null">
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Executes `this` Template, taking into account `context` for
		replacements and `macros` for callback functions.

		If `context` has a field 'name', its value replaces all occurrences of
		::name:: in the Template. Otherwise Template.globals is checked instead,
		If 'name' is not a field of that either, ::name:: is replaced with null.

		If `macros` has a field 'name', all occurrences of $$name(args) are
		replaced with the result of calling that field. The first argument is
		always the resolve() method, followed by the given arguments.
		If `macros` has no such field, the result is unspecified.

		If `context` is null, the result is unspecified. If `macros` is null,
		no macros are used.</haxe_doc>
		</execute>
		<resolve set="method" line="114"><f a="v">
	<c path="String"/>
	<d/>
</f></resolve>
		<parseTokens set="method" line="125"><f a="data">
	<c path="String"/>
	<c path="List"><t path="haxe._Template.Token"/></c>
</f></parseTokens>
		<parseBlock set="method" line="171"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parseBlock>
		<parse set="method" line="186"><f a="tokens">
	<c path="List"><t path="haxe._Template.Token"/></c>
	<e path="haxe._Template.TemplateExpr"/>
</f></parse>
		<parseExpr set="method" line="236"><f a="data">
	<c path="String"/>
	<f a=""><unknown/></f>
</f></parseExpr>
		<makeConst set="method" line="267"><f a="v">
	<c path="String"/>
	<f a=""><d/></f>
</f></makeConst>
		<makePath set="method" line="286"><f a="e:l">
	<f a=""><d/></f>
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makePath>
		<makeExpr set="method" line="300"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr>
		<makeExpr2 set="method" line="304"><f a="l">
	<c path="List"><t path="haxe._Template.ExprToken"/></c>
	<f a=""><d/></f>
</f></makeExpr2>
		<run set="method" line="350"><f a="e">
	<e path="haxe._Template.TemplateExpr"/>
	<x path="Void"/>
</f></run>
		<new public="1" set="method" line="82">
			<f a="str">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Template instance from `str`.

		`str` is parsed into tokens, which are stored for internal use. This
		means that multiple execute() operations on a single Template instance
		are more efficient than one execute() operations on multiple Template
		instances.

		If `str` is null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>Template provides a basic templating mechanism to replace values in a source
	String, and to have some basic logic.

	A complete documentation of the supported syntax is available at:
	http://haxe.org/doc/cross/template</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.Unserializer" params="" file="C:\HaxeToolkit\haxe\std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" line="60" static="1">
			<t path="haxe.TypeResolver"/>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a Class or Enum instance from a given String. By
		default, the haxe Type Api is used.

		A type resolver must provide two methods:

		1. resolveClass(name:String):Class<Dynamic> is called to determine a
				Class from a class name
		2. resolveEnum(name:String):Enum<Dynamic> is called to determine an
				Enum from an enum name

		This value is applied when a new Unserializer instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 line="62" static="1"><c path="String"/></BASE64>
		<run public="1" set="method" line="433" static="1">
			<f a="v">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Unserializes `v` and returns the according value.

		This is a convenience function for creating a new instance of
		Unserializer with `v` as buffer and calling its unserialize() method
		once.</haxe_doc>
		</run>
		<base_decode line="438" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<t path="haxe.io.BytesData"/>
</f></base_decode>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<upos><x path="Int"/></upos>
		<setResolver public="1" set="method" line="124">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is null, a special resolver is used which returns null for all
		input values.

		See DEFAULT_RESOLVER for more information on type resolvers.</haxe_doc>
		</setResolver>
		<readDigits set="method" line="147"><f a=""><x path="Int"/></f></readDigits>
		<unserializeObject set="method" line="172"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum set="method" line="187"><f a="edecl:tag">
	<x path="Enum"><unknown/></x>
	<c path="String"/>
	<unknown/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="219">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from Type.createEmptyInstance, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="99">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc>The Unserializer class is the complement to the Serializer class. It parses
	a serialization String and creates objects from the contained data.

	This class can be used in two ways:

	- create a new Unserializer() instance with a given serialization
		String, then call its unserialize() method until all values are
		extracted
	- call Unserializer.run() to unserialize a single value from a given
		String</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.GenericCell" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/GenericStack.hx" module="haxe.ds.GenericStack">
		<elt public="1"><c path="haxe.ds.GenericCell.T"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c></next>
		<new public="1" set="method" line="30"><f a="elt:next">
	<c path="haxe.ds.GenericCell.T"/>
	<c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericCell.T"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.GenericStack" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell"><c path="haxe.ds.GenericStack.T"/></c></head>
		<new public="1" set="method" line="67">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A stack of elements.

	This class is generic, which means one type is generated for each type
	parameter T on static targets. For example:

	- `new GenericStack<Int>()` generates `GenericStack_Int`
	- `new GenericStack<String>()` generates `GenericStack_String`

	The generated name is an implementation detail and should not be relied
	upon.]]></haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx">
		<this><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></this>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="C:\HaxeToolkit\haxe\std/neko/_std/haxe/ds/IntMap.hx">
		<implements path="IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><d/></h>
		<get public="1" set="method" line="36">
			<f a="key">
				<x path="Int"/>
				<t path="Null"><c path="haxe.ds.IntMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="40">
			<f a="key">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<keys public="1" set="method" line="48">
			<f a=""><t path="Iterator"><x path="Int"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="C:\HaxeToolkit\haxe\std/neko/_std/haxe/ds/ObjectMap.hx">
		<implements path="IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<count line="27" static="1"><x path="Int"/></count>
		<h><a/></h>
		<k><a/></k>
		<get public="1" set="method" line="53">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<t path="Null"><c path="haxe.ds.ObjectMap.V"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="57">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<keys public="1" set="method" line="67">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.K"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<new public="1" set="method" line="42">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<enum path="haxe.ds.Option" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Option.hx">
		<Some a="v"><c path="haxe.ds.Option.T"/></Some>
		<None/>
		<haxe_doc>An Option is a wrapper type which can either have a value (Some) or not a
	value (None).</haxe_doc>
	</enum>
	<class path="haxe.ds.StringMap" params="T" file="C:\HaxeToolkit\haxe\std/neko/_std/haxe/ds/StringMap.hx">
		<implements path="IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h><d/></h>
		<get public="1" get="inline" set="null" line="36">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<exists public="1" get="inline" set="null" line="40">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.exists`</haxe_doc>
		</exists>
		<keys public="1" set="method" line="48">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="54">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="60">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="neko.NativeArray"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="C:\HaxeToolkit\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="357" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="382" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="435" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<compare public="1" set="method" line="153"><f a="other">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
</f></compare>
		<getString public="1" set="method" line="261"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getString>
		<toString public="1" set="method" line="318"><f a=""><c path="String"/></f></toString>
		<new set="method" line="33"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesBuffer.hx">
		<b><d/></b>
		<getBytes public="1" set="method" line="173">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesData.hx"><c path="neko.NativeString"/></typedef>
	<class path="haxe.io.Input" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Input.hx">
		<readByte public="1" set="method" line="37"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="46"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="67"><f a=""><x path="Void"/></f></close>
		<readAll public="1" set="method" line="77"><f a="?bufsize" v="null">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></readAll>
		<readFullBytes public="1" set="method" line="99"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readFullBytes>
		<read public="1" set="method" line="107"><f a="nbytes">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></read>
		<readString public="1" set="method" line="326"><f a="len">
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the [haxe.io] package
	for several possible implementations.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesInput" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><x path="Int"/></pos>
		<len><x path="Int"/></len>
		<totlen><x path="Int"/></totlen>
		<readByte public="1" set="method" line="87" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="108" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="38"><f a="b:?pos:?len" v=":null:null">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Output" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Output.hx">
		<writeByte public="1" set="method" line="38"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="42"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<close public="1" set="method" line="68"><f a=""><x path="Void"/></f></close>
		<write public="1" set="method" line="78"><f a="s">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></write>
		<writeFullBytes public="1" set="method" line="89"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeFullBytes>
		<writeInput public="1" set="method" line="291"><f a="i:?bufsize" v=":null">
	<c path="haxe.io.Input"/>
	<x path="Int"/>
	<x path="Void"/>
</f></writeInput>
		<writeString public="1" set="method" line="313"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the [writeChar] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<writeByte public="1" set="method" line="48" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="56" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="113"><f a=""><c path="haxe.io.Bytes"/></f></getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Eof" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the [Input].</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="haxe.io.Error" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="haxe.io.Path" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/Path.hx">
		<withoutDirectory public="1" set="method" line="128" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String representation of `path` without the directory.

		If `path` is null, the result is unspecified.</haxe_doc>
		</withoutDirectory>
		<directory public="1" set="method" line="141" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the directory of `path`.

		If the directory is null, the empty String "" is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</directory>
		<extension public="1" set="method" line="155" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the extension of `path`.

		If the extension is null, the empty String "" is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</extension>
		<withExtension public="1" set="method" line="169" static="1">
			<f a="path:ext">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a String representation of `path` where the extension is `ext`.

		If `path` has no extension, `ext` is added as extension.

		If `path` or `ext` are null, the result is unspecified.</haxe_doc>
		</withExtension>
		<addTrailingSlash public="1" set="method" line="268" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Adds a trailing slash to `path`, if it does not have one already.

		If the last slash in `path` is a backslash, a backslash is appended to
		`path`.

		If the last slash in `path` is a slash, or if no slash is found, a slash
		is appended to `path`. In particular, this applies to the empty String
		"".

		If `path` is null, the result is unspecified.</haxe_doc>
		</addTrailingSlash>
		<removeTrailingSlashes public="1" set="method" line="293" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":require"><e><![CDATA[haxe_ver>=3.1]]></e></m></meta>
			<haxe_doc>Removes trailing slashes from `path`.

		If `path` does not end with a `/` or `\`, `path` is returned unchanged.

		Otherwise the substring of `path` excluding the trailing slashes or
		backslashes is returned.

		If `path` is null, the result is unspecified.</haxe_doc>
		</removeTrailingSlashes>
		<dir public="1">
			<c path="String"/>
			<haxe_doc>The directory.

		This is the leading part of the path that is not part of the file name
		and the extension.

		Does not end with a `/` or `\` separator.

		If the path has no directory, the value is null.</haxe_doc>
		</dir>
		<file public="1">
			<c path="String"/>
			<haxe_doc>The file name.

		This is the part of the part between the directory and the extension.

		If there is no file name, e.g. for ".htaccess" or "/dir/", the value
		is the empty String "".</haxe_doc>
		</file>
		<ext public="1">
			<c path="String"/>
			<haxe_doc>The file extension.

		It is separated from the file name by a dot. This dot is not part of
		the extension.

		If the path has no extension, the value is null.</haxe_doc>
		</ext>
		<backslash public="1">
			<x path="Bool"/>
			<haxe_doc>True if the last directory separator is a backslash, false otherwise.</haxe_doc>
		</backslash>
		<toString public="1" set="method" line="108">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` path.

		If `this.backslash` is true, backslash is used as directory separator,
		otherwise slash is used. This only affects the separator between
		`this.dir` and `this.file`.

		If `this.directory` or `this.extension` is null, their representation
		is the empty String "".</haxe_doc>
		</toString>
		<new public="1" set="method" line="76">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Path instance by parsing `path`.

		Path information can be retrieved by accessing the dir, file and ext
		properties.</haxe_doc>
		</new>
		<haxe_doc>This class provides a convenient way of working with paths. It supports the
	common path formats:

	- directory1/directory2/filename.extension
	- directory1\directory2\filename.excention</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.StringInput" params="" file="C:\HaxeToolkit\haxe\std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<typedef path="haxe.macro.Expr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.Case" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<guard>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</guard>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Var" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Catch" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></typedef>
	<typedef path="haxe.macro.TypePath" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params>
		<c path="Array"><e path="haxe.macro.TypeParam"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
	<constraints>
		<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		<meta><m n=":optional"/></meta>
	</constraints>
</a></typedef>
	<typedef path="haxe.macro.Function" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt>
		<x path="Bool"/>
		<meta><m n=":optional"/></meta>
	</opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<c path="Array"><t path="haxe.macro.Expr"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><t path="haxe.macro.MetadataEntry"/></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<c path="Array"><e path="haxe.macro.Access"/></c>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern>
		<x path="Bool"/>
		<meta><m n=":optional"/></meta>
	</isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<typedef path="haxe.macro.Ref" params="T" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<typedef path="haxe.macro.AnonType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<status><e path="haxe.macro.AnonStatus"/></status>
	<fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields>
</a></typedef>
	<typedef path="haxe.macro.TypeParameter" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><x path="Bool"/></isPublic>
	<expr set="method"><f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<overrides><c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c></overrides>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.ClassKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><t path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructs><c path="haxe.ds.StringMap"><t path="haxe.macro.EnumField"/></c></constructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<unops><c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></unops>
	<type><e path="haxe.macro.Type"/></type>
	<to><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></to>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<impl><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t></impl>
	<from><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></from>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<binops><c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></binops>
	<array><c path="Array"><t path="haxe.macro.ClassField"/></c></array>
</a></typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TVar" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
	<id><x path="Int"/></id>
	<extra><t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t></extra>
	<capture><x path="Bool"/></capture>
</a></typedef>
	<typedef path="haxe.macro.TFunc" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
	<args><c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c></args>
</a></typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="C:\HaxeToolkit\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.TypedExprDef"/></expr>
</a></typedef>
	<class path="haxe.remoting.Context" params="" file="C:\HaxeToolkit\haxe\std/haxe/remoting/Context.hx">
		<objects><c path="haxe.ds.StringMap"><a>
	<rec><x path="Bool"/></rec>
	<obj><d/></obj>
</a></c></objects>
		<addObject public="1" set="method" line="32"><f a="name:obj:?recursive" v="::null">
	<c path="String"/>
	<a/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addObject>
		<call public="1" set="method" line="36"><f a="path:params">
	<c path="Array"><c path="String"/></c>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="haxe.remoting.RemotingError" params="FailureType" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/haxe/remoting/RemotingError.hx">
		<HttpError a="remotingCallString:responseCode:responseData">
			<c path="String"/>
			<x path="Int"/>
			<c path="String"/>
		</HttpError>
		<ServerSideException a="remotingCallString:e:stack">
			<c path="String"/>
			<d/>
			<c path="String"/>
		</ServerSideException>
		<ClientCallbackException a="remotingCallString:e">
			<c path="String"/>
			<d/>
		</ClientCallbackException>
		<UnserializeFailed a="remotingCallString:troubleLine:err">
			<c path="String"/>
			<c path="String"/>
			<c path="String"/>
		</UnserializeFailed>
		<NoRemotingResult a="remotingCallString:responseData">
			<c path="String"/>
			<c path="String"/>
		</NoRemotingResult>
		<ApiFailure a="remotingCallString:data">
			<c path="String"/>
			<c path="haxe.remoting.RemotingError.FailureType"/>
		</ApiFailure>
		<UnknownException a="e"><d/></UnknownException>
	</enum>
	<class path="haxe.remoting.RemotingUtil" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/haxe/remoting/RemotingUtil.hx">
		<processResponse public="1" set="method" line="7" static="1"><f a="response:onResult:onError:remotingCallString">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<c path="String"/>
	<x path="Void"/>
</f></processResponse>
		<wrapErrorHandler public="1" set="method" line="83" static="1">
			<f a="errorHandler">
				<f a="">
					<e path="haxe.remoting.RemotingError"><d/></e>
					<x path="Void"/>
				</f>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>Take an error handler function that expects a RemotingError, and return a function that can take any exception, and transform it into a RemotingError if required.</haxe_doc>
		</wrapErrorHandler>
	</class>
	<typedef path="haxe.rtti.Path" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="String"/></typedef>
	<typedef path="haxe.rtti.Platforms" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="List"><c path="String"/></c></typedef>
	<typedef path="haxe.rtti.FunctionArgument" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<value>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</value>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.rtti.PathParams" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<path><t path="haxe.rtti.Path"/></path>
	<params><c path="List"><e path="haxe.rtti.CType"/></c></params>
</a></typedef>
	<typedef path="haxe.rtti.TypeParams" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><c path="String"/></c></typedef>
	<typedef path="haxe.rtti.MetaData" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><a>
	<params><c path="Array"><c path="String"/></c></params>
	<name><c path="String"/></name>
</a></c></typedef>
	<typedef path="haxe.rtti.ClassField" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<type><e path="haxe.rtti.CType"/></type>
	<set><e path="haxe.rtti.Rights"/></set>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<overloads><t path="Null"><c path="List"><t path="haxe.rtti.ClassField"/></c></t></overloads>
	<name><c path="String"/></name>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<line><t path="Null"><x path="Int"/></t></line>
	<isPublic><x path="Bool"/></isPublic>
	<isOverride><x path="Bool"/></isOverride>
	<get><e path="haxe.rtti.Rights"/></get>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.TypeInfos" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.Classdef" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<tdynamic><t path="Null"><e path="haxe.rtti.CType"/></t></tdynamic>
	<superClass><t path="haxe.rtti.PathParams"/></superClass>
	<statics><c path="List"><t path="haxe.rtti.ClassField"/></c></statics>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="List"><t path="haxe.rtti.PathParams"/></c></interfaces>
	<file><t path="Null"><c path="String"/></t></file>
	<fields><c path="List"><t path="haxe.rtti.ClassField"/></c></fields>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.EnumField" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<name><c path="String"/></name>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<doc><c path="String"/></doc>
	<args><t path="Null"><c path="List"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c></t></args>
</a></typedef>
	<typedef path="haxe.rtti.Enumdef" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
	<constructors><c path="List"><t path="haxe.rtti.EnumField"/></c></constructors>
</a></typedef>
	<typedef path="haxe.rtti.Typedef" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<types><c path="haxe.ds.StringMap"><e path="haxe.rtti.CType"/></c></types>
	<type><e path="haxe.rtti.CType"/></type>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
</a></typedef>
	<typedef path="haxe.rtti.Abstractdef" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><a>
	<to><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><t path="Null"><c path="String"/></t></field>
</a></c></to>
	<platforms><t path="haxe.rtti.Platforms"/></platforms>
	<path><t path="haxe.rtti.Path"/></path>
	<params><t path="haxe.rtti.TypeParams"/></params>
	<module><t path="haxe.rtti.Path"/></module>
	<meta><t path="haxe.rtti.MetaData"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<impl><t path="haxe.rtti.Classdef"/></impl>
	<from><c path="Array"><a>
	<t><e path="haxe.rtti.CType"/></t>
	<field><t path="Null"><c path="String"/></t></field>
</a></c></from>
	<file><t path="Null"><c path="String"/></t></file>
	<doc><c path="String"/></doc>
	<athis><e path="haxe.rtti.CType"/></athis>
</a></typedef>
	<typedef path="haxe.rtti.TypeRoot" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/CType.hx" module="haxe.rtti.CType"><c path="Array"><e path="haxe.rtti.TypeTree"/></c></typedef>
	<class path="haxe.rtti.Meta" params="" file="C:\HaxeToolkit\haxe\std/haxe/rtti/Meta.hx">
		<getType public="1" set="method" line="32" static="1">
			<f a="t">
				<d/>
				<d><c path="Array"><d/></c></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given type (class or enum)</haxe_doc>
		</getType>
		<getFields public="1" set="method" line="56" static="1">
			<f a="t">
				<d/>
				<d><d><c path="Array"><d/></c></d></d>
			</f>
			<haxe_doc>Returns the metadata that were declared for the given class fields or enum constructors</haxe_doc>
		</getFields>
		<haxe_doc>An api to access classes and enums metadata at runtime.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.web.DispatchConfig" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><a>
	<rules><d/></rules>
	<obj><d/></obj>
</a></typedef>
	<typedef path="haxe.web.Lock" params="T" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><c path="haxe.web.Lock.T"/></typedef>
	<enum path="haxe.web.MatchRule" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<MRInt/>
		<MRBool/>
		<MRFloat/>
		<MRString/>
		<MREnum a="e"><c path="String"/></MREnum>
		<MRDispatch/>
		<MRSpod a="c:lock">
			<c path="String"/>
			<x path="Bool"/>
		</MRSpod>
		<MROpt a="r"><e path="haxe.web.MatchRule"/></MROpt>
	</enum>
	<enum path="haxe.web.DispatchRule" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<DRMatch a="r"><e path="haxe.web.MatchRule"/></DRMatch>
		<DRMult a="r"><c path="Array"><e path="haxe.web.MatchRule"/></c></DRMult>
		<DRArgs a="r:args:opt">
			<e path="haxe.web.DispatchRule"/>
			<c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<x path="Bool"/>
		</DRArgs>
		<DRMeta a="r"><e path="haxe.web.DispatchRule"/></DRMeta>
	</enum>
	<enum path="haxe.web.DispatchError" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch">
		<DENotFound a="part"><c path="String"/></DENotFound>
		<DEInvalidValue/>
		<DEMissing/>
		<DEMissingParam a="p"><c path="String"/></DEMissingParam>
		<DETooManyValues/>
	</enum>
	<class path="haxe.web.Redirect" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx" module="haxe.web.Dispatch"><meta><m n=":keep"/></meta></class>
	<class path="haxe.web.Dispatch" params="" file="C:\HaxeToolkit\haxe\std/haxe/web/Dispatch.hx">
		<parts public="1"><c path="Array"><c path="String"/></c></parts>
		<params public="1"><c path="haxe.ds.StringMap"><c path="String"/></c></params>
		<name public="1"><c path="String"/></name>
		<cfg public="1"><t path="haxe.web.DispatchConfig"/></cfg>
		<subDispatch><x path="Bool"/></subDispatch>
		<onMeta public="1" set="dynamic" line="102"><f a="v:args">
	<c path="String"/>
	<t path="Null"><c path="Array"><d/></c></t>
	<x path="Void"/>
</f></onMeta>
		<match set="method" line="151"><f a="v:r:opt">
	<c path="String"/>
	<e path="haxe.web.MatchRule"/>
	<x path="Bool"/>
	<d/>
</f></match>
		<checkParams set="method" line="209"><f a="params:opt">
	<c path="Array"><a>
	<rule><e path="haxe.web.MatchRule"/></rule>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
	<x path="Bool"/>
	<a/>
</f></checkParams>
		<loop set="method" line="223"><f a="args:r">
	<c path="Array"><d/></c>
	<e path="haxe.web.DispatchRule"/>
	<x path="Void"/>
</f></loop>
		<new public="1" set="method" line="76"><f a="url:params">
	<c path="String"/>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="hscript.Const" params="" file="C:\HaxeToolkit\haxe\lib/hscript/2,0,4/hscript/Expr.hx" module="hscript.Expr">
		<CInt a="v"><x path="Int"/></CInt>
		<CFloat a="f"><x path="Float"/></CFloat>
		<CString a="s"><c path="String"/></CString>
	</enum>
	<enum path="hscript.Expr" params="" file="C:\HaxeToolkit\haxe\lib/hscript/2,0,4/hscript/Expr.hx">
		<EConst a="c"><e path="hscript.Const"/></EConst>
		<EIdent a="v"><c path="String"/></EIdent>
		<EVar a="n:?t:?e">
			<c path="String"/>
			<e path="hscript.CType"/>
			<e path="hscript.Expr"/>
		</EVar>
		<EParent a="e"><e path="hscript.Expr"/></EParent>
		<EBlock a="e"><c path="Array"><e path="hscript.Expr"/></c></EBlock>
		<EField a="e:f">
			<e path="hscript.Expr"/>
			<c path="String"/>
		</EField>
		<EBinop a="op:e1:e2">
			<c path="String"/>
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EBinop>
		<EUnop a="op:prefix:e">
			<c path="String"/>
			<x path="Bool"/>
			<e path="hscript.Expr"/>
		</EUnop>
		<ECall a="e:params">
			<e path="hscript.Expr"/>
			<c path="Array"><e path="hscript.Expr"/></c>
		</ECall>
		<EIf a="cond:e1:?e2">
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EIf>
		<EWhile a="cond:e">
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EWhile>
		<EFor a="v:it:e">
			<c path="String"/>
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EFor>
		<EBreak/>
		<EContinue/>
		<EFunction a="args:e:?name:?ret">
			<c path="Array"><t path="hscript.Argument"/></c>
			<e path="hscript.Expr"/>
			<c path="String"/>
			<e path="hscript.CType"/>
		</EFunction>
		<EReturn a="?e"><e path="hscript.Expr"/></EReturn>
		<EArray a="e:index">
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EArray>
		<EArrayDecl a="e"><c path="Array"><e path="hscript.Expr"/></c></EArrayDecl>
		<ENew a="cl:params">
			<c path="String"/>
			<c path="Array"><e path="hscript.Expr"/></c>
		</ENew>
		<EThrow a="e"><e path="hscript.Expr"/></EThrow>
		<ETry a="e:v:t:ecatch">
			<e path="hscript.Expr"/>
			<c path="String"/>
			<t path="Null"><e path="hscript.CType"/></t>
			<e path="hscript.Expr"/>
		</ETry>
		<EObject a="fl"><c path="Array"><a>
	<name><c path="String"/></name>
	<e><e path="hscript.Expr"/></e>
</a></c></EObject>
		<ETernary a="cond:e1:e2">
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</ETernary>
		<ESwitch a="e:cases:?defaultExpr">
			<e path="hscript.Expr"/>
			<c path="Array"><a>
	<values><c path="Array"><e path="hscript.Expr"/></c></values>
	<expr><e path="hscript.Expr"/></expr>
</a></c>
			<e path="hscript.Expr"/>
		</ESwitch>
	</enum>
	<typedef path="hscript.Argument" params="" file="C:\HaxeToolkit\haxe\lib/hscript/2,0,4/hscript/Expr.hx" module="hscript.Expr"><a>
	<t>
		<e path="hscript.CType"/>
		<meta><m n=":optional"/></meta>
	</t>
	<opt>
		<x path="Bool"/>
		<meta><m n=":optional"/></meta>
	</opt>
	<name><c path="String"/></name>
</a></typedef>
	<enum path="hscript.CType" params="" file="C:\HaxeToolkit\haxe\lib/hscript/2,0,4/hscript/Expr.hx" module="hscript.Expr">
		<CTPath a="path:?params">
			<c path="Array"><c path="String"/></c>
			<c path="Array"><e path="hscript.CType"/></c>
		</CTPath>
		<CTFun a="args:ret">
			<c path="Array"><e path="hscript.CType"/></c>
			<e path="hscript.CType"/>
		</CTFun>
		<CTAnon a="fields"><c path="Array"><a>
	<t><e path="hscript.CType"/></t>
	<name><c path="String"/></name>
</a></c></CTAnon>
		<CTParent a="t"><e path="hscript.CType"/></CTParent>
	</enum>
	<enum path="hscript.Error" params="" file="C:\HaxeToolkit\haxe\lib/hscript/2,0,4/hscript/Expr.hx" module="hscript.Expr">
		<EInvalidChar a="c"><x path="Int"/></EInvalidChar>
		<EUnexpected a="s"><c path="String"/></EUnexpected>
		<EUnterminatedString/>
		<EUnterminatedComment/>
		<EUnknownVariable a="v"><c path="String"/></EUnknownVariable>
		<EInvalidIterator a="v"><c path="String"/></EInvalidIterator>
		<EInvalidOp a="op"><c path="String"/></EInvalidOp>
		<EInvalidAccess a="f"><c path="String"/></EInvalidAccess>
	</enum>
	<enum path="hscript.Token" params="" file="C:\HaxeToolkit\haxe\lib/hscript/2,0,4/hscript/Parser.hx" module="hscript.Parser">
		<TEof/>
		<TConst a="c"><e path="hscript.Const"/></TConst>
		<TId a="s"><c path="String"/></TId>
		<TOp a="s"><c path="String"/></TOp>
		<TPOpen/>
		<TPClose/>
		<TBrOpen/>
		<TBrClose/>
		<TDot/>
		<TComma/>
		<TSemicolon/>
		<TBkOpen/>
		<TBkClose/>
		<TQuestion/>
		<TDoubleDot/>
	</enum>
	<class path="hscript.Parser" params="" file="C:\HaxeToolkit\haxe\lib/hscript/2,0,4/hscript/Parser.hx">
		<p1 get="inline" set="null" line="87" static="1"><x path="Int"/></p1>
		<readPos get="inline" set="null" line="88" static="1"><x path="Int"/></readPos>
		<tokenMin get="inline" set="null" line="89" static="1"><x path="Int"/></tokenMin>
		<tokenMax get="inline" set="null" line="90" static="1"><x path="Int"/></tokenMax>
		<line public="1"><x path="Int"/></line>
		<opChars public="1"><c path="String"/></opChars>
		<identChars public="1"><c path="String"/></identChars>
		<opPriority public="1"><x path="Map">
	<c path="String"/>
	<x path="Int"/>
</x></opPriority>
		<opRightAssoc public="1"><x path="Map">
	<c path="String"/>
	<x path="Bool"/>
</x></opRightAssoc>
		<unops public="1"><x path="Map">
	<c path="String"/>
	<x path="Bool"/>
</x></unops>
		<allowJSON public="1">
			<x path="Bool"/>
			<haxe_doc>activate JSON compatiblity</haxe_doc>
		</allowJSON>
		<allowTypes public="1">
			<x path="Bool"/>
			<haxe_doc>allow types declarations</haxe_doc>
		</allowTypes>
		<input><c path="haxe.io.Input"/></input>
		<char><x path="Int"/></char>
		<ops><c path="Array"><x path="Bool"/></c></ops>
		<idents><c path="Array"><x path="Bool"/></c></idents>
		<uid><x path="Int"/></uid>
		<tokens><c path="haxe.ds.GenericStack"><e path="hscript.Token"/></c></tokens>
		<error public="1" get="inline" set="null" line="134"><f a="err:pmin:pmax">
	<e path="hscript.Error"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></error>
		<invalidChar public="1" set="method" line="142"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidChar>
		<parseString public="1" set="method" line="146"><f a="s">
	<c path="String"/>
	<e path="hscript.Expr"/>
</f></parseString>
		<parse public="1" set="method" line="152"><f a="s">
	<c path="haxe.io.Input"/>
	<e path="hscript.Expr"/>
</f></parse>
		<unexpected set="method" line="181"><f a="tk">
	<e path="hscript.Token"/>
	<d/>
</f></unexpected>
		<push get="inline" set="null" line="186"><f a="tk">
	<e path="hscript.Token"/>
	<x path="Void"/>
</f></push>
		<ensure get="inline" set="null" line="196"><f a="tk">
	<t path="Null"><e path="hscript.Token"/></t>
	<x path="Void"/>
</f></ensure>
		<expr get="inline" set="null" line="201"><f a="e">
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
</f></expr>
		<pmin get="inline" set="null" line="209"><f a="e">
	<e path="hscript.Expr"/>
	<x path="Int"/>
</f></pmin>
		<pmax get="inline" set="null" line="217"><f a="e">
	<e path="hscript.Expr"/>
	<x path="Int"/>
</f></pmax>
		<mk get="inline" set="null" line="225"><f a="e:?pmin:?pmax" v=":null:null">
	<e path="hscript.Expr"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="hscript.Expr"/>
</f></mk>
		<isBlock set="method" line="235"><f a="e">
	<e path="hscript.Expr"/>
	<x path="Bool"/>
</f></isBlock>
		<parseFullExpr set="method" line="250"><f a=""><e path="hscript.Expr"/></f></parseFullExpr>
		<parseObject set="method" line="262"><f a="p1">
	<x path="Int"/>
	<e path="hscript.Expr"/>
</f></parseObject>
		<parseExpr set="method" line="296"><f a=""><e path="hscript.Expr"/></f></parseExpr>
		<mapCompr set="method" line="388"><f a="tmp:e">
	<c path="String"/>
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
</f></mapCompr>
		<makeUnop set="method" line="406"><f a="op:e">
	<c path="String"/>
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
</f></makeUnop>
		<makeBinop set="method" line="414"><f a="op:e1:e">
	<c path="String"/>
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
</f></makeBinop>
		<parseStructure set="method" line="431"><f a="id">
	<c path="String"/>
	<e path="hscript.Expr"/>
</f></parseStructure>
		<parseExprNext set="method" line="671"><f a="e1">
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
</f></parseExprNext>
		<parseType set="method" line="708"><f a=""><e path="hscript.CType"/></f></parseType>
		<parseTypeNext set="method" line="774"><f a="t">
	<e path="hscript.CType"/>
	<e path="hscript.CType"/>
</f></parseTypeNext>
		<parseExprList set="method" line="796"><f a="etk">
	<t path="Null"><e path="hscript.Token"/></t>
	<c path="Array"><e path="hscript.Expr"/></c>
</f></parseExprList>
		<incPos get="inline" set="null" line="815"><f a=""><x path="Void"/></f></incPos>
		<readChar set="method" line="821"><f a=""><x path="Int"/></f></readChar>
		<readString set="method" line="826"><f a="until">
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<token set="method" line="904"><f a=""><t path="Null"><e path="hscript.Token"/></t></f></token>
		<tokenComment set="method" line="1080"><f a="op:char">
	<c path="String"/>
	<x path="Int"/>
	<t path="Null"><e path="hscript.Token"/></t>
</f></tokenComment>
		<constString set="method" line="1118"><f a="c">
	<e path="hscript.Const"/>
	<c path="String"/>
</f></constString>
		<tokenString set="method" line="1129"><f a="t">
	<e path="hscript.Token"/>
	<c path="String"/>
</f></tokenString>
		<new public="1" set="method" line="100"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="mcore.exception.Exception" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/mcore/exception/Exception.hx">
		<getStackTrace public="1" set="method" line="104" static="1">
			<f a="source">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a formatted list of the current exception stack

	@param source		an originating cause (such as a native flash error)
	@return formatting string of stack items</haxe_doc>
		</getStackTrace>
		<name public="1" get="accessor" set="null"><c path="String"/></name>
		<get_name set="method" line="54"><f a=""><c path="String"/></f></get_name>
		<message public="1" get="accessor" set="null"><c path="String"/></message>
		<get_message set="method" line="57"><f a=""><c path="String"/></f></get_message>
		<cause public="1" set="null"><d/></cause>
		<info public="1" set="null"><t path="haxe.PosInfos"/></info>
		<toString public="1" set="method" line="84">
			<f a=""><c path="String"/></f>
			<haxe_doc><![CDATA[Returns a string representation of this exception.
	
	Format: 
	<pre>
	<type>: <message> at <className>#<methodName> (<lineNumber>) Caused by: <cause>
	</pre>
   
	@return string representation of exception adhering to format above]]></haxe_doc>
		</toString>
		<new public="1" set="method" line="66">
			<f a="?message:?cause:?info" v="'':null:null">
				<c path="String"/>
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@param message  an optional message helping to describe the exception
	@param cause    the exception which caused this one, if any. May be a native platform exception.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[The base class for other exceptions.

When an error is detected, or a platform specific exception is caught, an instance
of Exception can be raised better describing the issue. This allows consistent
and targeted capturing of exceptions further down the call stack.

<pre>
try
{
	throw new Exception("something bad happened");
}
catch(e:Exception)
{
	trace(e.toString());
	//outputs "Exception: something bad happened at foo.Bar#doSomething(123)"
}
</pre>]]></haxe_doc>
	</class>
	<class path="mcore.exception.ArgumentException" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/mcore/exception/ArgumentException.hx">
		<extends path="mcore.exception.Exception"/>
		<new public="1" set="method" line="34"><f a="?message:?cause:?info" v="'':null:null">
	<c path="String"/>
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>To be raised anywhere in which an argument provided is not what was expected.

@see mcore.exception.Exception</haxe_doc>
	</class>
	<class path="mcore.util.Arrays" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/mcore/util/Arrays.hx">
		<toString public="1" params="T" get="inline" set="null" line="36" static="1">
			<f a="source">
				<c path="Array"><c path="toString.T"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Normalises toString() output between platforms
	For example: ["a", "b", "c"] becomes "a,b,c"
	Note: in neko and cpp array.toString includes the '[]' and has space between each value.
	Where as in js/flash it doesnt.

	@param source 	The source array to convert to string;
	@return string in format "a,b,c"</haxe_doc>
		</toString>
		<shuffle public="1" params="T" set="method" line="48" static="1">
			<f a="source">
				<c path="Array"><c path="shuffle.T"/></c>
				<c path="Array"><c path="shuffle.T"/></c>
			</f>
			<haxe_doc>Returns a copy of the source array, with its elements randomly reordered</haxe_doc>
		</shuffle>
		<lastItem public="1" params="T" get="inline" set="null" line="60" static="1">
			<f a="source">
				<c path="Array"><c path="lastItem.T"/></c>
				<c path="lastItem.T"/>
			</f>
			<haxe_doc>Convenience method to get the last item in an array.</haxe_doc>
		</lastItem>
	</class>
	<class path="mcore.util.Reflection" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/mcore/util/Reflection.hx">
		<setProperty public="1" set="method" line="50" static="1">
			<f a="object:property:value">
				<d/>
				<c path="String"/>
				<d/>
				<d/>
			</f>
			<haxe_doc>Sets the value of a property, calling it's setter if present and of 
	the format set_property (haxe 208 only).

	For Haxe 209 or greater use Reflect.setProperty
	
	@param object		the object to set the property on
	@param property 	the property to set
	@param value 		the new value of the property
	@return the new value of the property</haxe_doc>
		</setProperty>
		<hasProperty public="1" set="method" line="63" static="1">
			<f a="object:property">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>A convenience method for checking if a class instance has a property.
	@param object 		the class instance to check
	@param property 	the property to check for
	@return true if the instance implements the property, false if not.</haxe_doc>
		</hasProperty>
		<getFields public="1" set="method" line="76" static="1">
			<f a="object">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the instance fields of an object if it is a class instance, 
	or else it's reflected fields.
	
	@param object 		the object to reflect
	@return instance or reflected fields</haxe_doc>
		</getFields>
		<here public="1" set="method" line="87" static="1">
			<f a="?info" v="null">
				<t path="haxe.PosInfos"/>
				<t path="haxe.PosInfos"/>
			</f>
			<haxe_doc>Returns information about the location this method is called.</haxe_doc>
		</here>
		<callMethod public="1" set="method" line="101" static="1">
			<f a="o:func:?args" v="::null">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<unknown/>
			</f>
			<haxe_doc>Wraps Reflect.callMethod to support optional arguments in neko
	
	@param o 	the given object to reflect on
	@param func reference to the function to call on (i.e. Reflect.field(o, "func");)
	@param args 	optional array of arguments
	@throws ArgumentException is Reflect.callMethod fails</haxe_doc>
		</callMethod>
		<haxe_doc>Utility methods for working with reflection.</haxe_doc>
	</class>
	<class path="mcore.util.Types" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/mcore/util/Types.hx">
		<isSubClassOf public="1" set="method" line="41" static="1">
			<f a="object:type">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if an object is an instance of, or instance of a subclass of 
	a given type.
	
	@param object 	the instance to check
	@param type 	the type to compare against
	@return true if object is instance of type or subclass else false</haxe_doc>
		</isSubClassOf>
		<createInstance public="1" params="T" set="method" line="54" static="1">
			<f a="forClass:?args" v=":null">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Wraps Type.createInstance to support optional constructor arguments in neko
	
	@param forClass 	the class type to instanciate
	@param args 	optional array of arguments
	@return instance of type
	@throws ArgumentException is Type.createInstance fails</haxe_doc>
		</createInstance>
		<haxe_doc>Utility methods for working with types.</haxe_doc>
	</class>
	<class path="mdata.Dictionary" params="K:V" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/mdata/Dictionary.hx">
		<_keys><c path="Array"><c path="mdata.Dictionary.K"/></c></_keys>
		<_values><c path="Array"><c path="mdata.Dictionary.V"/></c></_values>
		<weakKeys public="1" set="null"><x path="Bool"/></weakKeys>
		<set public="1" set="method" line="62">
			<f a="key:value">
				<c path="mdata.Dictionary.K"/>
				<c path="mdata.Dictionary.V"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets a key value pair. Updates value if key already exists, otherwise adds 
	to registry
	
	@param key The key to set.
	@param value The value to set.</haxe_doc>
		</set>
		<get public="1" set="method" line="92">
			<f a="key">
				<c path="mdata.Dictionary.K"/>
				<c path="mdata.Dictionary.V"/>
			</f>
			<haxe_doc>Returns value for key or null if not registered.
	
	Note that a return value of null does not necessarily mean that the key does not exist as a
	value of null can be registered against a key. The safe option is to check 
	using dictionary.exists(key).
	
	@param key The key to return
	@return The value for key, or null if not found.</haxe_doc>
		</get>
		<remove public="1" set="method" line="114">
			<f a="key">
				<c path="mdata.Dictionary.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes a key/value from the Dictionary.
	
	@param key The key to delete.
	@return True if the remove was successful, false if the key was not found.</haxe_doc>
		</remove>
		<delete public="1" set="method" line="141">
			<f a="key">
				<c path="mdata.Dictionary.K"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Removes a key/value from the Dictionary.
	
	@deprecated Use remove(key) instead.
	
	@param key The key to delete.</haxe_doc>
		</delete>
		<exists public="1" set="method" line="152">
			<f a="key">
				<c path="mdata.Dictionary.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if key is registered.
	
	@param key The key to check for.
	@return A boolean indicating the presence of the key.</haxe_doc>
		</exists>
		<clear public="1" set="method" line="171">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear all keys and values from the Dictionary.</haxe_doc>
		</clear>
		<keys public="1" set="method" line="186">
			<f a=""><t path="Iterator"><c path="mdata.Dictionary.K"/></t></f>
			<haxe_doc>Returns array of registered keys.
	
	@return An array of keys.</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="200">
			<f a=""><t path="Iterator"><c path="mdata.Dictionary.V"/></t></f>
			<haxe_doc>Returns iterator of registered values.
	
	@return An iterator over the values.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="215">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the string representation of the keys and values in this Dictionary.</haxe_doc>
		</toString>
		<new public="1" set="method" line="49">
			<f a="?weakKeys" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@param weakKeys non functional in JavaScript. Included to maintain 
	consistency with flash dictionary API.</haxe_doc>
		</new>
		<haxe_doc>Cross platform dictionary class (object to object map) leveraging the native 
dictionary class for flash9 targets.

This supports both objects and primitives as keys, unlike haxe.ds.ObjectMap
which does not support primitive keys on some platforms.</haxe_doc>
	</class>
	<class path="minject.InjectionConfig" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/InjectionConfig.hx">
		<request public="1"><x path="Class"><d/></x></request>
		<injectionName public="1"><c path="String"/></injectionName>
		<injector><c path="minject.Injector"/></injector>
		<result><c path="minject.result.InjectionResult"/></result>
		<getResponse public="1" set="method" line="41"><f a="injector">
	<c path="minject.Injector"/>
	<d/>
</f></getResponse>
		<hasResponse public="1" set="method" line="60"><f a="injector">
	<c path="minject.Injector"/>
	<x path="Bool"/>
</f></hasResponse>
		<hasOwnResponse public="1" set="method" line="65"><f a=""><x path="Bool"/></f></hasOwnResponse>
		<setResult public="1" set="method" line="70"><f a="result">
	<c path="minject.result.InjectionResult"/>
	<x path="Void"/>
</f></setResult>
		<setInjector public="1" set="method" line="84"><f a="injector">
	<c path="minject.Injector"/>
	<x path="Void"/>
</f></setInjector>
		<toString public="1" set="method" line="89"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="35"><f a="request:injectionName">
	<x path="Class"><d/></x>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="minject.Injector" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/Injector.hx">
		<attendedToInjectees public="1" set="null">
			<c path="minject._Injector.InjecteeSet"/>
			<haxe_doc>A set of instances that have already had their dependencies satisfied by the injector.</haxe_doc>
		</attendedToInjectees>
		<parentInjector public="1" set="accessor">
			<c path="minject.Injector"/>
			<haxe_doc>The parent of this injector.</haxe_doc>
		</parentInjector>
		<injectionConfigs><c path="haxe.ds.StringMap"><c path="minject.InjectionConfig"/></c></injectionConfigs>
		<injecteeDescriptions><c path="minject.ClassHash"><c path="minject.InjecteeDescription"/></c></injecteeDescriptions>
		<mapValue public="1" set="method" line="83">
			<f a="whenAskedFor:useValue:?named" v="::''">
				<x path="Class"><d/></x>
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>When asked for an instance of the class `whenAskedFor` inject the instance `useValue`.
		
		This is used to register an existing instance with the injector and treat it like a 
		Singleton.
		
		@param whenAskedFor A class or interface
		@param useValue An instance
		@param named An optional name (id)
		
		@returns A reference to the rule for this injection. To be used with `mapRule`</haxe_doc>
		</mapValue>
		<mapClass public="1" set="method" line="102">
			<f a="whenAskedFor:instantiateClass:?named" v="::''">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>When asked for an instance of the class `whenAskedFor` inject a new instance of 
		`instantiateClass`.
		
		This will create a new instance for each injection.
		
		@param whenAskedFor A class or interface
		@param instantiateClass A class to instantiate
		@param named An optional name (id)

		@returns A reference to the rule for this injection. To be used with `mapRule`</haxe_doc>
		</mapClass>
		<mapSingleton public="1" set="method" line="120">
			<f a="whenAskedFor:?named" v=":''">
				<x path="Class"><d/></x>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>When asked for an instance of the class `whenAskedFor` inject an instance of `whenAskedFor`.
		
		This will create an instance on the first injection, but will re-use that instance for 
		subsequent injections.
		
		@param whenAskedFor A class or interface
		@param named An optional name (id)
		
		@returns A reference to the rule for this injection. To be used with `mapRule`</haxe_doc>
		</mapSingleton>
		<mapSingletonOf public="1" set="method" line="138">
			<f a="whenAskedFor:useSingletonOf:?named" v="::''">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>When asked for an instance of the class `whenAskedFor`
		inject an instance of `useSingletonOf`.
		
		This will create an instance on the first injection, but will re-use that instance for 
		subsequent injections.
		
		@param whenAskedFor A class or interface
		@param useSingletonOf A class to instantiate
		@param named An optional name (id)
		
		@returns A reference to the rule for this injection. To be used with `mapRule`</haxe_doc>
		</mapSingletonOf>
		<mapRule public="1" set="method" line="158">
			<f a="whenAskedFor:useRule:?named" v="::''">
				<x path="Class"><d/></x>
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>When asked for an instance of the class `whenAskedFor`
		use rule `useRule` to determine the correct injection.
		
		This will use whatever injection is set by the given injection rule as created using one 
		of the other mapping methods.
		
		@param whenAskedFor A class or interface
		@param useRule The rule to use for the injection
		@param named An optional name (id)
		
		@returns A reference to the rule for this injection. To be used with `mapRule`</haxe_doc>
		</mapRule>
		<getMapping public="1" set="method" line="165"><f a="forClass:?named" v=":''">
	<x path="Class"><d/></x>
	<c path="String"/>
	<d/>
</f></getMapping>
		<injectInto public="1" set="method" line="186">
			<f a="target">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Perform an injection into an object, satisfying all it's dependencies
		
		The `Injector` should throw an `Error` if it can't satisfy all dependencies of the injectee.
		
		@param target The object to inject into - the Injectee</haxe_doc>
		</injectInto>
		<construct public="1" params="T" set="method" line="224">
			<f a="theClass">
				<x path="Class"><c path="construct.T"/></x>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Constructs an instance of theClass without satifying its dependencies.</haxe_doc>
		</construct>
		<instantiate public="1" params="T" set="method" line="256">
			<f a="theClass">
				<x path="Class"><c path="instantiate.T"/></x>
				<c path="instantiate.T"/>
			</f>
			<haxe_doc>Create an object of the given class, supplying its dependencies as constructor parameters 
		if the used DI solution has support for constructor injection
		
		Adapters for DI solutions that don't support constructor injection should just create a new 
		instance and perform setter and/or method injection on that.
		
		NOTE: This method will always create a new instance. If you need to retrieve an instance 
		consider using `getInstance`
		
		The `Injector` should throw an `Error` if it can't satisfy all dependencies of the injectee.
		
		@param theClass The class to instantiate
		@returns The created instance</haxe_doc>
		</instantiate>
		<unmap public="1" set="method" line="269">
			<f a="theClass:?named" v=":''">
				<x path="Class"><d/></x>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove a rule from the injector

		@param theClass A class or interface
		@param named An optional name (id)</haxe_doc>
		</unmap>
		<hasMapping public="1" set="method" line="288">
			<f a="forClass:?named" v=":''">
				<x path="Class"><d/></x>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Does a rule exist to satsify such a request?

		@param forClass A class or interface
		@param named An optional name (id)
		@returns Whether such a mapping exists</haxe_doc>
		</hasMapping>
		<getInstance public="1" params="T" set="method" line="307">
			<f a="ofClass:?named" v=":''">
				<x path="Class"><c path="getInstance.T"/></x>
				<c path="String"/>
				<c path="getInstance.T"/>
			</f>
			<haxe_doc>Create or retrieve an instance of the given class
		
		@param ofClass The class to retrieve.
		@param named An optional name (id)
		@return An instance</haxe_doc>
		</getInstance>
		<createChildInjector public="1" set="method" line="324">
			<f a=""><c path="minject.Injector"/></f>
			<haxe_doc>Create an injector that inherits rules from its parent
		
		@returns The injector</haxe_doc>
		</createChildInjector>
		<getAncestorMapping public="1" set="method" line="335">
			<f a="forClass:?named" v=":null">
				<x path="Class"><d/></x>
				<c path="String"/>
				<c path="minject.InjectionConfig"/>
			</f>
			<haxe_doc>Searches for an injection mapping in the ancestry of the injector. This method is called 
		when a dependency cannot be satisfied by this injector.</haxe_doc>
		</getAncestorMapping>
		<getInjectionPoints set="method" line="354"><f a="forClass">
	<x path="Class"><d/></x>
	<c path="minject.InjecteeDescription"/>
</f></getInjectionPoints>
		<getConfigurationForRequest set="method" line="425"><f a="forClass:named:?traverseAncestors" v="::true">
	<x path="Class"><d/></x>
	<c path="String"/>
	<x path="Bool"/>
	<c path="minject.InjectionConfig"/>
</f></getConfigurationForRequest>
		<set_parentInjector set="method" line="442"><f a="value">
	<c path="minject.Injector"/>
	<c path="minject.Injector"/>
</f></set_parentInjector>
		<getClassName set="method" line="461"><f a="forClass">
	<x path="Class"><d/></x>
	<c path="String"/>
</f></getClassName>
		<getFields set="method" line="467"><f a="type">
	<x path="Class"><d/></x>
	<a/>
</f></getFields>
		<new public="1" set="method" line="64"><f a=""><x path="Void"/></f></new>
		<haxe_doc>The dependency injector.</haxe_doc>
		<meta><m n=":build"><e>'???'</e></m></meta>
	</class>
	<class path="minject._Injector.InjecteeSet" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/Injector.hx" private="1" module="minject.Injector">
		<add public="1" set="method" line="508"><f a="value">
	<d/>
	<x path="Void"/>
</f></add>
		<contains public="1" set="method" line="517"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<delete public="1" set="method" line="526"><f a="value">
	<d/>
	<x path="Void"/>
</f></delete>
		<iterator public="1" set="method" line="540">
			<f a=""><t path="Iterator"><unknown/></t></f>
			<haxe_doc>Under dynamic targets that don't support weak refs (js, avm1, neko) this will always 
		return an empty iterator due to values not being stored in this set. This is to avoid 
		memory leaks.</haxe_doc>
		</iterator>
		<new public="1" set="method" line="501"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Contains the set of objects which have been injected into.
	 
	Under dynamic languages that don't support weak references this set a 
	hidden property on an injectee when added, to mark it as injected. This is 
	to avoid storing a direct reference of it here, causing it never to be 
	available for GC.</haxe_doc>
	</class>
	<class path="minject.ClassHash" params="T" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/Injector.hx" module="minject.Injector">
		<hash><c path="haxe.ds.StringMap"><c path="minject.ClassHash.T"/></c></hash>
		<set public="1" set="method" line="559"><f a="key:value">
	<x path="Class"><d/></x>
	<c path="minject.ClassHash.T"/>
	<x path="Void"/>
</f></set>
		<get public="1" set="method" line="564"><f a="key">
	<x path="Class"><d/></x>
	<c path="minject.ClassHash.T"/>
</f></get>
		<exists public="1" set="method" line="569"><f a="key">
	<x path="Class"><d/></x>
	<x path="Bool"/>
</f></exists>
		<new public="1" set="method" line="554"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="minject.InjecteeDescription" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/Injector.hx" module="minject.Injector">
		<ctor public="1"><c path="minject.point.InjectionPoint"/></ctor>
		<injectionPoints public="1"><c path="Array"><c path="minject.point.InjectionPoint"/></c></injectionPoints>
		<new public="1" set="method" line="580"><f a="ctor:injectionPoints">
	<c path="minject.point.InjectionPoint"/>
	<c path="Array"><c path="minject.point.InjectionPoint"/></c>
	<x path="Void"/>
</f></new>
	</class>
	<class path="minject.point.InjectionPoint" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/point/InjectionPoint.hx">
		<applyInjection public="1" set="method" line="36">
			<f a="target:injector">
				<d/>
				<c path="minject.Injector"/>
				<d/>
			</f>
			<meta><m n=":IgnoreCover"/></meta>
		</applyInjection>
		<initializeInjection set="method" line="42">
			<f a="meta">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":IgnoreCover"/></meta>
		</initializeInjection>
		<new public="1" set="method" line="30"><f a="meta:injector">
	<d/>
	<c path="minject.Injector"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="minject.point.MethodInjectionPoint" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/point/MethodInjectionPoint.hx">
		<extends path="minject.point.InjectionPoint"/>
		<methodName><c path="String"/></methodName>
		<_parameterInjectionConfigs><c path="Array"><d/></c></_parameterInjectionConfigs>
		<requiredParameters><x path="Int"/></requiredParameters>
		<applyInjection public="1" set="method" line="42" override="1"><f a="target:injector">
	<d/>
	<c path="minject.Injector"/>
	<d/>
</f></applyInjection>
		<initializeInjection set="method" line="50" override="1"><f a="meta">
	<d/>
	<x path="Void"/>
</f></initializeInjection>
		<gatherParameters set="method" line="56"><f a="meta">
	<d/>
	<x path="Void"/>
</f></gatherParameters>
		<gatherParameterValues set="method" line="95"><f a="target:injector">
	<d/>
	<c path="minject.Injector"/>
	<c path="Array"><d/></c>
</f></gatherParameterValues>
		<new public="1" set="method" line="36"><f a="meta:?injector" v=":null">
	<d/>
	<c path="minject.Injector"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="minject.point.ConstructorInjectionPoint" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/point/ConstructorInjectionPoint.hx">
		<extends path="minject.point.MethodInjectionPoint"/>
		<applyInjection public="1" set="method" line="34" override="1"><f a="target:injector">
	<d/>
	<c path="minject.Injector"/>
	<d/>
</f></applyInjection>
		<initializeInjection set="method" line="41" override="1"><f a="meta">
	<d/>
	<x path="Void"/>
</f></initializeInjection>
		<new public="1" set="method" line="29"><f a="meta:forClass:?injector" v="::null">
	<d/>
	<x path="Class"><d/></x>
	<c path="minject.Injector"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="minject.point.ParameterInjectionConfig" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/point/MethodInjectionPoint.hx" module="minject.point.MethodInjectionPoint">
		<typeName public="1"><c path="String"/></typeName>
		<injectionName public="1"><c path="String"/></injectionName>
		<new public="1" set="method" line="129"><f a="typeName:injectionName">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="minject.point.NoParamsConstructorInjectionPoint" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/point/NoParamsConstructorInjectionPoint.hx">
		<extends path="minject.point.InjectionPoint"/>
		<applyInjection public="1" set="method" line="35" override="1"><f a="target:injector">
	<d/>
	<c path="minject.Injector"/>
	<d/>
</f></applyInjection>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="minject.point.PostConstructInjectionPoint" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/point/PostConstructInjectionPoint.hx">
		<extends path="minject.point.InjectionPoint"/>
		<order public="1" set="null"><x path="Int"/></order>
		<methodName><c path="String"/></methodName>
		<applyInjection public="1" set="method" line="41" override="1"><f a="target:injector">
	<d/>
	<c path="minject.Injector"/>
	<d/>
</f></applyInjection>
		<initializeInjection set="method" line="47" override="1"><f a="meta">
	<d/>
	<x path="Void"/>
</f></initializeInjection>
		<new public="1" set="method" line="35"><f a="meta:?injector" v=":null">
	<d/>
	<c path="minject.Injector"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="minject.point.PropertyInjectionPoint" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/point/PropertyInjectionPoint.hx">
		<extends path="minject.point.InjectionPoint"/>
		<propertyName><c path="String"/></propertyName>
		<propertyType><c path="String"/></propertyType>
		<injectionName><c path="String"/></injectionName>
		<applyInjection public="1" set="method" line="41" override="1"><f a="target:injector">
	<d/>
	<c path="minject.Injector"/>
	<d/>
</f></applyInjection>
		<initializeInjection set="method" line="59" override="1"><f a="meta">
	<d/>
	<x path="Void"/>
</f></initializeInjection>
		<new public="1" set="method" line="36"><f a="meta:?injector" v=":null">
	<d/>
	<c path="minject.Injector"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="minject.result.InjectionResult" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/result/InjectionResult.hx">
		<getResponse public="1" set="method" line="34">
			<f a="injector">
				<c path="minject.Injector"/>
				<d/>
			</f>
			<meta><m n=":IgnoreCover"/></meta>
		</getResponse>
		<toString public="1" set="method" line="39"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="minject.result.InjectClassResult" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/result/InjectClassResult.hx">
		<extends path="minject.result.InjectionResult"/>
		<responseType><x path="Class"><d/></x></responseType>
		<getResponse public="1" set="method" line="37" override="1"><f a="injector">
	<c path="minject.Injector"/>
	<d/>
</f></getResponse>
		<toString public="1" set="method" line="42" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="31"><f a="responseType">
	<x path="Class"><d/></x>
	<x path="Void"/>
</f></new>
	</class>
	<class path="minject.result.InjectOtherRuleResult" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/result/InjectOtherRuleResult.hx">
		<extends path="minject.result.InjectionResult"/>
		<rule><c path="minject.InjectionConfig"/></rule>
		<getResponse public="1" set="method" line="38" override="1"><f a="injector">
	<c path="minject.Injector"/>
	<d/>
</f></getResponse>
		<toString public="1" set="method" line="43" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a="rule">
	<c path="minject.InjectionConfig"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="minject.result.InjectSingletonResult" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/result/InjectSingletonResult.hx">
		<extends path="minject.result.InjectionResult"/>
		<responseType><x path="Class"><d/></x></responseType>
		<response><d/></response>
		<getResponse public="1" set="method" line="38" override="1"><f a="injector">
	<c path="minject.Injector"/>
	<d/>
</f></getResponse>
		<createResponse set="method" line="49"><f a="injector">
	<c path="minject.Injector"/>
	<d/>
</f></createResponse>
		<toString public="1" set="method" line="54" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="32"><f a="responseType">
	<x path="Class"><d/></x>
	<x path="Void"/>
</f></new>
	</class>
	<class path="minject.result.InjectValueResult" params="" file="C:\HaxeToolkit\haxe\lib/minject/1,3,0/minject/result/InjectValueResult.hx">
		<extends path="minject.result.InjectionResult"/>
		<value><d/></value>
		<getResponse public="1" set="method" line="37" override="1"><f a="injector">
	<c path="minject.Injector"/>
	<d/>
</f></getResponse>
		<toString public="1" set="method" line="42" override="1"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="31"><f a="value">
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="neko.NativeArray" params="T" file="C:\HaxeToolkit\haxe\std/neko/NativeArray.hx"><meta><m n=":keep"/></meta></class>
	<class path="neko.NativeString" params="" file="C:\HaxeToolkit\haxe\std/neko/NativeString.hx"><meta><m n=":keep"/></meta></class>
	<class path="neko.Web" params="" file="C:\HaxeToolkit\haxe\std/neko/Web.hx">
		<getParams public="1" set="method" line="33" static="1">
			<f a=""><c path="haxe.ds.StringMap"><c path="String"/></c></f>
			<haxe_doc>Returns the GET and POST parameters.</haxe_doc>
		</getParams>
		<getHostName public="1" set="method" line="77" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the local server host name</haxe_doc>
		</getHostName>
		<getClientIP public="1" set="method" line="84" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Surprisingly returns the client IP address.</haxe_doc>
		</getClientIP>
		<getURI public="1" set="method" line="91" static="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the original request URL (before any server internal redirections)</haxe_doc>
		</getURI>
		<redirect public="1" set="method" line="98" static="1">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Tell the client to redirect to the given url ("Location" header)</haxe_doc>
		</redirect>
		<setHeader public="1" set="method" line="106" static="1">
			<f a="h:v">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set an output header value. If some data have been printed, the headers have
		already been sent so this will raise an exception.</haxe_doc>
		</setHeader>
		<setReturnCode public="1" set="method" line="113" static="1">
			<f a="r">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the HTTP return code. Same remark as setHeader.</haxe_doc>
		</setReturnCode>
		<setCookie public="1" set="method" line="183" static="1">
			<f a="key:value:?expire:?domain:?path:?secure:?httpOnly" v="::null:null:null:null:null">
				<c path="String"/>
				<c path="String"/>
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set a Cookie value in the HTTP headers. Same remark as setHeader.</haxe_doc>
		</setCookie>
		<addPair set="method" line="195" static="1"><f a="buf:name:value">
	<c path="StringBuf"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addPair>
		<cacheModule public="1" set="method" line="231" static="1">
			<f a="f">
				<f a=""><x path="Void"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the main entry point function used to handle requests.
		Setting it back to null will disable code caching.</haxe_doc>
		</cacheModule>
		<getMultipart public="1" set="method" line="239" static="1">
			<f a="maxSize">
				<x path="Int"/>
				<c path="haxe.ds.StringMap"><c path="String"/></c>
			</f>
			<haxe_doc>Get the multipart parameters as an hashtable. The data
		cannot exceed the maximum size specified.</haxe_doc>
		</getMultipart>
		<parseMultipart public="1" set="method" line="268" static="1">
			<f a="onPart:onData">
				<f a=":">
					<c path="String"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<f a="::">
					<c path="haxe.io.Bytes"/>
					<x path="Int"/>
					<x path="Int"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Parse the multipart data. Call [onPart] when a new part is found
		with the part name and the filename if present
		and [onData] when some part data is readed. You can this way
		directly save the data on hard drive in the case of a file upload.</haxe_doc>
		</parseMultipart>
		<logMessage public="1" set="method" line="293" static="1">
			<f a="msg">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write a message into the web server log file. This api requires Neko 1.7.1+</haxe_doc>
		</logMessage>
		<isModNeko public="1" set="null" static="1"><x path="Bool"/></isModNeko>
		<isTora public="1" set="null" static="1"><x path="Bool"/></isTora>
		<_set_main static="1"><d/></_set_main>
		<_get_host_name static="1"><d/></_get_host_name>
		<_get_client_ip static="1"><d/></_get_client_ip>
		<_get_uri static="1"><d/></_get_uri>
		<_cgi_redirect static="1"><d/></_cgi_redirect>
		<_cgi_set_header static="1"><d/></_cgi_set_header>
		<_set_return_code static="1"><d/></_set_return_code>
		<_get_client_header static="1"><d/></_get_client_header>
		<_get_params_string static="1"><d/></_get_params_string>
		<_get_post_data static="1"><d/></_get_post_data>
		<_get_params static="1"><d/></_get_params>
		<_get_cookies static="1"><d/></_get_cookies>
		<_set_cookie static="1"><d/></_set_cookie>
		<_get_cwd static="1"><d/></_get_cwd>
		<_parse_multipart static="1"><d/></_parse_multipart>
		<_flush static="1"><d/></_flush>
		<_get_client_headers static="1"><d/></_get_client_headers>
		<_get_http_method static="1"><d/></_get_http_method>
		<_log_message static="1"><d/></_log_message>
		<haxe_doc>This class is used for accessing the local Web server and the current
	client request and informations.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="ufront.web.context.HttpRequest" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/context/HttpRequest.hx">
		<create public="1" set="method" line="23" static="1">
			<f a=""><c path="ufront.web.context.HttpRequest"/></f>
			<haxe_doc>Create a `HttpRequest` using the platform specific implementation.

		Currently supports PHP and Neko only.</haxe_doc>
		</create>
		<params public="1" get="accessor" set="null">
			<x path="ufront.core.MultiValueMap"><c path="String"/></x>
			<meta><m n=":isVar"/></meta>
			<haxe_doc>A simple hash of all the parameters supplied in this request.

		The parameters are collected in the following order:

		- cookies
		- query-string parameters
		- post values

		with the latter taking precedence over the former.
		For example, if both a cookie and a post variable define a parameter `name`, calling `request.params["name"]` will show the POST value.
		In that example, if you would like to access all the various values of `name`, you can use `request.params.getAll("name")` or separately access `request.cookies` or `request.post`.</haxe_doc>
		</params>
		<get_params set="method" line="51"><f a=""><x path="ufront.core.MultiValueMap"><c path="String"/></x></f></get_params>
		<queryString public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The GET query parameters.

		Will return an empty String if there are no GET parameters.</haxe_doc>
		</queryString>
		<get_queryString set="method" line="64"><f a=""><c path="String"/></f></get_queryString>
		<postString public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The POST query parameters.

		Will return an empty String if there are no GET parameters.</haxe_doc>
		</postString>
		<get_postString set="method" line="72"><f a=""><c path="String"/></f></get_postString>
		<query public="1" get="accessor" set="null">
			<x path="ufront.core.MultiValueMap"><c path="String"/></x>
			<haxe_doc>The GET query parameters for this request.</haxe_doc>
		</query>
		<get_query set="method" line="78"><f a=""><x path="ufront.core.MultiValueMap"><c path="String"/></x></f></get_query>
		<post public="1" get="accessor" set="null">
			<x path="ufront.core.MultiValueMap"><c path="String"/></x>
			<haxe_doc>The POST parameters for this request.

		Please note that if the request is a multipart request, and `parseMultipart` has not been called, it will be called to fetch all the post data from the various parts.
		Because `parseMultipart` can only be called once, this will prevent you from being able to process any file uploads.
		If you need access to file uploads, please ensure `parseMultipart` is called before `post` is accessed.
		This can be achieved using upload middleware.

		If any files were uploaded, they will appear in the "post" values with their parameter name, and the value will contain the original filename of the upload.</haxe_doc>
		</post>
		<get_post set="method" line="91"><f a=""><x path="ufront.core.MultiValueMap"><c path="String"/></x></f></get_post>
		<files public="1" get="accessor" set="null">
			<x path="ufront.core.MultiValueMap"><c path="ufront.web.upload.FileUpload"/></x>
			<haxe_doc>File uploads that were part of a POST / multipart request.

		Please note this is not populated automatically, you must use some request middleware to process the multipart data and populate the `files` with appropriate FileUploads.</haxe_doc>
		</files>
		<get_files set="method" line="99"><f a=""><x path="ufront.core.MultiValueMap"><c path="ufront.web.upload.FileUpload"/></x></f></get_files>
		<cookies public="1" get="accessor" set="null">
			<x path="ufront.core.MultiValueMap"><c path="String"/></x>
			<haxe_doc>The Cookie parameters for this request.</haxe_doc>
		</cookies>
		<get_cookies set="method" line="110"><f a=""><x path="ufront.core.MultiValueMap"><c path="String"/></x></f></get_cookies>
		<hostName public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The host name of the current server</haxe_doc>
		</hostName>
		<get_hostName set="method" line="116"><f a=""><c path="String"/></f></get_hostName>
		<clientIP public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The Client's IP address</haxe_doc>
		</clientIP>
		<get_clientIP set="method" line="122"><f a=""><c path="String"/></f></get_clientIP>
		<uri public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The Uri requested in this HTTP request.

		This is the URI before any filters have been applied.</haxe_doc>
		</uri>
		<get_uri set="method" line="130"><f a=""><c path="String"/></f></get_uri>
		<clientHeaders public="1" get="accessor" set="null">
			<x path="ufront.core.MultiValueMap"><c path="String"/></x>
			<haxe_doc>The client headers supplied in the request.</haxe_doc>
		</clientHeaders>
		<get_clientHeaders set="method" line="136"><f a=""><x path="ufront.core.MultiValueMap"><c path="String"/></x></f></get_clientHeaders>
		<userAgent public="1" get="accessor" set="null">
			<c path="ufront.web.UserAgent"/>
			<haxe_doc>Information about the user agent that made the request.</haxe_doc>
		</userAgent>
		<get_userAgent set="method" line="142"><f a=""><c path="ufront.web.UserAgent"/></f></get_userAgent>
		<httpMethod public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The HTTP method used for the request.

		Usually "get" or "post", but can be other things.

		Case sensitivity depends on the environement.</haxe_doc>
		</httpMethod>
		<get_httpMethod set="method" line="156"><f a=""><c path="String"/></f></get_httpMethod>
		<scriptDirectory public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The path of the currently executing script.

		This is the path to your `index` file, not to the current class or controller.

		It will usually be an absolute path, but depending on the environment it may be relative.

		@todo confirm this always has a traling slash.  It appears to...</haxe_doc>
		</scriptDirectory>
		<get_scriptDirectory set="method" line="168"><f a=""><c path="String"/></f></get_scriptDirectory>
		<authorization public="1" get="accessor" set="null">
			<a>
				<user><c path="String"/></user>
				<pass><c path="String"/></pass>
			</a>
			<haxe_doc>Gives the username and password supplied by the "Authorization" client header.

		If no "Authorization" header was specified, it will return null.

		If "Authorization" header was specified, but it did not have exactly two parameters, it will throw an exception.

		To trigger the login box to open on the browser, use `context.response.requireAuthentication("Please login")`.</haxe_doc>
		</authorization>
		<get_authorization set="method" line="180"><f a=""><a>
	<user><c path="String"/></user>
	<pass><c path="String"/></pass>
</a></f></get_authorization>
		<isMultipart public="1" set="method" line="187">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Check if the current request is a multipart/form-data request.

		This is a shortcut for: `clientHeaders["Content-Type"].startsWith("multipart/form-data")`</haxe_doc>
		</isMultipart>
		<parseMultipart public="1" set="method" line="216">
			<f a="?onPart:?onData:?onEndPart" v="null:null:null">
				<t path="ufront.web.context.OnPartCallback"/>
				<t path="ufront.web.context.OnDataCallback"/>
				<t path="ufront.web.context.OnEndPartCallback"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc><![CDATA[Parse the multipart data of this request.

		> Please note, if you merely wish to access file uploads, it is probably better to use an existing `ufront.app.RequestMiddleware` that parses multipart data and gives access to the uploads through `request.files`.
		> Calling parseMultipart() manually is mostly intended for people developing new file-upload middleware.

		If a POST request contains multipart data, `parseMultipart` must be called in order to have access to both the POST parameters and to uploaded files.

		Accessing `httpRequest.post` on a multipart request will call `parseMultipart()` but not process any file uploads.
		Because of this, it is recommended that you use a `ufront.app.RequestMiddleware` very early in your request, before `request.post` is ever called, so that you can parse your file uploads, even if you do not handle them until later.

		In each platform's implementation of `parseMultipart()`, it should take care of parsing post variables to `request.post`, and then call the `onPart`, `onData` and `onEndPart` for each file upload.

		You should only call `parseMultipart()` a maximum of once per request, and an exception will be thrown if you attempt to call it more than once.

		If this method is called on a request which was not multipart encoded, the result is unspecified.

		@param onPart (optional) - called once at the start of each new file: `onPart( paramName:String, origFileName:String )`
		@param onData (optional) - called multiple times (in order) for each file: `onData( bytes:haxe.io.Bytes, pos:Int, length:Int )`
		@param onEndPart (optional) - called after all data for a part has been received.

		It is safe to assume that only one of the callbacks will be running at a time, and that they will run in order for each file.

		Even though the method signiatures here require returning a `tink.core.Future`, these will be ignored on some platforms, such as neko.  Check the documentation on the specific HttpRequest implementation for details.]]></haxe_doc>
		</parseMultipart>
		<haxe_doc>A description of the current HttpRequest.

	This base class is mostly abstract methods, each platform must implement the key details.</haxe_doc>
	</class>
	<class path="neko.ufront.web.context.HttpRequest" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/neko/ufront/web/context/HttpRequest.hx">
		<extends path="ufront.web.context.HttpRequest"/>
		<encodeName public="1" set="method" line="25" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></encodeName>
		<paramPattern line="302" static="1"><c path="EReg"/></paramPattern>
		<getHashFromString set="method" line="303" static="1"><f a="s">
	<c path="String"/>
	<x path="ufront.core.MultiValueMap"><c path="String"/></x>
</f></getHashFromString>
		<_get_params_string static="1"><d/></_get_params_string>
		<_get_post_data static="1"><d/></_get_post_data>
		<_get_cookies static="1"><d/></_get_cookies>
		<_get_host_name static="1"><d/></_get_host_name>
		<_get_client_ip static="1"><d/></_get_client_ip>
		<_get_uri static="1"><d/></_get_uri>
		<_get_client_headers static="1"><d/></_get_client_headers>
		<_get_cwd static="1"><d/></_get_cwd>
		<_get_http_method static="1"><d/></_get_http_method>
		<_parse_multipart static="1"><d/></_parse_multipart>
		<_base_decode line="327" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<c path="String"/>
</f></_base_decode>
		<_inited line="328" static="1"><x path="Bool"/></_inited>
		<_init set="method" line="329" static="1"><f a=""><x path="Void"/></f></_init>
		<get_queryString set="method" line="36" override="1"><f a=""><c path="String"/></f></get_queryString>
		<get_postString set="method" line="50" override="1"><f a=""><c path="String"/></f></get_postString>
		<_parsed><x path="Bool"/></_parsed>
		<parseMultipart public="1" set="method" line="76" override="1">
			<f a="?onPart:?onData:?onEndPart" v="null:null:null">
				<t path="ufront.web.context.OnPartCallback"/>
				<t path="ufront.web.context.OnDataCallback"/>
				<t path="ufront.web.context.OnEndPartCallback"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>parseMultipart implementation method for mod_neko.

		Please see documentation on `ufront.web.context.HttpRequest.parseMultipart` for general information.

		Specific implementation details for neko:

		- This uses the `parse_multipart_data` function from the `mod_neko` NDLL, which is also used by `neko.Web.parseMultipart`.
		- Because of this, `onPart` and `onData` will run synchronously - the moment the callback finishes, the next callback will continue.
		- We suggest on neko you only use callbacks which can run synchronously.
		- `onEndPart` will not be called until all `onPart` and `onData` functions have finished firing.
		-</haxe_doc>
		</parseMultipart>
		<get_query set="method" line="179" override="1"><f a=""><x path="ufront.core.MultiValueMap"><c path="String"/></x></f></get_query>
		<get_post set="method" line="186" override="1"><f a=""><x path="ufront.core.MultiValueMap"><c path="String"/></x></f></get_post>
		<get_cookies set="method" line="201" override="1"><f a=""><x path="ufront.core.MultiValueMap"><c path="String"/></x></f></get_cookies>
		<get_hostName set="method" line="217" override="1"><f a=""><c path="String"/></f></get_hostName>
		<get_clientIP set="method" line="224" override="1"><f a=""><c path="String"/></f></get_clientIP>
		<get_uri set="method" line="234" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>*  @todo the page processor removal is quite hackish</haxe_doc>
		</get_uri>
		<get_clientHeaders set="method" line="247" override="1"><f a=""><x path="ufront.core.MultiValueMap"><c path="String"/></x></f></get_clientHeaders>
		<get_httpMethod set="method" line="265" override="1"><f a=""><c path="String"/></f></get_httpMethod>
		<get_scriptDirectory set="method" line="275" override="1"><f a=""><c path="String"/></f></get_scriptDirectory>
		<get_authorization set="method" line="284" override="1"><f a=""><a>
	<user><c path="String"/></user>
	<pass><c path="String"/></pass>
</a></f></get_authorization>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
		<haxe_doc>An implementation of HttpRequest for mod_neko and mod_tora.

	@author Franco Ponticelli, Jason O'Neil</haxe_doc>
	</class>
	<class path="ufront.web.context.HttpResponse" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/context/HttpResponse.hx">
		<create public="1" set="method" line="20" static="1">
			<f a=""><c path="ufront.web.context.HttpResponse"/></f>
			<haxe_doc>Create a `HttpResponse` using the platform specific implementation.

		Currently PHP and Neko are supported.  Other platforms will get the default implementation, which will mostly work, except for flush(), which actually writes the HTTP response output.</haxe_doc>
		</create>
		<CONTENT_TYPE get="inline" set="null" line="36" static="1">
			<c path="String"/>
			<haxe_doc>"Content-type"</haxe_doc>
		</CONTENT_TYPE>
		<LOCATION get="inline" set="null" line="39" static="1">
			<c path="String"/>
			<haxe_doc>"Location"</haxe_doc>
		</LOCATION>
		<DEFAULT_CONTENT_TYPE get="inline" set="null" line="42" static="1">
			<c path="String"/>
			<haxe_doc>"text/html"</haxe_doc>
		</DEFAULT_CONTENT_TYPE>
		<DEFAULT_CHARSET get="inline" set="null" line="45" static="1">
			<c path="String"/>
			<haxe_doc>"utf-8"</haxe_doc>
		</DEFAULT_CHARSET>
		<DEFAULT_STATUS get="inline" set="null" line="48" static="1">
			<x path="Int"/>
			<haxe_doc>200</haxe_doc>
		</DEFAULT_STATUS>
		<MOVED_PERMANENTLY get="inline" set="null" line="51" static="1">
			<x path="Int"/>
			<haxe_doc>301</haxe_doc>
		</MOVED_PERMANENTLY>
		<FOUND get="inline" set="null" line="54" static="1">
			<x path="Int"/>
			<haxe_doc>302</haxe_doc>
		</FOUND>
		<UNAUTHORIZED get="inline" set="null" line="57" static="1">
			<x path="Int"/>
			<haxe_doc>401</haxe_doc>
		</UNAUTHORIZED>
		<NOT_FOUND get="inline" set="null" line="60" static="1">
			<x path="Int"/>
			<haxe_doc>404</haxe_doc>
		</NOT_FOUND>
		<INTERNAL_SERVER_ERROR get="inline" set="null" line="63" static="1">
			<x path="Int"/>
			<haxe_doc>500</haxe_doc>
		</INTERNAL_SERVER_ERROR>
		<contentType public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Get or set the Http "Content-type" header. Default is `text/html`.</haxe_doc>
		</contentType>
		<redirectLocation public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Location to redirect to. Will add or remove a "Location" header from the HTTP headers</haxe_doc>
		</redirectLocation>
		<charset public="1">
			<c path="String"/>
			<haxe_doc>Get or set the `charset` used in the HTTP "Content-type" header when the type is "text/*". Default is `utf-8`.</haxe_doc>
		</charset>
		<status public="1">
			<x path="Int"/>
			<haxe_doc>The HTTP Response code.  See the inline static vars for common values. Default is 200.</haxe_doc>
		</status>
		<_buff><c path="StringBuf"/></_buff>
		<_headers><c path="ufront.core.OrderedStringMap"><c path="String"/></c></_headers>
		<_cookies><c path="haxe.ds.StringMap"><c path="ufront.web.HttpCookie"/></c></_cookies>
		<_flushed><x path="Bool"/></_flushed>
		<preventFlush public="1" set="method" line="95">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Prevent the response from flushing.

		This is useful if some code has written to the output manually, rather than writing to the response.</haxe_doc>
		</preventFlush>
		<flush public="1" set="method" line="108">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Write the output to the response.

		This includes writing the cookies, the HttpHeaders and then the content.

		This is an abstract method, it is implemented differently on each platform.

		It will throw NotImplemented() unless a subclass overrides this method.</haxe_doc>
		</flush>
		<clear public="1" set="method" line="113">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Will clear existing headers, cookies, content and status.</haxe_doc>
		</clear>
		<clearCookies public="1" set="method" line="125">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear any cookies set in this response so far.</haxe_doc>
		</clearCookies>
		<clearContent public="1" set="method" line="132">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear the content set in this response so far.</haxe_doc>
		</clearContent>
		<clearHeaders public="1" set="method" line="139">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Clear the headers set in this response so far.</haxe_doc>
		</clearHeaders>
		<write public="1" set="method" line="146">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write a string to the HTTP response</haxe_doc>
		</write>
		<writeChar public="1" set="method" line="154">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write a single character to the HTTP response</haxe_doc>
		</writeChar>
		<writeBytes public="1" set="method" line="161">
			<f a="b:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write a number of bytes to the HTTP response</haxe_doc>
		</writeBytes>
		<setHeader public="1" set="method" line="168">
			<f a="name:value">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set a HTTP Header on the response</haxe_doc>
		</setHeader>
		<setCookie public="1" set="method" line="177">
			<f a="cookie">
				<c path="ufront.web.HttpCookie"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set a HTTP Cookie on the response</haxe_doc>
		</setCookie>
		<getBuffer public="1" set="method" line="184">
			<f a=""><c path="String"/></f>
			<haxe_doc>Get the current content output (String) of this response</haxe_doc>
		</getBuffer>
		<getCookies public="1" set="method" line="191">
			<f a=""><c path="haxe.ds.StringMap"><c path="ufront.web.HttpCookie"/></c></f>
			<haxe_doc>Get the `StringMap` of Cookies set in this response</haxe_doc>
		</getCookies>
		<getHeaders public="1" set="method" line="200">
			<f a=""><c path="ufront.core.OrderedStringMap"><c path="String"/></c></f>
			<haxe_doc>Get the `OrderedStringMap` of HTTP headers set in this response.

		A OrderedStringMap is basically a StringMap, but it preserves the order of the items (headers in this case)</haxe_doc>
		</getHeaders>
		<redirect public="1" set="method" line="209">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the HTTP Response Code to `FOUND` (302) and set the `redirectLocation`, which will set the `Location` HTTP header.

		If URL is null, the `Location` header will be removed.</haxe_doc>
		</redirect>
		<setOk public="1" set="method" line="217">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Set the HTTP Response Code to `DEFAULT_STATUS` (200)</haxe_doc>
		</setOk>
		<setUnauthorized public="1" set="method" line="224">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Set the HTTP Response Code to `UNAUTHORIZED` (401)</haxe_doc>
		</setUnauthorized>
		<requireAuthentication public="1" set="method" line="233">
			<f a="message">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Ask the browser to retrieve a username/password from the user.

		This is a shortcut for `setUnauthorized()` and `setHeader("WWW-Authenticate", "Basic realm="+message)`.</haxe_doc>
		</requireAuthentication>
		<setNotFound public="1" set="method" line="241">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Set the HTTP Response Code to `NOT_FOUND` (404)</haxe_doc>
		</setNotFound>
		<setInternalError public="1" set="method" line="248">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Set the HTTP Response Code to `INTERNAL_SERVER_ERROR` (500)</haxe_doc>
		</setInternalError>
		<permanentRedirect public="1" set="method" line="257">
			<f a="url">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the HTTP Response Code to `MOVED_PERMANENTLY` (301) and set the `redirectLocation`, which will set the `Location` HTTP header.

		If URL is null, the `Location` header will be removed.</haxe_doc>
		</permanentRedirect>
		<isRedirect public="1" set="method" line="265">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>A shortcut to tell whether the current status indicates this response is a redirect (true) or not (false)</haxe_doc>
		</isRedirect>
		<isPermanentRedirect public="1" set="method" line="272">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>A shortcut to tell whether the current status indicates this response is a permanent redirect (true) or not (false)</haxe_doc>
		</isPermanentRedirect>
		<get_contentType set="method" line="276"><f a=""><c path="String"/></f></get_contentType>
		<set_contentType set="method" line="280"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_contentType>
		<get_redirectLocation set="method" line="288"><f a=""><c path="String"/></f></get_redirectLocation>
		<set_redirectLocation set="method" line="292"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_redirectLocation>
		<new public="1" set="method" line="85">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Use DEFAULT_CHARSET, DEFAULT_STATUS.  contentType is null by default.</haxe_doc>
		</new>
		<haxe_doc>The response that will be sent to the browser</haxe_doc>
	</class>
	<class path="neko.ufront.web.context.HttpResponse" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/neko/ufront/web/context/HttpResponse.hx">
		<extends path="ufront.web.context.HttpResponse"/>
		<flush public="1" set="method" line="16" override="1"><f a=""><x path="Void"/></f></flush>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="spadm.Admin" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/spadm/Admin.hx">
		<log set="method" line="1061" static="1"><f a="msg">
	<c path="String"/>
	<x path="Void"/>
</f></log>
		<handler public="1" set="method" line="1067" static="1"><f a="?baseUrl" v="null">
	<c path="String"/>
	<x path="Void"/>
</f></handler>
		<initializeDatabase public="1" set="method" line="1082" static="1"><f a="?initIndexes:?initRelations" v="true:true">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></initializeDatabase>
		<style><c path="spadm.AdminStyle"/></style>
		<hasSyncAction><x path="Bool"/></hasSyncAction>
		<countCache><x path="Map">
	<c path="String"/>
	<x path="Bool"/>
</x></countCache>
		<allowDrop public="1"><x path="Bool"/></allowDrop>
		<default_rights public="1"><t path="spadm.RightsInfos"/></default_rights>
		<maxUploadSize public="1"><x path="Int"/></maxUploadSize>
		<maxInstanceCount public="1"><x path="Int"/></maxInstanceCount>
		<execute set="method" line="66"><f a="sql">
	<c path="String"/>
	<c path="sys.db.ResultSet"/>
</f></execute>
		<request set="method" line="70"><f a="t:sql">
	<c path="spadm.TableInfos"/>
	<c path="String"/>
	<c path="sys.db.ResultSet"/>
</f></request>
		<boolResult set="method" line="74"><f a="sql">
	<c path="String"/>
	<x path="Bool"/>
</f></boolResult>
		<getTables set="method" line="83"><f a=""><c path="Array"><c path="spadm.TableInfos"/></c></f></getTables>
		<has params="T" set="method" line="91"><f a="a:v">
	<a><iterator set="method"><f a=""><t path="Iterator"><c path="has.T"/></t></f></iterator></a>
	<c path="has.T"/>
	<x path="Bool"/>
</f></has>
		<crawl set="method" line="98"><f a="tables:classes">
	<c path="Array"><c path="spadm.TableInfos"/></c>
	<d/>
	<x path="Void"/>
</f></crawl>
		<index public="1" set="method" line="120"><f a="?errorMsg" v="null">
	<c path="String"/>
	<x path="Void"/>
</f></index>
		<isBinary set="method" line="178"><f a="t">
	<e path="sys.db.RecordType"/>
	<x path="Bool"/>
</f></isBinary>
		<canDisplay set="method" line="185"><f a="m">
	<t path="spadm.ManagerAccess"/>
	<t path="Null"><x path="Bool"/></t>
</f></canDisplay>
		<inputField set="method" line="194"><f a="table:f:id:readonly:?defval:?rawValue" v="::::null:null">
	<c path="spadm.TableInfos"/>
	<a>
		<type set="null"><e path="sys.db.RecordType"/></type>
		<name set="null"><c path="String"/></name>
	</a>
	<c path="String"/>
	<x path="Bool"/>
	<d/>
	<x path="Bool"/>
	<x path="Void"/>
</f></inputField>
		<insert set="method" line="246"><f a="table:?params:?error:?errorMsg" v=":null:null:null">
	<c path="spadm.TableInfos"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></insert>
		<updateField set="method" line="274"><f a="fname:v:ftype">
	<c path="String"/>
	<c path="String"/>
	<t path="spadm.TableType"/>
	<d/>
</f></updateField>
		<createInstance set="method" line="397"><f a="table">
	<c path="spadm.TableInfos"/>
	<c path="sys.db.Object"/>
</f></createInstance>
		<getRights set="method" line="401"><f a="?t:?table" v="null:null">
	<c path="sys.db.Object"/>
	<c path="spadm.TableInfos"/>
	<t path="spadm.RightsInfos"/>
</f></getRights>
		<getSInfos set="method" line="414"><f a="t">
	<c path="sys.db.Object"/>
	<t path="spadm.SearchInfos"/>
</f></getSInfos>
		<doInsert set="method" line="420"><f a="table:params">
	<c path="spadm.TableInfos"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></doInsert>
		<doCreate set="method" line="463"><f a="table">
	<c path="spadm.TableInfos"/>
	<x path="Void"/>
</f></doCreate>
		<doDrop set="method" line="472"><f a="table">
	<c path="spadm.TableInfos"/>
	<x path="Void"/>
</f></doDrop>
		<doCleanup set="method" line="479"><f a="table">
	<c path="spadm.TableInfos"/>
	<x path="Void"/>
</f></doCleanup>
		<edit set="method" line="486"><f a="table:id:?params:?error:?errorMsg" v="::null:null:null">
	<c path="spadm.TableInfos"/>
	<c path="String"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></edit>
		<doEdit set="method" line="530"><f a="table:id:params">
	<c path="spadm.TableInfos"/>
	<c path="String"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></doEdit>
		<updateParams set="method" line="585"><f a="table:params">
	<c path="spadm.TableInfos"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></updateParams>
		<doDelete set="method" line="624"><f a="table:id">
	<c path="spadm.TableInfos"/>
	<c path="String"/>
	<x path="Void"/>
</f></doDelete>
		<doDownload set="method" line="639"><f a="table:id:field">
	<c path="spadm.TableInfos"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></doDownload>
		<search set="method" line="657"><f a="table:params">
	<c path="spadm.TableInfos"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></search>
		<syncAction set="method" line="827"><f a="t:act:text:?def" v=":::null">
	<c path="spadm.TableInfos"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></syncAction>
		<doSync set="method" line="838"><f a="params">
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<x path="Void"/>
</f></doSync>
		<indexId set="method" line="895"><f a="i">
	<a>
		<unique><x path="Bool"/></unique>
		<keys><c path="List"><c path="String"/></c></keys>
	</a>
	<c path="String"/>
</f></indexId>
		<needSync set="method" line="899"><f a="t">
	<c path="spadm.TableInfos"/>
	<x path="Bool"/>
</f></needSync>
		<process public="1" set="method" line="1016"><f a="?url:?baseUrl" v="null:'/db/'">
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
	<x path="Void"/>
</f></process>
		<new public="1" set="method" line="49"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="spadm.MacroHelper" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/spadm/AdminStyle.hx" module="spadm.AdminStyle"/>
	<class path="spadm.AdminStyle" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/spadm/AdminStyle.hx">
		<BASE_URL public="1" line="50" static="1"><c path="String"/></BASE_URL>
		<CSS public="1" line="51" static="1"><c path="String"/></CSS>
		<HTML_BOTTOM public="1" line="58" static="1"><c path="String"/></HTML_BOTTOM>
		<isNull><x path="Bool"/></isNull>
		<value><c path="String"/></value>
		<isHeader><x path="Bool"/></isHeader>
		<table><c path="spadm.TableInfos"/></table>
		<out set="method" line="69"><f a="str:?params" v=":null">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></out>
		<text public="1" set="method" line="77"><f a="str:?title" v=":null">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></text>
		<begin public="1" set="method" line="83"><f a="title">
	<c path="String"/>
	<x path="Void"/>
</f></begin>
		<end public="1" set="method" line="103"><f a=""><x path="Void"/></f></end>
		<beginList public="1" set="method" line="115"><f a=""><x path="Void"/></f></beginList>
		<endList public="1" set="method" line="119"><f a=""><x path="Void"/></f></endList>
		<beginItem public="1" set="method" line="123"><f a=""><x path="Void"/></f></beginItem>
		<endItem public="1" set="method" line="127"><f a=""><x path="Void"/></f></endItem>
		<gotoURL public="1" set="method" line="131"><f a="url">
	<c path="String"/>
	<x path="Void"/>
</f></gotoURL>
		<link public="1" set="method" line="135"><f a="url:name">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></link>
		<linkConfirm public="1" set="method" line="139"><f a="url:name">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></linkConfirm>
		<beginForm public="1" set="method" line="143"><f a="url:?file:?id" v=":null:null">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Void"/>
</f></beginForm>
		<endForm public="1" set="method" line="148"><f a=""><x path="Void"/></f></endForm>
		<beginTable public="1" set="method" line="153"><f a="?css" v="null">
	<c path="String"/>
	<x path="Void"/>
</f></beginTable>
		<endTable public="1" set="method" line="160"><f a=""><x path="Void"/></f></endTable>
		<beginLine public="1" set="method" line="164"><f a="?isHeader:?css" v="null:null">
	<x path="Bool"/>
	<c path="String"/>
	<x path="Void"/>
</f></beginLine>
		<nextRow public="1" set="method" line="174"><f a="?isHeader" v="null">
	<x path="Bool"/>
	<x path="Void"/>
</f></nextRow>
		<endLine public="1" set="method" line="179"><f a=""><x path="Void"/></f></endLine>
		<addSubmit public="1" set="method" line="183"><f a="name:?url:?confirm:?iname" v=":null:null:null">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Void"/>
</f></addSubmit>
		<checkBox public="1" set="method" line="198"><f a="name:checked">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></checkBox>
		<input set="method" line="205"><f a="name:css:?options" v="::null">
	<c path="String"/>
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></input>
		<getFileURL set="method" line="228"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></getFileURL>
		<inputText set="method" line="232"><f a="name:css:?noWrap" v="::null">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></inputText>
		<inputField public="1" set="method" line="242"><f a="name:type:isNull:value">
	<c path="String"/>
	<t path="spadm.TableType"/>
	<x path="Bool"/>
	<c path="String"/>
	<x path="Void"/>
</f></inputField>
		<binField public="1" set="method" line="307"><f a="name:isNull:value:url">
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
	<f a=""><c path="String"/></f>
	<x path="Void"/>
</f></binField>
		<infoField public="1" set="method" line="323"><f a="name:value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></infoField>
		<choiceField public="1" set="method" line="331"><f a="name:values:def:link:?disabled:?isImage" v="::::null:null">
	<c path="String"/>
	<c path="List"><a>
	<str><c path="String"/></str>
	<id><c path="String"/></id>
</a></c>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></choiceField>
		<errorField public="1" set="method" line="359"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></errorField>
		<error public="1" set="method" line="366"><f a="message">
	<c path="String"/>
	<x path="Void"/>
</f></error>
		<new public="1" set="method" line="65"><f a="t">
	<c path="spadm.TableInfos"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="spadm.SearchInfos" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/spadm/Custom.hx" module="spadm.Custom"><a>
	<values><c path="Array"><d/></c></values>
	<names><c path="Array"><c path="String"/></c></names>
	<fields><c path="Array"><c path="String"/></c></fields>
</a></typedef>
	<typedef path="spadm.RightsInfos" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/spadm/Custom.hx" module="spadm.Custom"><a>
	<readOnly><c path="Array"><c path="String"/></c></readOnly>
	<invisible><c path="Array"><c path="String"/></c></invisible>
	<can><a>
	<truncate><x path="Bool"/></truncate>
	<modify><x path="Bool"/></modify>
	<insert><x path="Bool"/></insert>
	<delete><x path="Bool"/></delete>
</a></can>
</a></typedef>
	<class path="spadm.Id" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/spadm/Id.hx">
		<encode public="1" set="method" line="27" static="1"><f a="id">
	<c path="String"/>
	<x path="Int"/>
</f></encode>
		<decode public="1" set="method" line="48" static="1"><f a="id">
	<x path="Int"/>
	<c path="String"/>
</f></decode>
	</class>
	<enum path="spadm._Serialized.Errors" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/spadm/Serialized.hx" private="1" module="spadm.Serialized">
		<Invalid/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="spadm._Serialized.Current" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/spadm/Serialized.hx" private="1" module="spadm.Serialized"><a>
	<totalSize><x path="Int"/></totalSize>
	<sep><c path="String"/></sep>
	<prefix><c path="String"/></prefix>
	<old><t path="spadm._Serialized.Current"/></old>
	<maxSize><x path="Int"/></maxSize>
	<lines><c path="Array"><c path="String"/></c></lines>
	<buf><c path="StringBuf"/></buf>
</a></typedef>
	<class path="spadm.Serialized" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/spadm/Serialized.hx">
		<IDENT line="56" static="1"><c path="String"/></IDENT>
		<ident line="57" static="1"><c path="EReg"/></ident>
		<clname line="58" static="1"><c path="EReg"/></clname>
		<BASE64 line="59" static="1"><c path="String"/></BASE64>
		<value><c path="String"/></value>
		<pos><x path="Int"/></pos>
		<buf><c path="StringBuf"/></buf>
		<shash><x path="Map">
	<c path="String"/>
	<x path="Int"/>
</x></shash>
		<scount><x path="Int"/></scount>
		<scache><c path="Array"><c path="String"/></c></scache>
		<useEnumIndex><x path="Bool"/></useEnumIndex>
		<cur><t path="spadm._Serialized.Current"/></cur>
		<tabs><x path="Int"/></tabs>
		<encode public="1" set="method" line="67"><f a=""><c path="String"/></f></encode>
		<getString set="method" line="87"><f a="e">
	<e path="hscript.Expr"/>
	<c path="String"/>
</f></getString>
		<getPath set="method" line="98"><f a="e">
	<e path="hscript.Expr"/>
	<c path="String"/>
</f></getPath>
		<encodeRec set="method" line="123"><f a="e">
	<e path="hscript.Expr"/>
	<x path="Void"/>
</f></encodeRec>
		<encodeEnum set="method" line="377"><f a="e:?name:?eindex:args" v=":null:null:">
	<e path="hscript.Expr"/>
	<c path="String"/>
	<e path="hscript.Expr"/>
	<c path="Array"><e path="hscript.Expr"/></c>
	<x path="Void"/>
</f></encodeEnum>
		<encodeString set="method" line="418"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></encodeString>
		<quote set="method" line="434"><f a="s:?r" v=":null">
	<c path="String"/>
	<c path="EReg"/>
	<c path="String"/>
</f></quote>
		<escape public="1" set="method" line="440"><f a=""><c path="String"/></f></escape>
		<get get="inline" set="null" line="454"><f a="pos">
	<x path="Int"/>
	<t path="Null"><x path="Int"/></t>
</f></get>
		<readDigits set="method" line="458"><f a=""><x path="Int"/></f></readDigits>
		<loop set="method" line="483"><f a=""><x path="Void"/></f></loop>
		<readString set="method" line="652"><f a=""><c path="String"/></f></readString>
		<loopObj set="method" line="673"><f a="eof">
	<t path="Null"><x path="Int"/></t>
	<x path="Void"/>
</f></loopObj>
		<open set="method" line="689"><f a="str:sep:?prefix" v="::null">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></open>
		<next set="method" line="696"><f a=""><x path="Void"/></f></next>
		<close set="method" line="704"><f a="end:?postfix" v=":null">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></close>
		<new public="1" set="method" line="61"><f a="v">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="spadm.TableType" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/spadm/TableInfos.hx" module="spadm.TableInfos"><e path="sys.db.RecordType"/></typedef>
	<typedef path="spadm.ManagerAccess" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/spadm/TableInfos.hx" module="spadm.TableInfos"><a>
	<table_name><c path="String"/></table_name>
	<table_keys><c path="Array"><c path="String"/></c></table_keys>
	<quoteField set="method"><f a="f">
	<c path="String"/>
	<c path="String"/>
</f></quoteField>
	<quote set="method"><f a="v">
	<d/>
	<c path="String"/>
</f></quote>
	<dbClass set="method"><f a=""><x path="Class"><d/></x></f></dbClass>
	<all set="method"><f a="?lock">
	<x path="Bool"/>
	<c path="List"><c path="sys.db.Object"/></c>
</f></all>
	<addKeys set="method"><f a="s:x">
	<c path="StringBuf"/>
	<a/>
	<x path="Void"/>
</f></addKeys>
</a></typedef>
	<typedef path="spadm._TableInfos.TableRelation" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/spadm/TableInfos.hx" private="1" module="spadm.TableInfos"><a>
	<prop><c path="String"/></prop>
	<manager><t path="spadm.ManagerAccess"/></manager>
	<lock><x path="Bool"/></lock>
	<key><c path="String"/></key>
	<className><c path="String"/></className>
	<cascade><x path="Bool"/></cascade>
</a></typedef>
	<class path="spadm.TableInfos" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/spadm/TableInfos.hx">
		<ENGINE public="1" line="51" static="1"><c path="String"/></ENGINE>
		<OLD_COMPAT public="1" line="52" static="1"><x path="Bool"/></OLD_COMPAT>
		<unescape public="1" set="method" line="116" static="1"><f a="field">
	<c path="String"/>
	<c path="String"/>
</f></unescape>
		<countRequest public="1" set="method" line="209" static="1"><f a="m:max">
	<t path="spadm.ManagerAccess"/>
	<x path="Int"/>
	<c path="String"/>
</f></countRequest>
		<fromTypeDescription set="method" line="369" static="1"><f a="desc">
	<c path="String"/>
	<a>
		<t><e path="sys.db.RecordType"/></t>
		<nullable><x path="Bool"/></nullable>
	</a>
</f></fromTypeDescription>
		<fromDescription public="1" set="method" line="479" static="1"><f a="desc">
	<c path="String"/>
	<a>
		<table><c path="String"/></table>
		<relations><c path="Array"><a>
	<table><c path="String"/></table>
	<setnull><x path="Bool"/></setnull>
	<name><c path="String"/></name>
	<key><c path="String"/></key>
	<id><c path="String"/></id>
</a></c></relations>
		<primary><c path="Array"><c path="String"/></c></primary>
		<nulls><x path="Map">
	<c path="String"/>
	<x path="Bool"/>
</x></nulls>
		<indexes><x path="Map">
	<c path="String"/>
	<a>
		<unique><x path="Bool"/></unique>
		<name><c path="String"/></name>
		<keys><c path="List"><c path="String"/></c></keys>
	</a>
</x></indexes>
		<fields><x path="Map">
	<c path="String"/>
	<e path="sys.db.RecordType"/>
</x></fields>
	</a>
</f></fromDescription>
		<sameDBStorage public="1" set="method" line="543" static="1"><f a="dt:rt">
	<t path="spadm.TableType"/>
	<t path="spadm.TableType"/>
	<x path="Bool"/>
</f></sameDBStorage>
		<allTablesRequest public="1" set="method" line="555" static="1"><f a=""><c path="String"/></f></allTablesRequest>
		<primary public="1" set="null"><c path="List"><c path="String"/></c></primary>
		<cl public="1" set="null"><x path="Class"><c path="sys.db.Object"/></x></cl>
		<name public="1" set="null"><c path="String"/></name>
		<className public="1" set="null"><c path="String"/></className>
		<hfields public="1" set="null"><x path="Map">
	<c path="String"/>
	<t path="spadm.TableType"/>
</x></hfields>
		<fields public="1" set="null"><c path="List"><a>
	<type><t path="spadm.TableType"/></type>
	<name><c path="String"/></name>
</a></c></fields>
		<nulls public="1" set="null"><x path="Map">
	<c path="String"/>
	<x path="Bool"/>
</x></nulls>
		<relations public="1" set="null"><c path="Array"><t path="spadm._TableInfos.TableRelation"/></c></relations>
		<indexes public="1" set="null"><c path="List"><a>
	<unique><x path="Bool"/></unique>
	<keys><c path="List"><c path="String"/></c></keys>
</a></c></indexes>
		<manager public="1"><c path="sys.db.Manager"><c path="sys.db.Object"/></c></manager>
		<processClass set="method" line="86"><f a=""><x path="Void"/></f></processClass>
		<escape set="method" line="111"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></escape>
		<isRelationActive public="1" set="method" line="122"><f a="r">
	<d/>
	<x path="Bool"/>
</f></isRelationActive>
		<createRequest public="1" set="method" line="126"><f a="full">
	<x path="Bool"/>
	<c path="String"/>
</f></createRequest>
		<relationInfos set="method" line="150"><f a="r">
	<t path="spadm._TableInfos.TableRelation"/>
	<c path="String"/>
</f></relationInfos>
		<fieldInfos set="method" line="158"><f a="f">
	<a>
		<type set="null"><e path="sys.db.RecordType"/></type>
		<name set="null"><c path="String"/></name>
	</a>
	<c path="String"/>
</f></fieldInfos>
		<dropRequest public="1" set="method" line="193"><f a=""><c path="String"/></f></dropRequest>
		<truncateRequest public="1" set="method" line="197"><f a=""><c path="String"/></f></truncateRequest>
		<descriptionRequest public="1" set="method" line="201"><f a=""><c path="String"/></f></descriptionRequest>
		<existsRequest public="1" set="method" line="205"><f a=""><c path="String"/></f></existsRequest>
		<addFieldRequest public="1" set="method" line="213"><f a="fname">
	<c path="String"/>
	<c path="String"/>
</f></addFieldRequest>
		<removeFieldRequest public="1" set="method" line="221"><f a="fname">
	<c path="String"/>
	<c path="String"/>
</f></removeFieldRequest>
		<renameFieldRequest public="1" set="method" line="225"><f a="old:newname">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></renameFieldRequest>
		<updateFieldRequest public="1" set="method" line="233"><f a="fname">
	<c path="String"/>
	<c path="String"/>
</f></updateFieldRequest>
		<addRelationRequest public="1" set="method" line="241"><f a="key:prop">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></addRelationRequest>
		<deleteRelationRequest public="1" set="method" line="248"><f a="rel">
	<c path="String"/>
	<c path="String"/>
</f></deleteRelationRequest>
		<indexName public="1" set="method" line="252"><f a="idx">
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</f></indexName>
		<addIndexRequest public="1" set="method" line="256"><f a="idx:unique">
	<c path="Array"><c path="String"/></c>
	<x path="Bool"/>
	<c path="String"/>
</f></addIndexRequest>
		<deleteIndexRequest public="1" set="method" line="272"><f a="idx">
	<c path="String"/>
	<c path="String"/>
</f></deleteIndexRequest>
		<updateFields public="1" set="method" line="276"><f a="o:fields">
	<a/>
	<c path="List"><a>
	<value><d/></value>
	<name><c path="String"/></name>
</a></c>
	<c path="String"/>
</f></updateFields>
		<identifier public="1" set="method" line="298"><f a="o">
	<c path="sys.db.Object"/>
	<c path="String"/>
</f></identifier>
		<fromIdentifier public="1" set="method" line="304"><f a="id">
	<c path="String"/>
	<c path="sys.db.Object"/>
</f></fromIdentifier>
		<makeNativeValue set="method" line="316"><f a="t:v">
	<t path="spadm.TableType"/>
	<c path="String"/>
	<d/>
</f></makeNativeValue>
		<fromSearch public="1" set="method" line="330"><f a="params:order:pos:count">
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="List"><c path="sys.db.Object"/></c>
</f></fromSearch>
		<new public="1" set="method" line="65"><f a="cname">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="sys.FileStat" params="" file="C:\HaxeToolkit\haxe\std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>the user id for the file</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>the size of the file</haxe_doc>
			</size>
			<rdev><x path="Int"/></rdev>
			<nlink><x path="Int"/></nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>the last modification time for the file</haxe_doc>
			</mtime>
			<mode><x path="Int"/></mode>
			<ino><x path="Int"/></ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>the user group id for the file</haxe_doc>
			</gid>
			<dev><x path="Int"/></dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>the creation time for the file</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>the last access time for the file (when enabled by the file system)</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File informations, as given by [sys.FileSystem.stat]</haxe_doc>
	</typedef>
	<enum path="sys._FileSystem.FileKind" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/sys/FileSystem.hx" private="1" module="sys.FileSystem">
		<kdir/>
		<kfile/>
		<kother a="k"><c path="String"/></kother>
	</enum>
	<class path="sys.FileSystem" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/sys/FileSystem.hx">
		<exists public="1" set="method" line="33" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the file or directory specified by `path` exists.

		If `path` is null, the result is unspecified.</haxe_doc>
		</exists>
		<rename public="1" set="method" line="37" static="1">
			<f a="path:newPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Renames/moves the file or directory specified by `path` to `newPath`.

		If `path` is not a valid file system entry, or if it is not accessible,
		or if `newPath` is not accessible, an exception is thrown.

		If `path` or `newPath` are null, the result is unspecified.</haxe_doc>
		</rename>
		<stat public="1" set="method" line="41" static="1">
			<f a="path">
				<c path="String"/>
				<t path="sys.FileStat"/>
			</f>
			<haxe_doc>Returns `FileStat` information on the file or directory specified by
		`path`.

		If `path` is null, the result is unspecified.</haxe_doc>
		</stat>
		<kind set="method" line="53" static="1"><f a="path">
	<c path="String"/>
	<e path="sys._FileSystem.FileKind"/>
</f></kind>
		<isDirectory public="1" set="method" line="62" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the file or directory specified by `path` is a directory.

		If `path` is not a valid file system entry or if its destination is no
		accessible, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</isDirectory>
		<createDirectory public="1" set="method" line="66" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a directory specified by `path`.

		This method is recursive: The parent directories don't have to exist.

		If the directory cannot be created, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</createDirectory>
		<deleteFile public="1" set="method" line="76" static="1">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Deletes the file specified by `path`.

		If `path` does not denote a valid file, or if that file cannot be
		deleted, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</deleteFile>
		<readDirectory public="1" set="method" line="84" static="1">
			<f a="path">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the names of all files and directories in the directory specified
		by `path`.

		If `path` does not denote a valid directory, an exception is thrown.

		If `path` is null, the result is unspecified.</haxe_doc>
		</readDirectory>
		<sys_exists line="94" static="1"><f a="">
	<unknown/>
	<x path="Bool"/>
</f></sys_exists>
		<file_delete line="95" static="1"><f a="">
	<unknown/>
	<unknown/>
</f></file_delete>
		<sys_rename line="96" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<unknown/>
</f></sys_rename>
		<sys_stat line="97" static="1"><f a="">
	<unknown/>
	<t path="sys.FileStat"/>
</f></sys_stat>
		<sys_file_type line="98" static="1"><f a="">
	<unknown/>
	<c path="String"/>
</f></sys_file_type>
		<sys_create_dir line="99" static="1"><f a=":">
	<unknown/>
	<x path="Int"/>
	<unknown/>
</f></sys_create_dir>
		<sys_read_dir line="101" static="1"><f a="">
	<unknown/>
	<c path="Array"><d/></c>
</f></sys_read_dir>
		<haxe_doc>This class allows you to get information about the files and directories.

	See `sys.io.File` for the complementary file API.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.db.Connection" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Connection.hx" interface="1">
		<request public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="sys.db.ResultSet"/>
</f></request>
		<quote public="1" set="method"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<addValue public="1" set="method"><f a="s:v">
	<c path="StringBuf"/>
	<d/>
	<x path="Void"/>
</f></addValue>
		<lastInsertId public="1" set="method"><f a=""><x path="Int"/></f></lastInsertId>
		<dbName public="1" set="method"><f a=""><c path="String"/></f></dbName>
		<rollback public="1" set="method"><f a=""><x path="Void"/></f></rollback>
		<meta>
			<m n=":keep"/>
			<m n="interface"/>
		</meta>
	</class>
	<class path="sys.db.Manager" params="T" file="C:\HaxeToolkit\haxe\lib/ufront-orm/1,0,0-rc,11/src/sys/db/Manager.hx">
		<cnx public="1" set="accessor" static="1"><c path="sys.db.Connection"/></cnx>
		<lockMode public="1" static="1"><c path="String"/></lockMode>
		<cache_field get="inline" set="null" line="37" static="1"><c path="String"/></cache_field>
		<object_cache line="39" static="1"><c path="haxe.ds.StringMap"><c path="sys.db.Object"/></c></object_cache>
		<init_list line="40" static="1"><c path="List"><c path="sys.db.Manager"><d/></c></c></init_list>
		<KEYWORDS line="42" static="1"><c path="haxe.ds.StringMap"><x path="Bool"/></c></KEYWORDS>
		<set_cnx set="method" line="49" static="1"><f a="c">
	<c path="sys.db.Connection"/>
	<c path="sys.db.Connection"/>
</f></set_cnx>
		<nullCompare public="1" set="method" line="437" static="1"><f a="a:b:eq">
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<c path="String"/>
</f></nullCompare>
		<initialize public="1" set="method" line="498" static="1"><f a=""><x path="Void"/></f></initialize>
		<cleanup public="1" set="method" line="506" static="1"><f a=""><x path="Void"/></f></cleanup>
		<quoteAny public="1" set="method" line="623" static="1"><f a="v">
	<d/>
	<c path="String"/>
</f></quoteAny>
		<quoteList public="1" set="method" line="629" static="1"><f a="v:it">
	<c path="String"/>
	<t path="Iterable"><d/></t>
	<c path="String"/>
</f></quoteList>
		<table_infos><t path="sys.db.RecordInfos"/></table_infos>
		<table_name><c path="String"/></table_name>
		<table_keys><c path="Array"><c path="String"/></c></table_keys>
		<class_proto><a><prototype><d/></prototype></a></class_proto>
		<all public="1" set="method" line="76"><f a="?lock" v="null">
	<x path="Bool"/>
	<c path="List"><c path="sys.db.Manager.T"/></c>
</f></all>
		<dynamicSearch public="1" set="method" line="100"><f a="x:?lock" v=":null">
	<a/>
	<x path="Bool"/>
	<c path="List"><c path="sys.db.Manager.T"/></c>
</f></dynamicSearch>
		<quote set="method" line="109"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></quote>
		<doUpdateCache set="method" line="115"><f a="x:name:v">
	<c path="sys.db.Manager.T"/>
	<c path="String"/>
	<d/>
	<c path="haxe.io.Bytes"/>
</f></doUpdateCache>
		<doInsert set="method" line="127"><f a="x">
	<c path="sys.db.Manager.T"/>
	<x path="Void"/>
</f></doInsert>
		<isBinary get="inline" set="null" line="182"><f a="t">
	<e path="sys.db.RecordType"/>
	<x path="Bool"/>
</f></isBinary>
		<hasBinaryChanged get="inline" set="null" line="190"><f a="a:b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
	<x path="Bool"/>
</f></hasBinaryChanged>
		<doUpdate set="method" line="194"><f a="x">
	<c path="sys.db.Manager.T"/>
	<x path="Void"/>
</f></doUpdate>
		<doDelete set="method" line="237"><f a="x">
	<c path="sys.db.Manager.T"/>
	<x path="Void"/>
</f></doDelete>
		<doLock set="method" line="247"><f a="i">
	<c path="sys.db.Manager.T"/>
	<x path="Void"/>
</f></doLock>
		<objectToString set="method" line="260"><f a="it">
	<c path="sys.db.Manager.T"/>
	<c path="String"/>
</f></objectToString>
		<doSerialize set="method" line="283"><f a="field:v">
	<c path="String"/>
	<d/>
	<c path="haxe.io.Bytes"/>
</f></doSerialize>
		<doUnserialize set="method" line="295"><f a="field:b">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<d/>
</f></doUnserialize>
		<cacheObject set="method" line="311"><f a="x:lock">
	<c path="sys.db.Manager.T"/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></cacheObject>
		<make set="method" line="327"><f a="x">
	<c path="sys.db.Manager.T"/>
	<x path="Void"/>
</f></make>
		<unmake set="method" line="330"><f a="x">
	<c path="sys.db.Manager.T"/>
	<x path="Void"/>
</f></unmake>
		<quoteField set="method" line="333"><f a="f">
	<c path="String"/>
	<c path="String"/>
</f></quoteField>
		<addKeys set="method" line="337"><f a="s:x">
	<c path="StringBuf"/>
	<a/>
	<x path="Void"/>
</f></addKeys>
		<unsafeExecute set="method" line="353"><f a="sql">
	<c path="String"/>
	<c path="sys.db.ResultSet"/>
</f></unsafeExecute>
		<unsafeObject public="1" set="method" line="357"><f a="sql:lock">
	<c path="String"/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></unsafeObject>
		<unsafeObjects public="1" set="method" line="373"><f a="sql:lock">
	<c path="String"/>
	<x path="Bool"/>
	<c path="List"><c path="sys.db.Manager.T"/></c>
</f></unsafeObjects>
		<unsafeCount public="1" set="method" line="393"><f a="sql">
	<c path="String"/>
	<x path="Int"/>
</f></unsafeCount>
		<unsafeDelete public="1" set="method" line="397"><f a="sql">
	<c path="String"/>
	<x path="Void"/>
</f></unsafeDelete>
		<unsafeGet public="1" set="method" line="401"><f a="id:?lock" v=":null">
	<d/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></unsafeGet>
		<unsafeGetWithKeys public="1" set="method" line="420"><f a="keys:?lock" v=":null">
	<a/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></unsafeGetWithKeys>
		<unsafeGetId public="1" set="method" line="433"><f a="o">
	<c path="sys.db.Manager.T"/>
	<d/>
</f></unsafeGetId>
		<addCondition set="method" line="446"><f a="s:x">
	<c path="StringBuf"/>
	<a/>
	<x path="Void"/>
</f></addCondition>
		<dbClass public="1" set="method" line="469"><f a=""><x path="Class"><d/></x></f></dbClass>
		<dbInfos public="1" set="method" line="473"><f a=""><t path="sys.db.RecordInfos"/></f></dbInfos>
		<getCnx set="method" line="477"><f a=""><c path="sys.db.Connection"/></f></getCnx>
		<getLockMode set="method" line="481"><f a=""><c path="String"/></f></getLockMode>
		<forceUpdate public="1" set="method" line="491">
			<f a="o:field">
				<c path="sys.db.Manager.T"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the cached value for the given Object field : this will ensure
		that the value is updated when calling .update(). This is necessary if
		you are modifying binary data in-place since the cache will be modified
		as well.</haxe_doc>
		</forceUpdate>
		<initRelation set="method" line="510"><f a="r">
	<t path="sys.db.RecordRelation"/>
	<x path="Void"/>
</f></initRelation>
		<makeCacheKey set="method" line="568"><f a="x">
	<c path="sys.db.Manager.T"/>
	<c path="String"/>
</f></makeCacheKey>
		<addToCache set="method" line="587"><f a="x">
	<c path="sys.db.Manager.T"/>
	<x path="Void"/>
</f></addToCache>
		<removeFromCache set="method" line="591"><f a="x">
	<c path="sys.db.Manager.T"/>
	<x path="Void"/>
</f></removeFromCache>
		<getFromCacheKey set="method" line="595"><f a="key">
	<c path="String"/>
	<c path="sys.db.Manager.T"/>
</f></getFromCacheKey>
		<getFromCache set="method" line="599"><f a="x:lock">
	<c path="sys.db.Manager.T"/>
	<x path="Bool"/>
	<c path="sys.db.Manager.T"/>
</f></getFromCache>
		<new public="1" set="method" line="62"><f a="classval">
	<x path="Class"><c path="sys.db.Manager.T"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>Record Manager : the persistent object database manager. See the tutorial on
	Haxe website to learn how to use Record.</haxe_doc>
		<meta><m n=":build"><e>'???'</e></m></meta>
	</class>
	<class path="sys.db.Object" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Object.hx">
		<_lock set="null"><x path="Bool"/></_lock>
		<_manager set="null"><c path="sys.db.Manager"><d/></c></_manager>
		<insert public="1" set="method" line="41"><f a=""><x path="Void"/></f></insert>
		<update public="1" set="method" line="45"><f a=""><x path="Void"/></f></update>
		<lock public="1" set="method" line="49"><f a=""><x path="Void"/></f></lock>
		<delete public="1" set="method" line="53"><f a=""><x path="Void"/></f></delete>
		<isLocked public="1" set="method" line="57"><f a=""><x path="Bool"/></f></isLocked>
		<toString public="1" set="method" line="61"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Record Object : the persistent object base type. See the tutorial on Haxe
	website to learn how to use Record.</haxe_doc>
		<meta>
			<m n=":keepSub"/>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":skipFields"/>
		</meta>
	</class>
	<enum path="sys.db.RecordType" params="" file="C:\HaxeToolkit\haxe\std/sys/db/RecordInfos.hx" module="sys.db.RecordInfos">
		<DId/>
		<DInt/>
		<DUId/>
		<DUInt/>
		<DBigId/>
		<DBigInt/>
		<DSingle/>
		<DFloat/>
		<DBool/>
		<DString a="n"><x path="Int"/></DString>
		<DDate/>
		<DDateTime/>
		<DTimeStamp/>
		<DTinyText/>
		<DSmallText/>
		<DText/>
		<DSmallBinary/>
		<DLongBinary/>
		<DBinary/>
		<DBytes a="n"><x path="Int"/></DBytes>
		<DEncoded/>
		<DSerialized/>
		<DNekoSerialized/>
		<DFlags a="flags:autoSize">
			<c path="Array"><c path="String"/></c>
			<x path="Bool"/>
		</DFlags>
		<DTinyInt/>
		<DTinyUInt/>
		<DSmallInt/>
		<DSmallUInt/>
		<DMediumInt/>
		<DMediumUInt/>
		<DData/>
		<DEnum a="name"><c path="String"/></DEnum>
		<DInterval/>
		<DNull/>
	</enum>
	<typedef path="sys.db.RecordField" params="" file="C:\HaxeToolkit\haxe\std/sys/db/RecordInfos.hx" module="sys.db.RecordInfos"><a>
	<t><e path="sys.db.RecordType"/></t>
	<name><c path="String"/></name>
	<isNull><x path="Bool"/></isNull>
</a></typedef>
	<typedef path="sys.db.RecordRelation" params="" file="C:\HaxeToolkit\haxe\std/sys/db/RecordInfos.hx" module="sys.db.RecordInfos"><a>
	<type><c path="String"/></type>
	<prop><c path="String"/></prop>
	<lock><x path="Bool"/></lock>
	<key><c path="String"/></key>
	<isNull><x path="Bool"/></isNull>
	<cascade><x path="Bool"/></cascade>
</a></typedef>
	<typedef path="sys.db.RecordInfos" params="" file="C:\HaxeToolkit\haxe\std/sys/db/RecordInfos.hx"><a>
	<relations><c path="Array"><t path="sys.db.RecordRelation"/></c></relations>
	<name><c path="String"/></name>
	<key><c path="Array"><c path="String"/></c></key>
	<indexes><c path="Array"><a>
	<unique><x path="Bool"/></unique>
	<keys><c path="Array"><c path="String"/></c></keys>
</a></c></indexes>
	<hfields><c path="haxe.ds.StringMap"><t path="sys.db.RecordField"/></c></hfields>
	<fields><c path="Array"><t path="sys.db.RecordField"/></c></fields>
</a></typedef>
	<class path="sys.db.ResultSet" params="" file="C:\HaxeToolkit\haxe\std/sys/db/ResultSet.hx" interface="1">
		<length public="1" get="null" set="null"><x path="Int"/></length>
		<hasNext public="1" set="method"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method"><f a=""><d/></f></next>
		<results public="1" set="method"><f a=""><c path="List"><d/></c></f></results>
		<getResult public="1" set="method"><f a="n">
	<x path="Int"/>
	<c path="String"/>
</f></getResult>
		<getIntResult public="1" set="method"><f a="n">
	<x path="Int"/>
	<x path="Int"/>
</f></getIntResult>
		<meta>
			<m n=":keep"/>
			<m n="interface"/>
		</meta>
	</class>
	<class path="sys.db.TableCreate" params="" file="C:\HaxeToolkit\haxe\std/sys/db/TableCreate.hx">
		<autoInc set="method" line="27" static="1"><f a="dbName">
	<c path="String"/>
	<c path="String"/>
</f></autoInc>
		<getTypeSQL public="1" set="method" line="32" static="1"><f a="t:dbName">
	<e path="sys.db.RecordType"/>
	<c path="String"/>
	<c path="String"/>
</f></getTypeSQL>
		<create public="1" set="method" line="65" static="1"><f a="manager:?engine" v=":null">
	<c path="sys.db.Manager"><d/></c>
	<c path="String"/>
	<x path="Void"/>
</f></create>
		<exists public="1" set="method" line="98" static="1"><f a="manager">
	<c path="sys.db.Manager"><d/></c>
	<x path="Bool"/>
</f></exists>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="sys.db.SId" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<x path="Int"/>
		<haxe_doc>int with auto increment</haxe_doc>
		<meta><m n=":noPackageRestrict"/></meta>
	</typedef>
	<typedef path="sys.db.SUId" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<x path="Int"/>
		<haxe_doc>int unsigned with auto increment</haxe_doc>
	</typedef>
	<typedef path="sys.db.SBigId" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<x path="Float"/>
		<haxe_doc>big int with auto increment</haxe_doc>
	</typedef>
	<typedef path="sys.db.SInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types"><x path="Int"/></typedef>
	<typedef path="sys.db.SUInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types"><x path="Int"/></typedef>
	<typedef path="sys.db.SBigInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types"><x path="Float"/></typedef>
	<typedef path="sys.db.SSingle" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<x path="Float"/>
		<haxe_doc>single precision float</haxe_doc>
	</typedef>
	<typedef path="sys.db.SFloat" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<x path="Float"/>
		<haxe_doc>double precision float</haxe_doc>
	</typedef>
	<typedef path="sys.db.SBool" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<x path="Bool"/>
		<haxe_doc>use tinyint(1) to distinguish with int</haxe_doc>
	</typedef>
	<typedef path="sys.db.SString" params="Const" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>same as varchar(n)</haxe_doc>
	</typedef>
	<typedef path="sys.db.SDate" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="Date"/>
		<haxe_doc>date only, use SDateTime for date+time</haxe_doc>
	</typedef>
	<typedef path="sys.db.SDateTime" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="Date"/>
		<haxe_doc>mysql DateTime</haxe_doc>
	</typedef>
	<typedef path="sys.db.STimeStamp" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="Date"/>
		<haxe_doc>mysql Timestamp</haxe_doc>
	</typedef>
	<typedef path="sys.db.STinyText" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>TinyText (up to 255 bytes)</haxe_doc>
	</typedef>
	<typedef path="sys.db.SSmallText" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>Text (up to 64KB)</haxe_doc>
	</typedef>
	<typedef path="sys.db.SText" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>MediumText (up to 24MB)</haxe_doc>
	</typedef>
	<typedef path="sys.db.SSmallBinary" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>Blob type (up to 64KB)</haxe_doc>
	</typedef>
	<typedef path="sys.db.SLongBinary" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>LongBlob type (up to 4GB)</haxe_doc>
	</typedef>
	<typedef path="sys.db.SBinary" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>MediumBlob type (up to 24MB)</haxe_doc>
	</typedef>
	<typedef path="sys.db.SBytes" params="Const" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>same as binary(n)</haxe_doc>
	</typedef>
	<typedef path="sys.db.STinyInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<x path="Int"/>
		<haxe_doc>one byte signed [-128...127]</haxe_doc>
	</typedef>
	<typedef path="sys.db.SSmallInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<x path="Int"/>
		<haxe_doc>two bytes signed [-32768...32767]</haxe_doc>
	</typedef>
	<typedef path="sys.db.SMediumInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<x path="Int"/>
		<haxe_doc>three bytes signed [-8388608...8388607]</haxe_doc>
	</typedef>
	<typedef path="sys.db.STinyUInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<x path="Int"/>
		<haxe_doc>one byte [0...255]</haxe_doc>
	</typedef>
	<typedef path="sys.db.SSmallUInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<x path="Int"/>
		<haxe_doc>two bytes [0...65535]</haxe_doc>
	</typedef>
	<typedef path="sys.db.SMediumUInt" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<x path="Int"/>
		<haxe_doc>three bytes [0...16777215]</haxe_doc>
	</typedef>
	<typedef path="sys.db.SNull" params="T" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="sys.db.SNull.T"/>
		<haxe_doc>specify that this field is nullable</haxe_doc>
	</typedef>
	<typedef path="sys.db.SEncoded" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<x path="Int"/>
		<haxe_doc>specify that the integer use custom encoding</haxe_doc>
	</typedef>
	<typedef path="sys.db.SSerialized" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="String"/>
		<haxe_doc>haxe Serialized string</haxe_doc>
	</typedef>
	<typedef path="sys.db.SNekoSerialized" params="" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="haxe.io.Bytes"/>
		<haxe_doc>native neko serialized bytes</haxe_doc>
	</typedef>
	<typedef path="sys.db.SFlags" params="T" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<x path="haxe.EnumFlags"><c path="sys.db.SFlags.T"/></x>
		<haxe_doc>a set of bitflags of different enum values</haxe_doc>
	</typedef>
	<typedef path="sys.db.SSmallFlags" params="T" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<t path="sys.db.SFlags"><c path="sys.db.SSmallFlags.T"/></t>
		<haxe_doc>same as [SFlags] but will adapt the storage size to the number of flags</haxe_doc>
	</typedef>
	<typedef path="sys.db.SData" params="T" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="sys.db.SData.T"/>
		<haxe_doc>allow to store any value in serialized form</haxe_doc>
	</typedef>
	<typedef path="sys.db.SEnum" params="E" file="C:\HaxeToolkit\haxe\std/sys/db/Types.hx" module="sys.db.Types">
		<c path="sys.db.SEnum.E"/>
		<haxe_doc>allow to store an enum value that does not have parameters as a simple int</haxe_doc>
	</typedef>
	<enum path="sys.io.FileHandle" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/sys/io/File.hx" module="sys.io.File"><meta><m n=":flatEnum"/></meta></enum>
	<class path="sys.io.File" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/sys/io/File.hx">
		<getContent public="1" set="method" line="29" static="1">
			<f a="path">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the content of the file specified by `path` as a String.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getContent>
		<getBytes public="1" set="method" line="33" static="1">
			<f a="path">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Retrieves the binary content of the file specified by `path`.

		If the file does not exist or can not be read, an exception is thrown.

		`sys.FileSystem.exists` can be used to check for existence.

		If `path` is null, the result is unspecified.</haxe_doc>
		</getBytes>
		<saveContent public="1" set="method" line="37" static="1">
			<f a="path:content">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `content` in the file specified by `path`.

		If the file cannot be written to, an exception is thrown.

		If `path` or `content` are null, the result is unspecified.</haxe_doc>
		</saveContent>
		<saveBytes public="1" set="method" line="43" static="1">
			<f a="path:bytes">
				<c path="String"/>
				<c path="haxe.io.Bytes"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores `bytes` in the file specified by `path` in binary mode.

		If the file cannot be written to, an exception is thrown.

		If `path` or `bytes` are null, the result is unspecified.</haxe_doc>
		</saveBytes>
		<read public="1" set="method" line="49" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileInput"/>
			</f>
			<haxe_doc>Returns an `FileInput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file does not exist or can not be read, an exception is thrown.

		Operations on the returned `FileInput` handle read on the opened file.

		File handles should be closed via `FileInput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</read>
		<write public="1" set="method" line="53" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<haxe_doc>Returns an `FileOutput` handle to the file specified by `path`.

		If `binary` is true, the file is opened in binary mode. Otherwise it is
		opened in non-binary mode.

		If the file cannot be written to, an exception is thrown.

		Operations on the returned `FileOutput` handle write to the opened file.
		If the file existed, its previous content is overwritten.

		File handles should be closed via `FileOutput.close` once the operation
		is complete.

		If `path` is null, the result is unspecified.</haxe_doc>
		</write>
		<append public="1" set="method" line="57" static="1">
			<f a="path:?binary" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<c path="sys.io.FileOutput"/>
			</f>
			<haxe_doc>Similar to `sys.io.File.write`, but appends to the file if it exists
		instead of overwriting its contents.</haxe_doc>
		</append>
		<copy public="1" set="method" line="61" static="1">
			<f a="srcPath:dstPath">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Copies the contents of the file specified by `srcPath` to the file
		specified by `dstPath`.

		If the `srcPath` does not exist or cannot be read, or if the `dstPath`
		file cannot be written to, an exception is thrown.

		If the file at `dstPath` exists, its contents are overwritten.

		If `srcPath` or `dstPath` are null, the result is unspecified.</haxe_doc>
		</copy>
		<file_contents line="69" static="1"><f a="">
	<unknown/>
	<c path="String"/>
</f></file_contents>
		<file_open line="70" static="1"><f a=":">
	<unknown/>
	<unknown/>
	<e path="sys.io.FileHandle"/>
</f></file_open>
		<haxe_doc>API for reading and writing to files.

	See `sys.FileSystem` for the complementary file system API.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.io.FileInput" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/sys/io/FileInput.hx">
		<extends path="haxe.io.Input"/>
		<file_read line="74" static="1"><f a=":::">
	<e path="sys.io.FileHandle"/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></file_read>
		<file_read_char line="75" static="1"><f a="">
	<e path="sys.io.FileHandle"/>
	<x path="Int"/>
</f></file_read_char>
		<file_close line="77" static="1"><f a="">
	<e path="sys.io.FileHandle"/>
	<unknown/>
</f></file_close>
		<__f><e path="sys.io.FileHandle"/></__f>
		<readByte public="1" set="method" line="32" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="43" override="1"><f a="s:p:l">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="54" override="1"><f a=""><x path="Void"/></f></close>
		<new set="method" line="28"><f a="f">
	<e path="sys.io.FileHandle"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Use [sys.io.File.read] to create a [FileInput]</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.io.FileOutput" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/sys/io/FileOutput.hx">
		<extends path="haxe.io.Output"/>
		<file_close line="57" static="1"><f a="">
	<e path="sys.io.FileHandle"/>
	<unknown/>
</f></file_close>
		<file_write line="62" static="1"><f a=":::">
	<e path="sys.io.FileHandle"/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></file_write>
		<file_write_char line="63" static="1"><f a=":">
	<e path="sys.io.FileHandle"/>
	<x path="Int"/>
	<unknown/>
</f></file_write_char>
		<__f><e path="sys.io.FileHandle"/></__f>
		<writeByte public="1" set="method" line="32" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="36" override="1"><f a="s:p:l">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<close public="1" set="method" line="44" override="1"><f a=""><x path="Void"/></f></close>
		<new set="method" line="28"><f a="f">
	<e path="sys.io.FileHandle"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Use [sys.io.File.write] to create a [FileOutput]</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.io._Process.Stdin" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="haxe.io.Output"/>
		<_stdin_write line="52" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></_stdin_write>
		<_stdin_close line="53" static="1"><f a="">
	<d/>
	<unknown/>
</f></_stdin_close>
		<p><d/></p>
		<buf><c path="haxe.io.Bytes"/></buf>
		<close public="1" set="method" line="34" override="1"><f a=""><x path="Void"/></f></close>
		<writeByte public="1" set="method" line="39" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="44" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<new public="1" set="method" line="29"><f a="p">
	<unknown/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="sys.io._Process.Stdout" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/sys/io/Process.hx" private="1" module="sys.io.Process">
		<extends path="haxe.io.Input"/>
		<_stdout_read line="83" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></_stdout_read>
		<_stderr_read line="84" static="1"><f a=":::">
	<d/>
	<t path="haxe.io.BytesData"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></_stderr_read>
		<p><d/></p>
		<out><x path="Bool"/></out>
		<buf><c path="haxe.io.Bytes"/></buf>
		<readByte public="1" set="method" line="69" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="75" override="1"><f a="str:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="63"><f a="p:out">
	<unknown/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="sys.io.Process" params="" file="C:\HaxeToolkit\haxe\std/neko/_std/sys/io/Process.hx">
		<_run line="118" static="1"><f a=":">
	<unknown/>
	<d/>
	<unknown/>
</f></_run>
		<_exit line="119" static="1"><f a="">
	<d/>
	<x path="Int"/>
</f></_exit>
		<p><d/></p>
		<stdout public="1" set="null"><c path="haxe.io.Input"/></stdout>
		<stderr public="1" set="null"><c path="haxe.io.Input"/></stderr>
		<stdin public="1" set="null"><c path="haxe.io.Output"/></stdin>
		<exitCode public="1" set="method" line="106"><f a=""><x path="Int"/></f></exitCode>
		<new public="1" set="method" line="95"><f a="cmd:args">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="thx.core.Arrays" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Arrays.hx">
		<after public="1" params="T" get="inline" set="null" line="19" static="1">
			<f a="array:element">
				<c path="Array"><c path="after.T"/></c>
				<c path="after.T"/>
				<c path="Array"><c path="after.T"/></c>
			</f>
			<haxe_doc>Finds the first occurrance of `element` and returns all the elements after it.</haxe_doc>
		</after>
		<all public="1" params="T" set="method" line="25" static="1">
			<f a="arr:predicate">
				<c path="Array"><c path="all.T"/></c>
				<f a="">
					<c path="all.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for all elements in the array.</haxe_doc>
		</all>
		<any public="1" params="T" set="method" line="35" static="1">
			<f a="arr:predicate">
				<c path="Array"><c path="any.T"/></c>
				<f a="">
					<c path="any.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for at least one element in the array.</haxe_doc>
		</any>
		<at public="1" params="T" set="method" line="45" static="1">
			<f a="arr:indexes">
				<c path="Array"><c path="at.T"/></c>
				<c path="Array"><x path="Int"/></c>
				<c path="Array"><c path="at.T"/></c>
			</f>
			<haxe_doc>Creates an array of elements from the specified indexes.</haxe_doc>
		</at>
		<before public="1" params="T" get="inline" set="null" line="51" static="1">
			<f a="array:element">
				<c path="Array"><c path="before.T"/></c>
				<c path="before.T"/>
				<c path="Array"><c path="before.T"/></c>
			</f>
			<haxe_doc>Finds the first occurrance of `element` and returns all the elements before it.</haxe_doc>
		</before>
		<compact public="1" params="T" set="method" line="57" static="1">
			<f a="arr">
				<c path="Array"><t path="Null"><c path="compact.T"/></t></c>
				<c path="Array"><c path="compact.T"/></c>
			</f>
			<haxe_doc>Filters out all null elements in the array</haxe_doc>
		</compact>
		<contains public="1" params="T" set="method" line="87" static="1">
			<f a="array:element:?eq" v="::null">
				<c path="Array"><c path="contains.T"/></c>
				<c path="contains.T"/>
				<f a=":">
					<c path="contains.T"/>
					<c path="contains.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `element` is found in the array.

An optional equality function can be passed as the last argument. If not provided, strict equality is adopted.</haxe_doc>
		</contains>
		<cross public="1" params="T" set="method" line="106" static="1">
			<f a="a:b">
				<c path="Array"><c path="cross.T"/></c>
				<c path="Array"><c path="cross.T"/></c>
				<c path="Array"><c path="Array"><c path="cross.T"/></c></c>
			</f>
			<haxe_doc>It returns the cross product between two arrays.

```haxe
var r = [1,2,3].cross([4,5,6]);
trace(r); // [[1,4],[1,5],[1,6],[2,4],[2,5],[2,6],[3,4],[3,5],[3,6]]
```</haxe_doc>
		</cross>
		<crossMulti public="1" params="T" set="method" line="122" static="1">
			<f a="array">
				<c path="Array"><c path="Array"><c path="crossMulti.T"/></c></c>
				<c path="Array"><c path="Array"><c path="crossMulti.T"/></c></c>
			</f>
			<haxe_doc>It produces the cross product of each array element.

```haxe
var r = [[1,2],[3,4],[5,6]].crossMulti();
trace(r); // [[1,3,5],[2,3,5],[1,4,5],[2,4,5],[1,3,6],[2,3,6],[1,4,6],[2,4,6]]
```</haxe_doc>
		</crossMulti>
		<eachPair public="1" params="TIn:TOut" set="method" line="145" static="1">
			<f a="array:callback">
				<c path="Array"><c path="eachPair.TIn"/></c>
				<f a=":">
					<c path="eachPair.TIn"/>
					<c path="eachPair.TIn"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>It allows to iterate an array pairing each element with every other element in the array.

The iteration ends as soon as the `callback` returns `false`.</haxe_doc>
		</eachPair>
		<equals public="1" params="T" set="method" line="156" static="1">
			<f a="a:b:?equality" v="::null">
				<c path="Array"><c path="equals.T"/></c>
				<c path="Array"><c path="equals.T"/></c>
				<f a=":">
					<c path="equals.T"/>
					<c path="equals.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>It compares the lengths and elements of two given arrays and returns `true` if they match.

An optional equality function can be passed as the last argument. If not provided, strict equality is adopted.</haxe_doc>
		</equals>
		<extract public="1" params="T" set="method" line="171" static="1">
			<f a="a:predicate">
				<c path="Array"><c path="extract.T"/></c>
				<f a="">
					<c path="extract.T"/>
					<x path="Bool"/>
				</f>
				<c path="extract.T"/>
			</f>
			<haxe_doc>It finds an element in the array using `predicate` and returns it. The element is also
removed from the original array.

If no element satisfies `predicate` the array is left unmodified and `null` is returned.</haxe_doc>
		</extract>
		<find public="1" params="T" set="method" line="194" static="1">
			<f a="array:predicate">
				<c path="Array"><c path="find.T"/></c>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>It returns the first element of the array that matches the provided predicate function.
If none is found it returns null.</haxe_doc>
		</find>
		<findLast public="1" params="T" set="method" line="205" static="1">
			<f a="array:predicate">
				<c path="Array"><c path="findLast.T"/></c>
				<f a="">
					<c path="findLast.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="findLast.T"/></t>
			</f>
			<haxe_doc>It returns the last element of the array that matches the provided predicate function.
If none is found it returns null.</haxe_doc>
		</findLast>
		<first public="1" params="T" get="inline" set="null" line="219" static="1">
			<f a="array">
				<c path="Array"><c path="first.T"/></c>
				<t path="Null"><c path="first.T"/></t>
			</f>
			<haxe_doc>It returns the first element of the array or null if the array is empty.</haxe_doc>
		</first>
		<flatMap public="1" params="TIn:TOut" get="inline" set="null" line="230" static="1">
			<f a="array:callback">
				<c path="Array"><c path="flatMap.TIn"/></c>
				<f a="">
					<c path="flatMap.TIn"/>
					<c path="Array"><c path="flatMap.TOut"/></c>
				</f>
				<c path="Array"><c path="flatMap.TOut"/></c>
			</f>
			<haxe_doc>It traverses an array of elements. Each element is split using the `callback` function and a 'flattened' array is returned.

```haxe
var chars = ['Hello', 'World'].flatMap(function(s) return s.split(''));
trace(chars); // ['H','e','l','l','o','W','o','r','l','d']
```</haxe_doc>
		</flatMap>
		<flatten public="1" params="T" set="method" line="242" static="1">
			<f a="array">
				<c path="Array"><c path="Array"><c path="flatten.T"/></c></c>
				<c path="Array"><c path="flatten.T"/></c>
			</f>
			<haxe_doc>It takes an array of arrays and 'flattens' it into an array.

```haxe
var arr = [[1,2,3],[4,5,6],[7,8,9]];
trace(arr); // [1,2,3,4,5,6,7,8,9]
```</haxe_doc>
		</flatten>
		<from public="1" params="T" get="inline" set="null" line="252" static="1">
			<f a="array:element">
				<c path="Array"><c path="from.T"/></c>
				<c path="from.T"/>
				<c path="Array"><c path="from.T"/></c>
			</f>
			<haxe_doc>Finds the first occurrance of `element` and returns all the elements from that point on.</haxe_doc>
		</from>
		<head public="1" params="T" get="inline" set="null" line="278" static="1">
			<f a="array">
				<c path="Array"><c path="head.T"/></c>
				<t path="Null"><c path="head.T"/></t>
			</f>
			<haxe_doc>It returns the first element of the array or null if the array is empty. Same as `first`.</haxe_doc>
		</head>
		<ifEmpty public="1" params="T" get="inline" set="null" line="284" static="1">
			<f a="value:alt">
				<c path="Array"><c path="ifEmpty.T"/></c>
				<c path="Array"><c path="ifEmpty.T"/></c>
				<c path="Array"><c path="ifEmpty.T"/></c>
			</f>
			<haxe_doc>`ifEmpty` returns `value` if it is neither `null` or empty, otherwise it returns `alt`</haxe_doc>
		</ifEmpty>
		<initial public="1" params="T" get="inline" set="null" line="290" static="1">
			<f a="array">
				<c path="Array"><c path="initial.T"/></c>
				<c path="Array"><c path="initial.T"/></c>
			</f>
			<haxe_doc>Get all the elements from `array` except for the last one.</haxe_doc>
		</initial>
		<isEmpty public="1" params="T" get="inline" set="null" line="296" static="1">
			<f a="array">
				<c path="Array"><c path="isEmpty.T"/></c>
				<x path="Bool"/>
			</f>
			<haxe_doc>It returns `true` if the array contains zero elements.</haxe_doc>
		</isEmpty>
		<last public="1" params="T" get="inline" set="null" line="302" static="1">
			<f a="array">
				<c path="Array"><c path="last.T"/></c>
				<t path="Null"><c path="last.T"/></t>
			</f>
			<haxe_doc>It returns the last element of the array or null if the array is empty.</haxe_doc>
		</last>
		<mapi public="1" params="TIn:TOut" set="method" line="309" static="1">
			<f a="array:callback">
				<c path="Array"><c path="mapi.TIn"/></c>
				<f a=":">
					<c path="mapi.TIn"/>
					<x path="Int"/>
					<c path="mapi.TOut"/>
				</f>
				<c path="Array"><c path="mapi.TOut"/></c>
			</f>
			<haxe_doc>Same as `Array.map` but it adds a second argument to the `callback` function with the current index value.</haxe_doc>
		</mapi>
		<mapRight public="1" params="TIn:TOut" set="method" line="319" static="1">
			<f a="array:callback">
				<c path="Array"><c path="mapRight.TIn"/></c>
				<f a="">
					<c path="mapRight.TIn"/>
					<c path="mapRight.TOut"/>
				</f>
				<c path="Array"><c path="mapRight.TOut"/></c>
			</f>
			<haxe_doc>Same as `Array.map` but traverses the array from the last to the first element.</haxe_doc>
		</mapRight>
		<order public="1" params="T" set="method" line="330" static="1">
			<f a="array:sort">
				<c path="Array"><c path="order.T"/></c>
				<f a=":">
					<c path="order.T"/>
					<c path="order.T"/>
					<x path="Int"/>
				</f>
				<c path="Array"><c path="order.T"/></c>
			</f>
			<haxe_doc>It works the same as `Array.sort()` but doesn't change the original array and returns a sorted copy it.</haxe_doc>
		</order>
		<pull public="1" params="T" set="method" line="383" static="1">
			<f a="array:toRemove:?equality" v="::null">
				<c path="Array"><c path="pull.T"/></c>
				<c path="Array"><c path="pull.T"/></c>
				<f a=":">
					<c path="pull.T"/>
					<c path="pull.T"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Pulls from `array` all occurrences of all the elements in `toRemove`. Optionally takes
an `equality` function.</haxe_doc>
		</pull>
		<pushIf public="1" params="T" set="method" line="390" static="1">
			<f a="array:condition:value">
				<c path="Array"><c path="pushIf.T"/></c>
				<x path="Bool"/>
				<c path="pushIf.T"/>
				<c path="Array"><c path="pushIf.T"/></c>
			</f>
			<haxe_doc>It pushes `value` onto the array if `condition` is true. Also returns the array for easy method chaining.</haxe_doc>
		</pushIf>
		<reduce public="1" params="TItem:TAcc" get="inline" set="null" line="399" static="1">
			<f a="array:callback:initial">
				<c path="Array"><c path="reduce.TItem"/></c>
				<f a=":">
					<c path="reduce.TAcc"/>
					<c path="reduce.TItem"/>
					<c path="reduce.TAcc"/>
				</f>
				<c path="reduce.TAcc"/>
				<c path="reduce.TAcc"/>
			</f>
			<haxe_doc>It applies a function against an accumulator and each value of the array (from left-to-right) has to reduce it to a single value.</haxe_doc>
		</reduce>
		<resize public="1" params="T" set="method" line="414" static="1">
			<f a="array:length:fill">
				<c path="Array"><c path="resize.T"/></c>
				<x path="Int"/>
				<c path="resize.T"/>
				<c path="Array"><c path="resize.T"/></c>
			</f>
			<haxe_doc>Resizes an array of `T` to an arbitrary length by adding more elements to its end
or by removing extra elements.

Note that the function changes the passed array and doesn't create a copy.</haxe_doc>
		</resize>
		<reducei public="1" params="TItem:TAcc" get="inline" set="null" line="424" static="1">
			<f a="array:callback:initial">
				<c path="Array"><c path="reducei.TItem"/></c>
				<f a="::">
					<c path="reducei.TAcc"/>
					<c path="reducei.TItem"/>
					<x path="Int"/>
					<c path="reducei.TAcc"/>
				</f>
				<c path="reducei.TAcc"/>
				<c path="reducei.TAcc"/>
			</f>
			<haxe_doc>It is the same as `reduce` but with the extra integer `index` parameter.</haxe_doc>
		</reducei>
		<reduceRight public="1" params="TItem:TAcc" get="inline" set="null" line="436" static="1">
			<f a="array:callback:initial">
				<c path="Array"><c path="reduceRight.TItem"/></c>
				<f a=":">
					<c path="reduceRight.TAcc"/>
					<c path="reduceRight.TItem"/>
					<c path="reduceRight.TAcc"/>
				</f>
				<c path="reduceRight.TAcc"/>
				<c path="reduceRight.TAcc"/>
			</f>
			<haxe_doc>Same as `Arrays.reduce` but starting from the last element and traversing to the first</haxe_doc>
		</reduceRight>
		<removeAll public="1" params="T" set="method" line="447" static="1">
			<f a="array:element:?equality" v="::null">
				<c path="Array"><c path="removeAll.T"/></c>
				<c path="removeAll.T"/>
				<f a=":">
					<c path="removeAll.T"/>
					<c path="removeAll.T"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove every occurrance of `element` from `array`. If `equality` is not specified, strict equality
will be adopted.</haxe_doc>
		</removeAll>
		<rest public="1" params="T" get="inline" set="null" line="459" static="1">
			<f a="array">
				<c path="Array"><c path="rest.T"/></c>
				<c path="Array"><c path="rest.T"/></c>
			</f>
			<haxe_doc>Returns all but the first element of the array</haxe_doc>
		</rest>
		<sample public="1" params="T" get="inline" set="null" line="465" static="1">
			<f a="array:n">
				<c path="Array"><c path="sample.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="sample.T"/></c>
			</f>
			<haxe_doc>Returns `n` elements at random from the array. Elements will not be repeated.</haxe_doc>
		</sample>
		<sampleOne public="1" params="T" get="inline" set="null" line="477" static="1">
			<f a="array">
				<c path="Array"><c path="sampleOne.T"/></c>
				<t path="Null"><c path="sampleOne.T"/></t>
			</f>
			<haxe_doc>Returns one element at random from the array or null if the array is empty.</haxe_doc>
		</sampleOne>
		<shuffle public="1" params="T" set="method" line="483" static="1">
			<f a="a">
				<c path="Array"><c path="shuffle.T"/></c>
				<c path="Array"><c path="shuffle.T"/></c>
			</f>
			<haxe_doc>It returns a copy of the array with its elements randomly changed in position.</haxe_doc>
		</shuffle>
		<take public="1" params="T" get="inline" set="null" line="504" static="1">
			<f a="arr:n">
				<c path="Array"><c path="take.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="take.T"/></c>
			</f>
			<haxe_doc>Returns the first `n` elements from the array.</haxe_doc>
		</take>
		<takeLast public="1" params="T" get="inline" set="null" line="509" static="1">
			<f a="arr:n">
				<c path="Array"><c path="takeLast.T"/></c>
				<x path="Int"/>
				<c path="Array"><c path="takeLast.T"/></c>
			</f>
			<haxe_doc>Returns the last `n` elements from the array.</haxe_doc>
		</takeLast>
		<rotate public="1" params="T" set="method" line="516" static="1">
			<f a="arr">
				<c path="Array"><c path="Array"><c path="rotate.T"/></c></c>
				<c path="Array"><c path="Array"><c path="rotate.T"/></c></c>
			</f>
			<haxe_doc>Transforms an array like `[[a0,b0],[a1,b1],[a2,b2]]` into
`[[a0,a1,a2],[b0,b1,b2]]`.</haxe_doc>
		</rotate>
		<zip public="1" params="T1:T2" set="method" line="531" static="1">
			<f a="array1:array2">
				<c path="Array"><c path="zip.T1"/></c>
				<c path="Array"><c path="zip.T2"/></c>
				<c path="Array"><x path="thx.core.Tuple2">
	<c path="zip.T1"/>
	<c path="zip.T2"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of two arrays in an array of `Tuple2`.</haxe_doc>
		</zip>
		<zip3 public="1" params="T1:T2:T3" set="method" line="542" static="1">
			<f a="array1:array2:array3">
				<c path="Array"><c path="zip3.T1"/></c>
				<c path="Array"><c path="zip3.T2"/></c>
				<c path="Array"><c path="zip3.T3"/></c>
				<c path="Array"><x path="thx.core.Tuple3">
	<c path="zip3.T1"/>
	<c path="zip3.T2"/>
	<c path="zip3.T3"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of three arrays in an array of `Tuple3`.</haxe_doc>
		</zip3>
		<zip4 public="1" params="T1:T2:T3:T4" set="method" line="553" static="1">
			<f a="array1:array2:array3:array4">
				<c path="Array"><c path="zip4.T1"/></c>
				<c path="Array"><c path="zip4.T2"/></c>
				<c path="Array"><c path="zip4.T3"/></c>
				<c path="Array"><c path="zip4.T4"/></c>
				<c path="Array"><x path="thx.core.Tuple4">
	<c path="zip4.T1"/>
	<c path="zip4.T2"/>
	<c path="zip4.T3"/>
	<c path="zip4.T4"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of four arrays in an array of `Tuple4`.</haxe_doc>
		</zip4>
		<zip5 public="1" params="T1:T2:T3:T4:T5" set="method" line="564" static="1">
			<f a="array1:array2:array3:array4:array5">
				<c path="Array"><c path="zip5.T1"/></c>
				<c path="Array"><c path="zip5.T2"/></c>
				<c path="Array"><c path="zip5.T3"/></c>
				<c path="Array"><c path="zip5.T4"/></c>
				<c path="Array"><c path="zip5.T5"/></c>
				<c path="Array"><x path="thx.core.Tuple5">
	<c path="zip5.T1"/>
	<c path="zip5.T2"/>
	<c path="zip5.T3"/>
	<c path="zip5.T4"/>
	<c path="zip5.T5"/>
</x></c>
			</f>
			<haxe_doc>Pairs the elements of five arrays in an array of `Tuple5`.</haxe_doc>
		</zip5>
		<unzip public="1" params="T1:T2" set="method" line="575" static="1">
			<f a="array">
				<c path="Array"><x path="thx.core.Tuple2">
	<c path="unzip.T1"/>
	<c path="unzip.T2"/>
</x></c>
				<x path="thx.core.Tuple2">
					<c path="Array"><c path="unzip.T1"/></c>
					<c path="Array"><c path="unzip.T2"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an array of Tuple2<T1, T2> to a Tuple2<Array<T1>, Array<T2>>.]]></haxe_doc>
		</unzip>
		<unzip3 public="1" params="T1:T2:T3" set="method" line="587" static="1">
			<f a="array">
				<c path="Array"><x path="thx.core.Tuple3">
	<c path="unzip3.T1"/>
	<c path="unzip3.T2"/>
	<c path="unzip3.T3"/>
</x></c>
				<x path="thx.core.Tuple3">
					<c path="Array"><c path="unzip3.T1"/></c>
					<c path="Array"><c path="unzip3.T2"/></c>
					<c path="Array"><c path="unzip3.T3"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an array of Tuple3<T1, T2, T3> to a Tuple3<Array<T1>, Array<T2>, Array<T3>>.]]></haxe_doc>
		</unzip3>
		<unzip4 public="1" params="T1:T2:T3:T4" set="method" line="600" static="1">
			<f a="array">
				<c path="Array"><x path="thx.core.Tuple4">
	<c path="unzip4.T1"/>
	<c path="unzip4.T2"/>
	<c path="unzip4.T3"/>
	<c path="unzip4.T4"/>
</x></c>
				<x path="thx.core.Tuple4">
					<c path="Array"><c path="unzip4.T1"/></c>
					<c path="Array"><c path="unzip4.T2"/></c>
					<c path="Array"><c path="unzip4.T3"/></c>
					<c path="Array"><c path="unzip4.T4"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an array of Tuple4<T1, T2, T3, T4> to a Tuple4<Array<T1>, Array<T2>, Array<T3>, Array<T4>>.]]></haxe_doc>
		</unzip4>
		<unzip5 public="1" params="T1:T2:T3:T4:T5" set="method" line="614" static="1">
			<f a="array">
				<c path="Array"><x path="thx.core.Tuple5">
	<c path="unzip5.T1"/>
	<c path="unzip5.T2"/>
	<c path="unzip5.T3"/>
	<c path="unzip5.T4"/>
	<c path="unzip5.T5"/>
</x></c>
				<x path="thx.core.Tuple5">
					<c path="Array"><c path="unzip5.T1"/></c>
					<c path="Array"><c path="unzip5.T2"/></c>
					<c path="Array"><c path="unzip5.T3"/></c>
					<c path="Array"><c path="unzip5.T4"/></c>
					<c path="Array"><c path="unzip5.T5"/></c>
				</x>
			</f>
			<haxe_doc><![CDATA[Unzip an array of Tuple5<T1, T2, T3, T4, T5> to a Tuple5<Array<T1>, Array<T2>, Array<T3>, Array<T4>, Array<T5>>.]]></haxe_doc>
		</unzip5>
		<haxe_doc>`Arrays` provides additional extension methods on top of the `Array` type.

Note that some of the examples imply `using thx.core.Arrays;`.</haxe_doc>
	</class>
	<class path="thx.core.ArrayFloats" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Arrays.hx" module="thx.core.Arrays">
		<average public="1" set="method" line="674" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="Float"/>
			</f>
			<haxe_doc>Finds the average of all the elements in the array.

It returns `NaN` if the array is empty.</haxe_doc>
		</average>
		<compact public="1" set="method" line="681" static="1">
			<f a="arr">
				<c path="Array"><t path="Null"><x path="Float"/></t></c>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>Filters out all null or Math.NaN floats in the array</haxe_doc>
		</compact>
		<max public="1" set="method" line="688" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<t path="Null"><x path="Float"/></t>
			</f>
			<haxe_doc>Finds the max float element in the array.</haxe_doc>
		</max>
		<min public="1" set="method" line="694" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<t path="Null"><x path="Float"/></t>
			</f>
			<haxe_doc>Finds the min float element in the array.</haxe_doc>
		</min>
		<resize public="1" set="method" line="703" static="1">
			<f a="array:length:?fill" v="::0.0f">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Float"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<haxe_doc>Resizes an array of `Float` to an arbitrary length by adding more elements (default is `0.0`)
to its end or by removing extra elements.

Note that the function changes the passed array and doesn't create a copy.</haxe_doc>
		</resize>
		<sum public="1" set="method" line="713" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<t path="Null"><x path="Float"/></t>
			</f>
			<haxe_doc>Finds the sum of all the elements in the array.</haxe_doc>
		</sum>
		<haxe_doc><![CDATA[Helper class for `Array<Float>`.]]></haxe_doc>
	</class>
	<class path="thx.core.ArrayInts" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Arrays.hx" module="thx.core.Arrays">
		<average public="1" set="method" line="724" static="1">
			<f a="arr">
				<c path="Array"><x path="Int"/></c>
				<t path="Null"><x path="Float"/></t>
			</f>
			<haxe_doc>Finds the average of all the elements in the array.</haxe_doc>
		</average>
		<max public="1" set="method" line="730" static="1">
			<f a="arr">
				<c path="Array"><x path="Int"/></c>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Finds the max int element in the array.</haxe_doc>
		</max>
		<min public="1" set="method" line="736" static="1">
			<f a="arr">
				<c path="Array"><x path="Int"/></c>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Finds the min int element in the array.</haxe_doc>
		</min>
		<resize public="1" set="method" line="745" static="1">
			<f a="array:length:?fill" v="::0">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>Resizes an array of `Int` to an arbitrary length by adding more elements (default is `0`)
to its end or by removing extra elements.

Note that the function changes the passed array and doesn't create a copy.</haxe_doc>
		</resize>
		<sum public="1" set="method" line="755" static="1">
			<f a="arr">
				<c path="Array"><x path="Int"/></c>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Finds the sum of all the elements in the array.</haxe_doc>
		</sum>
		<haxe_doc><![CDATA[Helper class for `Array<Int>`.]]></haxe_doc>
	</class>
	<class path="thx.core.ArrayStrings" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Arrays.hx" module="thx.core.Arrays">
		<compact public="1" set="method" line="766" static="1">
			<f a="arr">
				<c path="Array"><c path="String"/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Filters out all null or empty strings in the array</haxe_doc>
		</compact>
		<max public="1" set="method" line="772" static="1">
			<f a="arr">
				<c path="Array"><c path="String"/></c>
				<t path="Null"><c path="String"/></t>
			</f>
			<haxe_doc>Finds the max string element in the array.</haxe_doc>
		</max>
		<min public="1" set="method" line="778" static="1">
			<f a="arr">
				<c path="Array"><c path="String"/></c>
				<t path="Null"><c path="String"/></t>
			</f>
			<haxe_doc>Finds the min string element in the array.</haxe_doc>
		</min>
		<haxe_doc><![CDATA[Helper class for `Array<String>`.]]></haxe_doc>
	</class>
	<class path="thx.core.Dynamics" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Dynamics.hx">
		<equals public="1" params="T1:T2" set="method" line="12" static="1">
			<f a="a:b">
				<c path="equals.T1"/>
				<c path="equals.T2"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Structural and recursive equality.</haxe_doc>
		</equals>
		<clone public="1" set="method" line="165" static="1">
			<f a="v:?cloneInstances" v=":false">
				<d/>
				<x path="Bool"/>
				<d/>
			</f>
			<haxe_doc>Clone the object.

Null values, strings, dates, numbers, enums and functions are immutable so will be returned as is.
Anonymous objects will be created and each field cloned recursively.
Arrays will be recreated and each object cloned recursively.
Class instances will either be cloned, or the reference copied, depending on the value of `cloneInstances`.

@param v The object which will be cloned.
@param cloneInstances If true, class instances will be cloned using `Type.createEmptyInstance` and `Reflect.setField`. If false, class instances will be re-used, not cloned. Default is false.</haxe_doc>
		</clone>
		<haxe_doc>`Dynamics` provides additional extension methods on any type.</haxe_doc>
	</class>
	<class path="thx.core.Error" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Error.hx">
		<fromDynamic public="1" set="method" line="16" static="1">
			<f a="err:?pos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="thx.core.Error"/>
			</f>
			<haxe_doc>It creates an instance of Error from any value.

If `err` is already an instance of `Error`, it is returned and nothing is created.</haxe_doc>
		</fromDynamic>
		<message public="1" set="null">
			<c path="String"/>
			<haxe_doc>The text message associated with the error.</haxe_doc>
		</message>
		<pos public="1" set="null">
			<t path="haxe.PosInfos"/>
			<haxe_doc>The location in code where the error has been instantiated.</haxe_doc>
		</pos>
		<stackItems public="1" set="null">
			<c path="Array"><e path="haxe.StackItem"/></c>
			<haxe_doc>The collected error stack.</haxe_doc>
		</stackItems>
		<toString public="1" set="method" line="57"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="42">
			<f a="message:?stack:?pos" v=":null:null">
				<c path="String"/>
				<c path="Array"><e path="haxe.StackItem"/></c>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The `Error` constructor only requires a steing message. `stack` and `pos` are automatically
populate but can be provided if preferred.</haxe_doc>
		</new>
		<haxe_doc>Defines a generic Error type. When the target platform is JS, `Error` extends the native
`js.Error` type.</haxe_doc>
	</class>
	<class path="thx.core.Functions0" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Functions.hx" module="thx.core.Functions">
		<after public="1" get="inline" set="null" line="15" static="1">
			<f a="callback:n">
				<f a=""><x path="Void"/></f>
				<x path="Int"/>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>Returns a function that invokes `callback` after being being invoked `n` times.</haxe_doc>
		</after>
		<join public="1" get="inline" set="null" line="22" static="1">
			<f a="fa:fb">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>`join` creates a function that calls the 2 functions passed as arguments in sequence.</haxe_doc>
		</join>
		<once public="1" get="inline" set="null" line="32" static="1">
			<f a="f">
				<f a=""><x path="Void"/></f>
				<f a=""><x path="Void"/></f>
			</f>
			<haxe_doc>`once` wraps and returns the argument function. `once` ensures that `f` will be called
at most once even if the returned function is invoked multiple times.</haxe_doc>
		</once>
		<negate public="1" get="inline" set="null" line="42" static="1">
			<f a="callback">
				<f a=""><x path="Bool"/></f>
				<f a=""><x path="Bool"/></f>
			</f>
			<haxe_doc>Wraps `callback` in a function that negates its results.</haxe_doc>
		</negate>
		<times public="1" params="T" get="inline" set="null" line="49" static="1">
			<f a="n:callback">
				<x path="Int"/>
				<f a=""><c path="times.T"/></f>
				<f a=""><c path="Array"><c path="times.T"/></c></f>
			</f>
			<haxe_doc>Creates a function that calls `callback` `n` times and returns an array of results.</haxe_doc>
		</times>
		<timesi public="1" params="T" get="inline" set="null" line="58" static="1">
			<f a="n:callback">
				<x path="Int"/>
				<f a="">
					<x path="Int"/>
					<c path="timesi.T"/>
				</f>
				<f a=""><c path="Array"><c path="timesi.T"/></c></f>
			</f>
			<haxe_doc>Creates a function that calls `callback` `n` times and returns an array of results.

Callback takes an additional argument `index`.</haxe_doc>
		</timesi>
		<haxe_doc>Extension methods for functions with arity 0 (functions that do not take arguments).</haxe_doc>
	</class>
	<class path="thx.core.Functions1" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Functions.hx" module="thx.core.Functions">
		<compose public="1" params="TIn:TRet1:TRet2" get="inline" set="null" line="71" static="1">
			<f a="fa:fb">
				<f a="">
					<c path="compose.TRet2"/>
					<c path="compose.TRet1"/>
				</f>
				<f a="">
					<c path="compose.TIn"/>
					<c path="compose.TRet2"/>
				</f>
				<f a="v">
					<c path="compose.TIn"/>
					<c path="compose.TRet1"/>
				</f>
			</f>
			<haxe_doc>`compose` returns a function that calls the first arguemnt function with the result
of the following one.</haxe_doc>
		</compose>
		<join public="1" params="TIn" get="inline" set="null" line="78" static="1">
			<f a="fa:fb">
				<f a="">
					<c path="join.TIn"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="join.TIn"/>
					<x path="Void"/>
				</f>
				<f a="v">
					<c path="join.TIn"/>
					<x path="Void"/>
				</f>
			</f>
			<haxe_doc>`join` creates a function that calls the 2 functions passed as arguments in sequence
and passes the same argument value to the both of them.</haxe_doc>
		</join>
		<memoize public="1" params="TIn:TOut" set="method" line="90" static="1">
			<f a="callback:?resolver" v=":null">
				<f a="">
					<c path="memoize.TIn"/>
					<c path="memoize.TOut"/>
				</f>
				<f a="">
					<c path="memoize.TIn"/>
					<c path="String"/>
				</f>
				<f a="">
					<c path="memoize.TIn"/>
					<c path="memoize.TOut"/>
				</f>
			</f>
			<haxe_doc>`memoize` wraps `callback` and calls it only once storing the result for future needs.

Computed results are stored in an internal map. The keys to this map are generated by
the resolver function that by default directly converts the first argument into a string.</haxe_doc>
		</memoize>
		<negate public="1" params="T1" get="inline" set="null" line="107" static="1">
			<f a="callback">
				<f a="">
					<c path="negate.T1"/>
					<x path="Bool"/>
				</f>
				<f a="v">
					<c path="negate.T1"/>
					<x path="Bool"/>
				</f>
			</f>
			<haxe_doc>Wraps `callback` in a function that negates its results.</haxe_doc>
		</negate>
		<noop public="1" params="T" set="method" line="114" static="1">
			<f a="_">
				<c path="noop.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>`noop` is a function that has no side effects and doesn't return any value.</haxe_doc>
		</noop>
		<times public="1" params="TIn:TOut" get="inline" set="null" line="119" static="1">
			<f a="n:callback">
				<x path="Int"/>
				<f a="">
					<c path="times.TIn"/>
					<c path="times.TOut"/>
				</f>
				<f a="value">
					<c path="times.TIn"/>
					<c path="Array"><c path="times.TOut"/></c>
				</f>
			</f>
			<haxe_doc>Creates a function that calls `callback` `n` times and returns an array of results.</haxe_doc>
		</times>
		<timesi public="1" params="TIn:TOut" get="inline" set="null" line="128" static="1">
			<f a="n:callback">
				<x path="Int"/>
				<f a=":">
					<c path="timesi.TIn"/>
					<x path="Int"/>
					<c path="timesi.TOut"/>
				</f>
				<f a="value">
					<c path="timesi.TIn"/>
					<c path="Array"><c path="timesi.TOut"/></c>
				</f>
			</f>
			<haxe_doc>Creates a function that calls `callback` `n` times and returns an array of results.

Callback takes an additional argument `index`.</haxe_doc>
		</timesi>
		<swapArguments public="1" params="T1:T2:TReturn" get="inline" set="null" line="135" static="1">
			<f a="callback">
				<f a=":">
					<c path="swapArguments.T1"/>
					<c path="swapArguments.T2"/>
					<c path="swapArguments.TReturn"/>
				</f>
				<f a=":">
					<c path="swapArguments.T2"/>
					<c path="swapArguments.T1"/>
					<c path="swapArguments.TReturn"/>
				</f>
			</f>
			<haxe_doc>Returns a function that behaves the same as `callback` but has its arguments inverted.</haxe_doc>
		</swapArguments>
		<haxe_doc>Extension methods for functions with arity 1 (functions that take exactly 1 argument).</haxe_doc>
	</class>
	<class path="thx.core.Functions2" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Functions.hx" module="thx.core.Functions">
		<memoize public="1" params="T1:T2:TOut" set="method" line="150" static="1">
			<f a="callback:?resolver" v=":null">
				<f a=":">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.TOut"/>
				</f>
				<f a=":">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="String"/>
				</f>
				<f a=":">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.TOut"/>
				</f>
			</f>
			<haxe_doc>`memoize` wraps `callback` and calls it only once storing the result for future needs.

Computed results are stored in an internal map. The keys to this map are generated by
the resolver function that by default directly converts the arguments into a string.</haxe_doc>
		</memoize>
		<negate public="1" params="T1:T2" get="inline" set="null" line="167" static="1">
			<f a="callback">
				<f a=":">
					<c path="negate.T1"/>
					<c path="negate.T2"/>
					<x path="Bool"/>
				</f>
				<f a="v1:v2">
					<c path="negate.T1"/>
					<c path="negate.T2"/>
					<x path="Bool"/>
				</f>
			</f>
			<haxe_doc>Wraps `callback` in a function that negates its results.</haxe_doc>
		</negate>
		<haxe_doc>Helper class for functions that take 2 arguments</haxe_doc>
	</class>
	<class path="thx.core.Functions3" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Functions.hx" module="thx.core.Functions">
		<memoize public="1" params="T1:T2:T3:TOut" set="method" line="182" static="1">
			<f a="callback:?resolver" v=":null">
				<f a="::">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.T3"/>
					<c path="memoize.TOut"/>
				</f>
				<f a="::">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.T3"/>
					<c path="String"/>
				</f>
				<f a="::">
					<c path="memoize.T1"/>
					<c path="memoize.T2"/>
					<c path="memoize.T3"/>
					<c path="memoize.TOut"/>
				</f>
			</f>
			<haxe_doc>`memoize` wraps `callback` and calls it only once storing the result for future needs.

Computed results are stored in an internal map. The keys to this map are generated by
the resolver function that by default directly converts the arguments into a string.</haxe_doc>
		</memoize>
		<negate public="1" params="T1:T2:T3" get="inline" set="null" line="199" static="1">
			<f a="callback">
				<f a="::">
					<c path="negate.T1"/>
					<c path="negate.T2"/>
					<c path="negate.T3"/>
					<x path="Bool"/>
				</f>
				<f a="v1:v2:v3">
					<c path="negate.T1"/>
					<c path="negate.T2"/>
					<c path="negate.T3"/>
					<x path="Bool"/>
				</f>
			</f>
			<haxe_doc>Wraps `callback` in a function that negates its results.</haxe_doc>
		</negate>
		<haxe_doc>Helper class for functions that take 3 arguments</haxe_doc>
	</class>
	<class path="thx.core.Functions" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Functions.hx">
		<constant public="1" params="T" set="method" line="211" static="1">
			<f a="v">
				<c path="constant.T"/>
				<f a=""><c path="constant.T"/></f>
			</f>
			<haxe_doc>`constant` creates a function that always returns the same value.</haxe_doc>
		</constant>
		<equality public="1" params="T" set="method" line="217" static="1">
			<f a="a:b">
				<c path="equality.T"/>
				<c path="equality.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>It provides strict equality between the two arguments `a` and `b`.</haxe_doc>
		</equality>
		<identity public="1" params="T" set="method" line="223" static="1">
			<f a="value">
				<c path="identity.T"/>
				<c path="identity.T"/>
			</f>
			<haxe_doc>The `identity` function returns the value of its argument.</haxe_doc>
		</identity>
		<noop public="1" set="method" line="229" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>`noop` is a function that has no side effects and doesn't return any value.</haxe_doc>
		</noop>
		<haxe_doc>Generic helper for functions.</haxe_doc>
	</class>
	<class path="thx.core.Ints" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Ints.hx">
		<pattern_parse line="11" static="1"><c path="EReg"/></pattern_parse>
		<abs public="1" get="inline" set="null" line="15" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>`abs` returns the absolute integer value of the passed argument.</haxe_doc>
		</abs>
		<canParse public="1" set="method" line="22" static="1">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`canParse` takes a string and return a boolean indicating if the argument can be safely transformed
into a valid integer value.</haxe_doc>
		</canParse>
		<clamp public="1" get="inline" set="null" line="28" static="1">
			<f a="v:min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>`clamp` restricts a value within the specified range.</haxe_doc>
		</clamp>
		<clampSym public="1" get="inline" set="null" line="35" static="1">
			<f a="v:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Like clamp but you only pass one argument (`max`) that is used as the upper limit
and the opposite (additive inverse or `-max`) as the lower limit.</haxe_doc>
		</clampSym>
		<compare public="1" get="inline" set="null" line="43" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Return a comparison value between `a` and `b`. The number is negative if `a` is
greater than `b`, positive if `a` is lesser than `b` or zero if `a` and `b` are
equals.</haxe_doc>
		</compare>
		<interpolate public="1" set="method" line="51" static="1">
			<f a="f:a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Given a value `t` between 0 and 1, it interpolates that value in the range between `a` and `b`.

The returned value is a rounded integer.</haxe_doc>
		</interpolate>
		<isEven public="1" get="inline" set="null" line="57" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isEven` returns `true` if `v` is even, `false` otherwise.</haxe_doc>
		</isEven>
		<isOdd public="1" get="inline" set="null" line="63" static="1">
			<f a="v">
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isOdd` returns `true` if `v` is odd, `false` otherwise.</haxe_doc>
		</isOdd>
		<max public="1" get="inline" set="null" line="69" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>It returns the maximum value between `a` and `b`.</haxe_doc>
		</max>
		<min public="1" get="inline" set="null" line="75" static="1">
			<f a="a:b">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>It returns the minimum value between `a` and `b`.</haxe_doc>
		</min>
		<parse public="1" set="method" line="82" static="1">
			<f a="s:?base" v=":null">
				<c path="String"/>
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Parses a string into an Int value using the provided base. Default base is 16 for strings that begin with
0x (after optional sign) or 10 otherwise.</haxe_doc>
		</parse>
		<random public="1" get="inline" set="null" line="135" static="1">
			<f a="?min:max" v="0:">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Integer random function that includes both upper and lower limits. A roll on a die with
6 sides would be the equivalent to the following:

```haxe
var d6 = Ints.random(1, 6);
```</haxe_doc>
		</random>
		<range public="1" set="method" line="143" static="1">
			<f a="start:?stop:?step" v=":null:1">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>`range` creates an array of integer containing values between  start (included) and stop (excluded)
with a progression set by `step`. A negative value for `step` can be used but in that
case start will need to be a greater value than stop.</haxe_doc>
		</range>
		<BASE line="158" static="1"><c path="String"/></BASE>
		<toString public="1" set="method" line="164" static="1">
			<f a="value:base">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Transform an `Int` value to a `String` using the specified `base`</haxe_doc>
		</toString>
		<sign public="1" get="inline" set="null" line="188" static="1">
			<f a="value">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>`sign` returns `-1` if `value` is a negative number, `1` otherwise.</haxe_doc>
		</sign>
		<wrapCircular public="1" set="method" line="194" static="1">
			<f a="v:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Similar to `wrap`, it works for numbers between 0 and `max`.</haxe_doc>
		</wrapCircular>
		<haxe_doc>Extension methods for integer values.</haxe_doc>
	</class>
	<class path="thx.core.Iterables" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Iterables.hx">
		<all public="1" params="T" set="method" line="16" static="1">
			<f a="it:predicate">
				<t path="Iterable"><c path="all.T"/></t>
				<f a="">
					<c path="all.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for all elements in the iterable.</haxe_doc>
		</all>
		<any public="1" params="T" set="method" line="22" static="1">
			<f a="it:predicate">
				<t path="Iterable"><c path="any.T"/></t>
				<f a="">
					<c path="any.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for at least one element in the iterable.</haxe_doc>
		</any>
		<eachPair public="1" params="TIn:TOut" get="inline" set="null" line="28" static="1">
			<f a="it:handler">
				<t path="Iterable"><c path="eachPair.TIn"/></t>
				<f a=":">
					<c path="eachPair.TIn"/>
					<c path="eachPair.TIn"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.eachPair`.</haxe_doc>
		</eachPair>
		<filter public="1" params="T" get="inline" set="null" line="34" static="1">
			<f a="it:predicate">
				<t path="Iterable"><c path="filter.T"/></t>
				<f a="">
					<c path="filter.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.T"/></c>
			</f>
			<haxe_doc>Refer to `Array.filter`.</haxe_doc>
		</filter>
		<find public="1" params="T:TFind" get="inline" set="null" line="46" static="1">
			<f a="it:predicate">
				<t path="Iterable"><c path="find.T"/></t>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.find`.</haxe_doc>
		</find>
		<first public="1" params="T:TFind" get="inline" set="null" line="52" static="1">
			<f a="it">
				<t path="Iterable"><c path="first.T"/></t>
				<t path="Null"><c path="first.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.first`.</haxe_doc>
		</first>
		<last public="1" params="T:TFind" get="inline" set="null" line="58" static="1">
			<f a="it">
				<t path="Iterable"><c path="last.T"/></t>
				<t path="Null"><c path="last.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.last`.</haxe_doc>
		</last>
		<isEmpty public="1" params="T" get="inline" set="null" line="64" static="1">
			<f a="it">
				<t path="Iterable"><c path="isEmpty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.isEmpty`.</haxe_doc>
		</isEmpty>
		<isIterable public="1" set="method" line="73" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isIterable` checks that the passed argument has all the requirements to be an `Iterable`.

Note that no type checking is performed at runtime, only if a method `iterator` exists regardless
of its signature.</haxe_doc>
		</isIterable>
		<map public="1" params="T:S" get="inline" set="null" line="82" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="map.T"/></t>
				<f a="">
					<c path="map.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Refer to `Array.map`.</haxe_doc>
		</map>
		<mapi public="1" params="T:S" get="inline" set="null" line="88" static="1">
			<f a="it:f">
				<t path="Iterable"><c path="mapi.T"/></t>
				<f a=":">
					<c path="mapi.T"/>
					<x path="Int"/>
					<c path="mapi.S"/>
				</f>
				<c path="Array"><c path="mapi.S"/></c>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.mapi`.</haxe_doc>
		</mapi>
		<order public="1" params="T" get="inline" set="null" line="94" static="1">
			<f a="it:sort">
				<t path="Iterable"><c path="order.T"/></t>
				<f a=":">
					<c path="order.T"/>
					<c path="order.T"/>
					<x path="Int"/>
				</f>
				<c path="Array"><c path="order.T"/></c>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.order`.</haxe_doc>
		</order>
		<reduce public="1" params="TItem:TAcc" get="inline" set="null" line="112" static="1">
			<f a="it:callback:initial">
				<t path="Iterable"><c path="reduce.TItem"/></t>
				<f a=":">
					<c path="reduce.TAcc"/>
					<c path="reduce.TItem"/>
					<c path="reduce.TAcc"/>
				</f>
				<c path="reduce.TAcc"/>
				<c path="reduce.TAcc"/>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.reduce`.</haxe_doc>
		</reduce>
		<reducei public="1" params="TItem:TAcc" get="inline" set="null" line="118" static="1">
			<f a="it:callback:initial">
				<t path="Iterable"><c path="reducei.TItem"/></t>
				<f a="::">
					<c path="reducei.TAcc"/>
					<c path="reducei.TItem"/>
					<x path="Int"/>
					<c path="reducei.TAcc"/>
				</f>
				<c path="reducei.TAcc"/>
				<c path="reducei.TAcc"/>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.reducei`.</haxe_doc>
		</reducei>
		<toArray public="1" params="T" get="inline" set="null" line="124" static="1">
			<f a="it">
				<t path="Iterable"><c path="toArray.T"/></t>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<haxe_doc><![CDATA[`toArray` transforms an `Iterable<T>` into an `Array<T>`.]]></haxe_doc>
		</toArray>
		<haxe_doc>Helper class for `Iterable`. Implementations usually fallback on `thx.core.Iterators`.

For documentation of specific methods refer to the equivalent methods in `thx.core.Arrays`;</haxe_doc>
	</class>
	<class path="thx.core.Iterators" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Iterators.hx">
		<all public="1" params="T" set="method" line="16" static="1">
			<f a="it:predicate">
				<t path="Iterator"><c path="all.T"/></t>
				<f a="">
					<c path="all.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for all elements in the iterator.</haxe_doc>
		</all>
		<any public="1" params="T" set="method" line="26" static="1">
			<f a="it:predicate">
				<t path="Iterator"><c path="any.T"/></t>
				<f a="">
					<c path="any.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
			</f>
			<haxe_doc>Checks if `predicate` returns true for at least one element in the iterator.</haxe_doc>
		</any>
		<eachPair public="1" params="TIn:TOut" set="method" line="36" static="1">
			<f a="it:handler">
				<t path="Iterator"><c path="eachPair.TIn"/></t>
				<f a=":">
					<c path="eachPair.TIn"/>
					<c path="eachPair.TIn"/>
					<x path="Bool"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.eachPair`.</haxe_doc>
		</eachPair>
		<filter public="1" params="TItem" set="method" line="42" static="1">
			<f a="it:predicate">
				<t path="Iterator"><c path="filter.TItem"/></t>
				<f a="">
					<c path="filter.TItem"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="filter.TItem"/></c>
			</f>
			<haxe_doc>Refer to `Array.filter`.</haxe_doc>
		</filter>
		<find public="1" params="T:TFind" set="method" line="58" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="find.T"/></t>
				<f a="">
					<c path="find.T"/>
					<x path="Bool"/>
				</f>
				<t path="Null"><c path="find.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.find`.</haxe_doc>
		</find>
		<first public="1" params="T:TFind" set="method" line="68" static="1">
			<f a="it">
				<t path="Iterator"><c path="first.T"/></t>
				<t path="Null"><c path="first.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.first`.</haxe_doc>
		</first>
		<isEmpty public="1" params="T" get="inline" set="null" line="74" static="1">
			<f a="it">
				<t path="Iterator"><c path="isEmpty.T"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.isEmpty`.</haxe_doc>
		</isEmpty>
		<isIterator public="1" set="method" line="83" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isIterator` checks that the passed argument has all the requirements to be an `Iterator`.

Note that no type checking is performed at runtime, the method only checks that the value
has two fields `next` and `hasNext` and that they are both functions.</haxe_doc>
		</isIterator>
		<last public="1" params="T:TFind" set="method" line="92" static="1">
			<f a="it">
				<t path="Iterator"><c path="last.T"/></t>
				<t path="Null"><c path="last.T"/></t>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.last`.</haxe_doc>
		</last>
		<map public="1" params="T:S" set="method" line="101" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="map.T"/></t>
				<f a="">
					<c path="map.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Refer to `Array.map`.</haxe_doc>
		</map>
		<mapi public="1" params="T:S" set="method" line="111" static="1">
			<f a="it:f">
				<t path="Iterator"><c path="mapi.T"/></t>
				<f a=":">
					<c path="mapi.T"/>
					<x path="Int"/>
					<c path="mapi.S"/>
				</f>
				<c path="Array"><c path="mapi.S"/></c>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.mapi`.</haxe_doc>
		</mapi>
		<order public="1" params="T" set="method" line="122" static="1">
			<f a="it:sort">
				<t path="Iterator"><c path="order.T"/></t>
				<f a=":">
					<c path="order.T"/>
					<c path="order.T"/>
					<x path="Int"/>
				</f>
				<c path="Array"><c path="order.T"/></c>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.order`.</haxe_doc>
		</order>
		<reduce public="1" params="TItem:TAcc" set="method" line="143" static="1">
			<f a="it:callback:initial">
				<t path="Iterator"><c path="reduce.TItem"/></t>
				<f a=":">
					<c path="reduce.TAcc"/>
					<c path="reduce.TItem"/>
					<c path="reduce.TAcc"/>
				</f>
				<c path="reduce.TAcc"/>
				<c path="reduce.TAcc"/>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.reduce`.</haxe_doc>
		</reduce>
		<reducei public="1" params="TItem:TAcc" set="method" line="151" static="1">
			<f a="it:callback:initial">
				<t path="Iterator"><c path="reducei.TItem"/></t>
				<f a="::">
					<c path="reducei.TAcc"/>
					<c path="reducei.TItem"/>
					<x path="Int"/>
					<c path="reducei.TAcc"/>
				</f>
				<c path="reducei.TAcc"/>
				<c path="reducei.TAcc"/>
			</f>
			<haxe_doc>Refer to `thx.core.Arrays.reducei`.</haxe_doc>
		</reducei>
		<toArray public="1" params="T" set="method" line="159" static="1">
			<f a="it">
				<t path="Iterator"><c path="toArray.T"/></t>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<haxe_doc><![CDATA[`toArray` transforms an `Iterator<T>` into an `Array<T>`.]]></haxe_doc>
		</toArray>
		<haxe_doc>Helper class to work with `Iterator`.

For documentation of specific methods refer to the equivalent methods in `thx.core.Arrays`;</haxe_doc>
	</class>
	<class path="thx.core.Maps" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Maps.hx">
		<tuples public="1" params="TKey:TValue" set="method" line="19" static="1">
			<f a="map">
				<c path="IMap">
					<c path="tuples.TKey"/>
					<c path="tuples.TValue"/>
				</c>
				<c path="Array"><x path="thx.core.Tuple2">
	<c path="tuples.TKey"/>
	<c path="tuples.TValue"/>
</x></c>
			</f>
			<haxe_doc><![CDATA[Converts a Map<TKey, TValue> into an Array<Tuple2<TKey, TValue>>]]></haxe_doc>
		</tuples>
		<mapToObject public="1" params="T" set="method" line="27" static="1">
			<f a="map">
				<x path="Map">
					<c path="String"/>
					<c path="mapToObject.T"/>
				</x>
				<a/>
			</f>
			<haxe_doc><![CDATA[`mapToObject` transforms a `Map<String, T>` into an anonymous object.]]></haxe_doc>
		</mapToObject>
		<isMap public="1" get="inline" set="null" line="36" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if a value is of any type of Map. Equivalent to `Std.is(v, IMap)`.</haxe_doc>
		</isMap>
		<haxe_doc>Extension methods for Maps</haxe_doc>
	</class>
	<enum path="thx.core.Nil" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Nil.hx">
		<nil><haxe_doc>`nil` is the only value available for `Nil` and it is a constant value.</haxe_doc></nil>
		<haxe_doc>A runtime value that describes the absence of a value.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="thx.core.Objects" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Objects.hx">
		<isEmpty public="1" get="inline" set="null" line="14" static="1">
			<f a="o">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isEmpty` returns `true` if the object doesn't have any field.</haxe_doc>
		</isEmpty>
		<exists public="1" get="inline" set="null" line="20" static="1">
			<f a="o:name">
				<a/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`exists` returns true if `o` contains a field named `name`.</haxe_doc>
		</exists>
		<fields public="1" get="inline" set="null" line="26" static="1">
			<f a="o">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>`fields` returns an array of string containing the field names of the argument object.</haxe_doc>
		</fields>
		<merge public="1" set="method" line="35" static="1">
			<f a="to:from:?replacef" v="::null">
				<a/>
				<a/>
				<f a="::">
					<c path="String"/>
					<d/>
					<d/>
					<d/>
				</f>
				<a/>
			</f>
			<haxe_doc>Copies the values from the fields of `from` to `to`. If `to` already contains those fields, then it replace
those values with the return value of the function `replacef`.

If not set, `replacef` always returns the value from the `from` object.</haxe_doc>
		</merge>
		<copyTo public="1" set="method" line="53" static="1">
			<f a="src:dst:?cloneInstances" v="::false">
				<a/>
				<a/>
				<x path="Bool"/>
				<a/>
			</f>
			<haxe_doc>`copyTo` copies the fields from `src` to `dst` using `Reflect.setField()` and `Dynamics.clone()`.
Anonymous objects are entered into and copied recursively.</haxe_doc>
		</copyTo>
		<clone public="1" params="T" set="method" line="69" static="1">
			<f a="src:?cloneInstances" v=":false">
				<c path="clone.T"/>
				<x path="Bool"/>
				<c path="clone.T"/>
			</f>
			<haxe_doc>Clone the current object by creating a new object and using `copyTo` to clone each field.</haxe_doc>
		</clone>
		<objectToMap public="1" set="method" line="77" static="1">
			<f a="o">
				<a/>
				<x path="Map">
					<c path="String"/>
					<d/>
				</x>
			</f>
			<haxe_doc><![CDATA[`objectToMap` transforms an anonymous object into an instance of `Map<String, Dynamic>`.]]></haxe_doc>
		</objectToMap>
		<size public="1" get="inline" set="null" line="86" static="1">
			<f a="o">
				<a/>
				<x path="Int"/>
			</f>
			<haxe_doc>`size` returns how many fields are present in the object.</haxe_doc>
		</size>
		<values public="1" get="inline" set="null" line="92" static="1">
			<f a="o">
				<a/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>`values` returns an array of dynamic values containing the values of each field in the argument object.</haxe_doc>
		</values>
		<tuples public="1" set="method" line="99" static="1">
			<f a="o">
				<a/>
				<c path="Array"><x path="thx.core.Tuple2">
	<c path="String"/>
	<d/>
</x></c>
			</f>
			<haxe_doc><![CDATA[Converts an object into an Array<Tuple2<String, Dynamic>> where the left value (_0) of the
tuple is the field name and the right value (_1) is the field value.]]></haxe_doc>
		</tuples>
		<haxe_doc>Helper methods for generic objects.</haxe_doc>
	</class>
	<class path="thx.core.Strings" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Strings.hx">
		<after public="1" set="method" line="14" static="1">
			<f a="value:searchFor">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`after` searches for the first occurrance of `searchFor` and returns the text after that.

If `searchFor` is not found, an empty string is returned.</haxe_doc>
		</after>
		<capitalize public="1" get="inline" set="null" line="25" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`capitalize` returns a string with the first character convert to upper case.</haxe_doc>
		</capitalize>
		<capitalizeWords public="1" set="method" line="32" static="1">
			<f a="value:?whiteSpaceOnly" v=":false">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Capitalize the first letter of every word in `value`. If `whiteSpaceOnly` is set to `true`
the process is limited to whitespace separated words.</haxe_doc>
		</capitalizeWords>
		<collapse public="1" set="method" line="52" static="1">
			<f a="value">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>It cleans up all the whitespaces in the passed `value`. `collapse` does the following:

  - remove trailing/leading whitespaces
  - within the string, it collapses seqeunces of whitespaces into a single space character

For whitespaces in this description, it is intended to be anything that is matched by the regular expression `\s`.</haxe_doc>
		</collapse>
		<compare public="1" set="method" line="59" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
			</f>
			<haxe_doc>It compares to string and it returns a negative number if `a` is inferior to `b`, zero if they are the same,
or otherwise a positive non-sero number.</haxe_doc>
		</compare>
		<contains public="1" get="inline" set="null" line="65" static="1">
			<f a="s:test">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`contains` returns `true` is `s` contains one or more occurrences of `test`.</haxe_doc>
		</contains>
		<dasherize public="1" set="method" line="71" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`dasherize` replaces all the occurrances of `_` with `-`;</haxe_doc>
		</dasherize>
		<ellipsis public="1" set="method" line="82" static="1">
			<f a="s:?maxlen:?symbol" v=":20:'...'">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`ellipsis` truncates `s` at len `maxlen` replaces the last characters with the content
of `symbol`.

```haxe
'thx is a nice linrary'.ellipsis(7); // returns 'thx is ...'
```</haxe_doc>
		</ellipsis>
		<filter public="1" set="method" line="92" static="1">
			<f a="s:predicate">
				<c path="String"/>
				<f a="">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>`filter` applies `predicate` character by character to `s` and it returns a filtered
version of the string.</haxe_doc>
		</filter>
		<filterCharcode public="1" set="method" line="100" static="1">
			<f a="s:predicate">
				<c path="String"/>
				<f a="">
					<x path="Int"/>
					<x path="Bool"/>
				</f>
				<c path="String"/>
			</f>
			<haxe_doc>Same as `filter` but `predicate` operates on integer char codes instead of string characters.</haxe_doc>
		</filterCharcode>
		<from public="1" set="method" line="111" static="1">
			<f a="value:searchFor">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`from` searches for the first occurrance of `searchFor` and returns the text from that point on.

If `searchFor` is not found, an empty string is returned.</haxe_doc>
		</from>
		<humanize public="1" set="method" line="122" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Works the same as `underscore` but also replaces underscores with whitespaces.</haxe_doc>
		</humanize>
		<isAlphaNum public="1" get="inline" set="null" line="128" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isAlphaNum` returns `true` if the string only contains alpha-numeric characters.</haxe_doc>
		</isAlphaNum>
		<isLowerCase public="1" set="method" line="139" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the value string is composed of only lower cased characters
or case neutral characters.</haxe_doc>
		</isLowerCase>
		<isUpperCase public="1" set="method" line="146" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if the value string is composed of only upper cased characters
or case neutral characters.</haxe_doc>
		</isUpperCase>
		<ifEmpty public="1" get="inline" set="null" line="152" static="1">
			<f a="value:alt">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`ifEmpty` returns `value` if it is neither `null` or empty, otherwise it returns `alt`</haxe_doc>
		</ifEmpty>
		<isDigitsOnly public="1" get="inline" set="null" line="158" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isDigitsOnly` returns `true` if the string only contains digits.</haxe_doc>
		</isDigitsOnly>
		<isEmpty public="1" set="method" line="168" static="1">
			<f a="value">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isEmpty` returns true if either `value` is null or is an empty string.</haxe_doc>
		</isEmpty>
		<iterator public="1" set="method" line="174" static="1">
			<f a="s">
				<c path="String"/>
				<t path="Iterator"><c path="String"/></t>
			</f>
			<haxe_doc>It returns an iterator holding in sequence one character of the string per iteration.</haxe_doc>
		</iterator>
		<map public="1" params="T" set="method" line="180" static="1">
			<f a="value:callback">
				<c path="String"/>
				<f a="">
					<c path="String"/>
					<c path="map.T"/>
				</f>
				<c path="Array"><c path="map.T"/></c>
			</f>
			<haxe_doc>It maps a string character by character using `callback`.</haxe_doc>
		</map>
		<remove public="1" get="inline" set="null" line="186" static="1">
			<f a="value:toremove">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>If present, it removes all the occurrencies of `toremove` from `value`.</haxe_doc>
		</remove>
		<removeAfter public="1" set="method" line="193" static="1">
			<f a="value:toremove">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>If present, it removes the `toremove` text from the end of `value`.</haxe_doc>
		</removeAfter>
		<removeBefore public="1" set="method" line="199" static="1">
			<f a="value:toremove">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>If present, it removes the `toremove` text from the beginning of `value`.</haxe_doc>
		</removeBefore>
		<repeat public="1" set="method" line="209" static="1">
			<f a="s:times">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>`repeat` builds a new string by repeating the argument `s`, n `times`.

```haxe
'Xy'.repeat(3); // generates 'XyXyXy'
```</haxe_doc>
		</repeat>
		<reverse public="1" set="method" line="215" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a new string whose characters are in reverse order.</haxe_doc>
		</reverse>
		<stripTags public="1" set="method" line="225" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`stripTags` removes any HTML/XML markup from the string leaving only the concatenation
of the existing text nodes.</haxe_doc>
		</stripTags>
		<surround public="1" get="inline" set="null" line="236" static="1">
			<f a="s:left:?right" v="::null">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Surrounds a string with the contents of `left` and `right`. If `right` is omitted,
`left` will be used on both sides;</haxe_doc>
		</surround>
		<toArray public="1" get="inline" set="null" line="242" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>It transforms a string into an `Array` of characters.</haxe_doc>
		</toArray>
		<toCharcodeArray public="1" get="inline" set="null" line="248" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</f>
			<haxe_doc>It transforms a string into an `Array` of char codes in integer format.</haxe_doc>
		</toCharcodeArray>
		<toChunks public="1" set="method" line="257" static="1">
			<f a="s:len">
				<c path="String"/>
				<x path="Int"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array of `String` whose elements are equally long (using `len`). If the string `s`
is not exactly divisible by `len` the last element of the array will be shorter.</haxe_doc>
		</toChunks>
		<trimChars public="1" get="inline" set="null" line="269" static="1">
			<f a="value:charlist">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`trimChars` removes from the beginning and the end of the string any character that is present in `charlist`.</haxe_doc>
		</trimChars>
		<trimCharsLeft public="1" set="method" line="279" static="1">
			<f a="value:charlist">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`trimCharsLeft` removes from the beginning of the string any character that is present in `charlist`.</haxe_doc>
		</trimCharsLeft>
		<trimCharsRight public="1" set="method" line="296" static="1">
			<f a="value:charlist">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`trimCharsRight` removes from the end of the string any character that is present in `charlist`.</haxe_doc>
		</trimCharsRight>
		<underscore public="1" set="method" line="318" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`underscore` finds UpperCase characters and turns them into LowerCase and prepends them with a whtiespace.
Sequences of more than one UpperCase character are left untouched.</haxe_doc>
		</underscore>
		<upTo public="1" set="method" line="331" static="1">
			<f a="value:searchFor">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`upTo` searches for the first occurrance of `searchFor` and returns the text up to that point.

If `searchFor` is not found, the entire string is returned.</haxe_doc>
		</upTo>
		<wrapColumns public="1" set="method" line="344" static="1">
			<f a="s:?columns:?indent:?newline" v=":78:'':'\n'">
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>`wrapColumns` splits a long string into lines that are at most `columns` long.

Words whose length exceeds `columns` are not split.</haxe_doc>
		</wrapColumns>
		<upperMatch set="method" line="351" static="1"><f a="re">
	<c path="EReg"/>
	<c path="String"/>
</f></upperMatch>
		<wrapLine set="method" line="355" static="1"><f a="s:columns:indent:newline">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></wrapLine>
		<UCWORDS line="386" static="1"><c path="EReg"/></UCWORDS>
		<UCWORDSWS line="388" static="1"><c path="EReg"/></UCWORDSWS>
		<ALPHANUM line="389" static="1"><c path="EReg"/></ALPHANUM>
		<DIGITS line="390" static="1"><c path="EReg"/></DIGITS>
		<STRIPTAGS line="391" static="1"><c path="EReg"/></STRIPTAGS>
		<WSG line="393" static="1"><c path="EReg"/></WSG>
		<SPLIT_LINES line="394" static="1"><c path="EReg"/></SPLIT_LINES>
		<haxe_doc>Extension methods for strings.</haxe_doc>
	</class>
	<typedef path="thx.core.HaxeStringTools" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Strings.hx" module="thx.core.Strings">
		<c path="StringTools"/>
		<haxe_doc>Alias of `StringTools`, included so mixins work with `using thx.core.Strings;`</haxe_doc>
	</typedef>
	<abstract path="thx.core.Tuple0" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" module="thx.core.Tuple">
		<from><icast field="nilToTuple"><e path="thx.core.Nil"/></icast></from>
		<this><e path="thx.core.Nil"/></this>
		<to><icast field="toNil"><e path="thx.core.Nil"/></icast></to>
		<haxe_doc>`Tuple0` is a tuple with no values. It maps directly to `Nil.nil`.</haxe_doc>
		<impl><class path="thx.core._Tuple.Tuple0_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" private="1" module="thx.core.Tuple">
	<_new public="1" get="inline" set="null" line="10" static="1">
		<f a=""><e path="thx.core.Nil"/></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple0`.</haxe_doc>
	</_new>
	<with public="1" params="T0" get="inline" set="null" line="17" static="1">
		<f a="this:v">
			<e path="thx.core.Nil"/>
			<c path="with.T0"/>
			<x path="thx.core.Tuple1"><c path="with.T0"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="23" static="1">
		<f a="this">
			<e path="thx.core.Nil"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
	<toNil public="1" get="inline" set="null" line="29" static="1">
		<f a="this">
			<e path="thx.core.Nil"/>
			<e path="thx.core.Nil"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc>Cast to `Nil`.</haxe_doc>
	</toNil>
	<nilToTuple public="1" get="inline" set="null" line="35" static="1">
		<f a="v">
			<e path="thx.core.Nil"/>
			<x path="thx.core.Tuple0"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Creates `Tuple0` from `Nil`.</haxe_doc>
	</nilToTuple>
</class></impl>
	</abstract>
	<class path="thx.core._Tuple.Tuple0_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" private="1" module="thx.core.Tuple">
		<_new public="1" get="inline" set="null" line="10" static="1">
			<f a=""><e path="thx.core.Nil"/></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple0`.</haxe_doc>
		</_new>
		<with public="1" params="T0" get="inline" set="null" line="17" static="1">
			<f a="this:v">
				<e path="thx.core.Nil"/>
				<c path="with.T0"/>
				<x path="thx.core.Tuple1"><c path="with.T0"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="23" static="1">
			<f a="this">
				<e path="thx.core.Nil"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
		<toNil public="1" get="inline" set="null" line="29" static="1">
			<f a="this">
				<e path="thx.core.Nil"/>
				<e path="thx.core.Nil"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc>Cast to `Nil`.</haxe_doc>
		</toNil>
		<nilToTuple public="1" get="inline" set="null" line="35" static="1">
			<f a="v">
				<e path="thx.core.Nil"/>
				<x path="thx.core.Tuple0"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Creates `Tuple0` from `Nil`.</haxe_doc>
		</nilToTuple>
	</class>
	<abstract path="thx.core.Tuple1" params="T0" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" module="thx.core.Tuple">
		<from><icast><c path="thx.core.Tuple1.T0"/></icast></from>
		<this><c path="thx.core.Tuple1.T0"/></this>
		<to><icast><c path="thx.core.Tuple1.T0"/></icast></to>
		<haxe_doc>`Tuple1` is a tuple with one value. It maps directly to its own T0 types.</haxe_doc>
		<impl><class path="thx.core._Tuple.Tuple1_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" private="1" module="thx.core.Tuple">
	<_new public="1" get="inline" set="null" line="46" static="1">
		<f a="_0">
			<c path="thx.core.Tuple1.T0"/>
			<c path="thx.core.Tuple1.T0"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple1` passing a value T as an argument.</haxe_doc>
	</_new>
	<_0 public="1" get="accessor" set="null" static="1">
		<c path="thx.core.Tuple1.T0"/>
		<meta><m n=":impl"/></meta>
	</_0>
	<get__0 get="inline" set="null" line="49" static="1">
		<f a="this">
			<c path="thx.core.Tuple1.T0"/>
			<c path="thx.core.Tuple1.T0"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get__0>
	<with public="1" params="T1" get="inline" set="null" line="55" static="1">
		<f a="this:v">
			<c path="thx.core.Tuple1.T0"/>
			<c path="with.T1"/>
			<x path="thx.core.Tuple2">
				<c path="thx.core.Tuple1.T0"/>
				<c path="with.T1"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="61" static="1">
		<f a="this">
			<c path="thx.core.Tuple1.T0"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
</class></impl>
	</abstract>
	<class path="thx.core._Tuple.Tuple1_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" private="1" module="thx.core.Tuple">
		<_new public="1" get="inline" set="null" line="46" static="1">
			<f a="_0">
				<c path="thx.core.Tuple1.T0"/>
				<c path="thx.core.Tuple1.T0"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple1` passing a value T as an argument.</haxe_doc>
		</_new>
		<_0 public="1" get="accessor" set="null" static="1">
			<c path="thx.core.Tuple1.T0"/>
			<meta><m n=":impl"/></meta>
		</_0>
		<get__0 get="inline" set="null" line="49" static="1">
			<f a="this">
				<c path="thx.core.Tuple1.T0"/>
				<c path="thx.core.Tuple1.T0"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get__0>
		<with public="1" params="T1" get="inline" set="null" line="55" static="1">
			<f a="this:v">
				<c path="thx.core.Tuple1.T0"/>
				<c path="with.T1"/>
				<x path="thx.core.Tuple2">
					<c path="thx.core.Tuple1.T0"/>
					<c path="with.T1"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="61" static="1">
			<f a="this">
				<c path="thx.core.Tuple1.T0"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
	</class>
	<abstract path="thx.core.Tuple2" params="T0:T1" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" module="thx.core.Tuple">
		<from><icast><a>
	<_1><c path="thx.core.Tuple2.T1"/></_1>
	<_0><c path="thx.core.Tuple2.T0"/></_0>
</a></icast></from>
		<this><a>
	<_1><c path="thx.core.Tuple2.T1"/></_1>
	<_0><c path="thx.core.Tuple2.T0"/></_0>
</a></this>
		<to><icast><a>
	<_1><c path="thx.core.Tuple2.T1"/></_1>
	<_0><c path="thx.core.Tuple2.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple2` is a tuple with two values. It maps to an anonymous object with fields `_0` and `_1`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
</m></meta>
		<impl><class path="thx.core._Tuple.Tuple2_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" private="1" module="thx.core.Tuple">
	<_new public="1" get="inline" set="null" line="73" static="1">
		<f a="_0:_1">
			<c path="thx.core.Tuple2.T0"/>
			<c path="thx.core.Tuple2.T1"/>
			<a>
				<_1><c path="thx.core.Tuple2.T1"/></_1>
				<_0><c path="thx.core.Tuple2.T0"/></_0>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple2` the 2 required value.</haxe_doc>
	</_new>
	<left public="1" get="accessor" set="null" static="1">
		<c path="thx.core.Tuple2.T0"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Alias for `_0`.</haxe_doc>
	</left>
	<right public="1" get="accessor" set="null" static="1">
		<c path="thx.core.Tuple2.T1"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Alias for `_1`.</haxe_doc>
	</right>
	<get_left get="inline" set="null" line="86" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.core.Tuple2.T1"/></_1>
				<_0><c path="thx.core.Tuple2.T0"/></_0>
			</a>
			<c path="thx.core.Tuple2.T0"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_left>
	<get_right get="inline" set="null" line="87" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.core.Tuple2.T1"/></_1>
				<_0><c path="thx.core.Tuple2.T0"/></_0>
			</a>
			<c path="thx.core.Tuple2.T1"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_right>
	<flip public="1" get="inline" set="null" line="92" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.core.Tuple2.T1"/></_1>
				<_0><c path="thx.core.Tuple2.T0"/></_0>
			</a>
			<x path="thx.core.Tuple2">
				<c path="thx.core.Tuple2.T1"/>
				<c path="thx.core.Tuple2.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="99" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.core.Tuple2.T1"/></_1>
				<_0><c path="thx.core.Tuple2.T0"/></_0>
			</a>
			<x path="thx.core.Tuple1"><c path="thx.core.Tuple2.T1"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="106" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.core.Tuple2.T1"/></_1>
				<_0><c path="thx.core.Tuple2.T0"/></_0>
			</a>
			<x path="thx.core.Tuple1"><c path="thx.core.Tuple2.T0"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<with public="1" params="T2" get="inline" set="null" line="113" static="1">
		<f a="this:v">
			<a>
				<_1><c path="thx.core.Tuple2.T1"/></_1>
				<_0><c path="thx.core.Tuple2.T0"/></_0>
			</a>
			<c path="with.T2"/>
			<x path="thx.core.Tuple3">
				<c path="thx.core.Tuple2.T0"/>
				<c path="thx.core.Tuple2.T1"/>
				<c path="with.T2"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="119" static="1">
		<f a="this">
			<a>
				<_1><c path="thx.core.Tuple2.T1"/></_1>
				<_0><c path="thx.core.Tuple2.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
</class></impl>
	</abstract>
	<class path="thx.core._Tuple.Tuple2_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" private="1" module="thx.core.Tuple">
		<_new public="1" get="inline" set="null" line="73" static="1">
			<f a="_0:_1">
				<c path="thx.core.Tuple2.T0"/>
				<c path="thx.core.Tuple2.T1"/>
				<a>
					<_1><c path="thx.core.Tuple2.T1"/></_1>
					<_0><c path="thx.core.Tuple2.T0"/></_0>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple2` the 2 required value.</haxe_doc>
		</_new>
		<left public="1" get="accessor" set="null" static="1">
			<c path="thx.core.Tuple2.T0"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Alias for `_0`.</haxe_doc>
		</left>
		<right public="1" get="accessor" set="null" static="1">
			<c path="thx.core.Tuple2.T1"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Alias for `_1`.</haxe_doc>
		</right>
		<get_left get="inline" set="null" line="86" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.core.Tuple2.T1"/></_1>
					<_0><c path="thx.core.Tuple2.T0"/></_0>
				</a>
				<c path="thx.core.Tuple2.T0"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_left>
		<get_right get="inline" set="null" line="87" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.core.Tuple2.T1"/></_1>
					<_0><c path="thx.core.Tuple2.T0"/></_0>
				</a>
				<c path="thx.core.Tuple2.T1"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_right>
		<flip public="1" get="inline" set="null" line="92" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.core.Tuple2.T1"/></_1>
					<_0><c path="thx.core.Tuple2.T0"/></_0>
				</a>
				<x path="thx.core.Tuple2">
					<c path="thx.core.Tuple2.T1"/>
					<c path="thx.core.Tuple2.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="99" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.core.Tuple2.T1"/></_1>
					<_0><c path="thx.core.Tuple2.T0"/></_0>
				</a>
				<x path="thx.core.Tuple1"><c path="thx.core.Tuple2.T1"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="106" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.core.Tuple2.T1"/></_1>
					<_0><c path="thx.core.Tuple2.T0"/></_0>
				</a>
				<x path="thx.core.Tuple1"><c path="thx.core.Tuple2.T0"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<with public="1" params="T2" get="inline" set="null" line="113" static="1">
			<f a="this:v">
				<a>
					<_1><c path="thx.core.Tuple2.T1"/></_1>
					<_0><c path="thx.core.Tuple2.T0"/></_0>
				</a>
				<c path="with.T2"/>
				<x path="thx.core.Tuple3">
					<c path="thx.core.Tuple2.T0"/>
					<c path="thx.core.Tuple2.T1"/>
					<c path="with.T2"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="119" static="1">
			<f a="this">
				<a>
					<_1><c path="thx.core.Tuple2.T1"/></_1>
					<_0><c path="thx.core.Tuple2.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
	</class>
	<abstract path="thx.core.Tuple3" params="T0:T1:T2" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" module="thx.core.Tuple">
		<from><icast><a>
	<_2><c path="thx.core.Tuple3.T2"/></_2>
	<_1><c path="thx.core.Tuple3.T1"/></_1>
	<_0><c path="thx.core.Tuple3.T0"/></_0>
</a></icast></from>
		<this><a>
	<_2><c path="thx.core.Tuple3.T2"/></_2>
	<_1><c path="thx.core.Tuple3.T1"/></_1>
	<_0><c path="thx.core.Tuple3.T0"/></_0>
</a></this>
		<to><icast><a>
	<_2><c path="thx.core.Tuple3.T2"/></_2>
	<_1><c path="thx.core.Tuple3.T1"/></_1>
	<_0><c path="thx.core.Tuple3.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple3` is a tuple with three values. It maps to an anonymous object with fields `_0`, `_1`, and `_2`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
	<e>_2</e>
</m></meta>
		<impl><class path="thx.core._Tuple.Tuple3_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" private="1" module="thx.core.Tuple">
	<_new public="1" get="inline" set="null" line="131" static="1">
		<f a="_0:_1:_2">
			<c path="thx.core.Tuple3.T0"/>
			<c path="thx.core.Tuple3.T1"/>
			<c path="thx.core.Tuple3.T2"/>
			<a>
				<_2><c path="thx.core.Tuple3.T2"/></_2>
				<_1><c path="thx.core.Tuple3.T1"/></_1>
				<_0><c path="thx.core.Tuple3.T0"/></_0>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple3` the 3 required value.</haxe_doc>
	</_new>
	<flip public="1" get="inline" set="null" line="137" static="1">
		<f a="this">
			<a>
				<_2><c path="thx.core.Tuple3.T2"/></_2>
				<_1><c path="thx.core.Tuple3.T1"/></_1>
				<_0><c path="thx.core.Tuple3.T0"/></_0>
			</a>
			<x path="thx.core.Tuple3">
				<c path="thx.core.Tuple3.T2"/>
				<c path="thx.core.Tuple3.T1"/>
				<c path="thx.core.Tuple3.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="144" static="1">
		<f a="this">
			<a>
				<_2><c path="thx.core.Tuple3.T2"/></_2>
				<_1><c path="thx.core.Tuple3.T1"/></_1>
				<_0><c path="thx.core.Tuple3.T0"/></_0>
			</a>
			<x path="thx.core.Tuple2">
				<c path="thx.core.Tuple3.T1"/>
				<c path="thx.core.Tuple3.T2"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="151" static="1">
		<f a="this">
			<a>
				<_2><c path="thx.core.Tuple3.T2"/></_2>
				<_1><c path="thx.core.Tuple3.T1"/></_1>
				<_0><c path="thx.core.Tuple3.T0"/></_0>
			</a>
			<x path="thx.core.Tuple2">
				<c path="thx.core.Tuple3.T0"/>
				<c path="thx.core.Tuple3.T1"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<with public="1" params="T3" get="inline" set="null" line="158" static="1">
		<f a="this:v">
			<a>
				<_2><c path="thx.core.Tuple3.T2"/></_2>
				<_1><c path="thx.core.Tuple3.T1"/></_1>
				<_0><c path="thx.core.Tuple3.T0"/></_0>
			</a>
			<c path="with.T3"/>
			<x path="thx.core.Tuple4">
				<c path="thx.core.Tuple3.T0"/>
				<c path="thx.core.Tuple3.T1"/>
				<c path="thx.core.Tuple3.T2"/>
				<c path="with.T3"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="164" static="1">
		<f a="this">
			<a>
				<_2><c path="thx.core.Tuple3.T2"/></_2>
				<_1><c path="thx.core.Tuple3.T1"/></_1>
				<_0><c path="thx.core.Tuple3.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
</class></impl>
	</abstract>
	<class path="thx.core._Tuple.Tuple3_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" private="1" module="thx.core.Tuple">
		<_new public="1" get="inline" set="null" line="131" static="1">
			<f a="_0:_1:_2">
				<c path="thx.core.Tuple3.T0"/>
				<c path="thx.core.Tuple3.T1"/>
				<c path="thx.core.Tuple3.T2"/>
				<a>
					<_2><c path="thx.core.Tuple3.T2"/></_2>
					<_1><c path="thx.core.Tuple3.T1"/></_1>
					<_0><c path="thx.core.Tuple3.T0"/></_0>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple3` the 3 required value.</haxe_doc>
		</_new>
		<flip public="1" get="inline" set="null" line="137" static="1">
			<f a="this">
				<a>
					<_2><c path="thx.core.Tuple3.T2"/></_2>
					<_1><c path="thx.core.Tuple3.T1"/></_1>
					<_0><c path="thx.core.Tuple3.T0"/></_0>
				</a>
				<x path="thx.core.Tuple3">
					<c path="thx.core.Tuple3.T2"/>
					<c path="thx.core.Tuple3.T1"/>
					<c path="thx.core.Tuple3.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="144" static="1">
			<f a="this">
				<a>
					<_2><c path="thx.core.Tuple3.T2"/></_2>
					<_1><c path="thx.core.Tuple3.T1"/></_1>
					<_0><c path="thx.core.Tuple3.T0"/></_0>
				</a>
				<x path="thx.core.Tuple2">
					<c path="thx.core.Tuple3.T1"/>
					<c path="thx.core.Tuple3.T2"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="151" static="1">
			<f a="this">
				<a>
					<_2><c path="thx.core.Tuple3.T2"/></_2>
					<_1><c path="thx.core.Tuple3.T1"/></_1>
					<_0><c path="thx.core.Tuple3.T0"/></_0>
				</a>
				<x path="thx.core.Tuple2">
					<c path="thx.core.Tuple3.T0"/>
					<c path="thx.core.Tuple3.T1"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<with public="1" params="T3" get="inline" set="null" line="158" static="1">
			<f a="this:v">
				<a>
					<_2><c path="thx.core.Tuple3.T2"/></_2>
					<_1><c path="thx.core.Tuple3.T1"/></_1>
					<_0><c path="thx.core.Tuple3.T0"/></_0>
				</a>
				<c path="with.T3"/>
				<x path="thx.core.Tuple4">
					<c path="thx.core.Tuple3.T0"/>
					<c path="thx.core.Tuple3.T1"/>
					<c path="thx.core.Tuple3.T2"/>
					<c path="with.T3"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="164" static="1">
			<f a="this">
				<a>
					<_2><c path="thx.core.Tuple3.T2"/></_2>
					<_1><c path="thx.core.Tuple3.T1"/></_1>
					<_0><c path="thx.core.Tuple3.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
	</class>
	<abstract path="thx.core.Tuple4" params="T0:T1:T2:T3" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" module="thx.core.Tuple">
		<from><icast><a>
	<_3><c path="thx.core.Tuple4.T3"/></_3>
	<_2><c path="thx.core.Tuple4.T2"/></_2>
	<_1><c path="thx.core.Tuple4.T1"/></_1>
	<_0><c path="thx.core.Tuple4.T0"/></_0>
</a></icast></from>
		<this><a>
	<_3><c path="thx.core.Tuple4.T3"/></_3>
	<_2><c path="thx.core.Tuple4.T2"/></_2>
	<_1><c path="thx.core.Tuple4.T1"/></_1>
	<_0><c path="thx.core.Tuple4.T0"/></_0>
</a></this>
		<to><icast><a>
	<_3><c path="thx.core.Tuple4.T3"/></_3>
	<_2><c path="thx.core.Tuple4.T2"/></_2>
	<_1><c path="thx.core.Tuple4.T1"/></_1>
	<_0><c path="thx.core.Tuple4.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple4` is a tuple with four values. It maps to an anonymous object with fields `_0`, `_1`, `_2`, and `_3`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
	<e>_2</e>
	<e>_3</e>
</m></meta>
		<impl><class path="thx.core._Tuple.Tuple4_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" private="1" module="thx.core.Tuple">
	<_new public="1" get="inline" set="null" line="176" static="1">
		<f a="_0:_1:_2:_3">
			<c path="thx.core.Tuple4.T0"/>
			<c path="thx.core.Tuple4.T1"/>
			<c path="thx.core.Tuple4.T2"/>
			<c path="thx.core.Tuple4.T3"/>
			<a>
				<_3><c path="thx.core.Tuple4.T3"/></_3>
				<_2><c path="thx.core.Tuple4.T2"/></_2>
				<_1><c path="thx.core.Tuple4.T1"/></_1>
				<_0><c path="thx.core.Tuple4.T0"/></_0>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple4` the 4 required value.</haxe_doc>
	</_new>
	<flip public="1" get="inline" set="null" line="182" static="1">
		<f a="this">
			<a>
				<_3><c path="thx.core.Tuple4.T3"/></_3>
				<_2><c path="thx.core.Tuple4.T2"/></_2>
				<_1><c path="thx.core.Tuple4.T1"/></_1>
				<_0><c path="thx.core.Tuple4.T0"/></_0>
			</a>
			<x path="thx.core.Tuple4">
				<c path="thx.core.Tuple4.T3"/>
				<c path="thx.core.Tuple4.T2"/>
				<c path="thx.core.Tuple4.T1"/>
				<c path="thx.core.Tuple4.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="189" static="1">
		<f a="this">
			<a>
				<_3><c path="thx.core.Tuple4.T3"/></_3>
				<_2><c path="thx.core.Tuple4.T2"/></_2>
				<_1><c path="thx.core.Tuple4.T1"/></_1>
				<_0><c path="thx.core.Tuple4.T0"/></_0>
			</a>
			<x path="thx.core.Tuple3">
				<c path="thx.core.Tuple4.T1"/>
				<c path="thx.core.Tuple4.T2"/>
				<c path="thx.core.Tuple4.T3"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="196" static="1">
		<f a="this">
			<a>
				<_3><c path="thx.core.Tuple4.T3"/></_3>
				<_2><c path="thx.core.Tuple4.T2"/></_2>
				<_1><c path="thx.core.Tuple4.T1"/></_1>
				<_0><c path="thx.core.Tuple4.T0"/></_0>
			</a>
			<x path="thx.core.Tuple3">
				<c path="thx.core.Tuple4.T0"/>
				<c path="thx.core.Tuple4.T1"/>
				<c path="thx.core.Tuple4.T2"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<with public="1" params="T4" get="inline" set="null" line="203" static="1">
		<f a="this:v">
			<a>
				<_3><c path="thx.core.Tuple4.T3"/></_3>
				<_2><c path="thx.core.Tuple4.T2"/></_2>
				<_1><c path="thx.core.Tuple4.T1"/></_1>
				<_0><c path="thx.core.Tuple4.T0"/></_0>
			</a>
			<c path="with.T4"/>
			<x path="thx.core.Tuple5">
				<c path="thx.core.Tuple4.T0"/>
				<c path="thx.core.Tuple4.T1"/>
				<c path="thx.core.Tuple4.T2"/>
				<c path="thx.core.Tuple4.T3"/>
				<c path="with.T4"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="209" static="1">
		<f a="this">
			<a>
				<_3><c path="thx.core.Tuple4.T3"/></_3>
				<_2><c path="thx.core.Tuple4.T2"/></_2>
				<_1><c path="thx.core.Tuple4.T1"/></_1>
				<_0><c path="thx.core.Tuple4.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
</class></impl>
	</abstract>
	<class path="thx.core._Tuple.Tuple4_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" private="1" module="thx.core.Tuple">
		<_new public="1" get="inline" set="null" line="176" static="1">
			<f a="_0:_1:_2:_3">
				<c path="thx.core.Tuple4.T0"/>
				<c path="thx.core.Tuple4.T1"/>
				<c path="thx.core.Tuple4.T2"/>
				<c path="thx.core.Tuple4.T3"/>
				<a>
					<_3><c path="thx.core.Tuple4.T3"/></_3>
					<_2><c path="thx.core.Tuple4.T2"/></_2>
					<_1><c path="thx.core.Tuple4.T1"/></_1>
					<_0><c path="thx.core.Tuple4.T0"/></_0>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple4` the 4 required value.</haxe_doc>
		</_new>
		<flip public="1" get="inline" set="null" line="182" static="1">
			<f a="this">
				<a>
					<_3><c path="thx.core.Tuple4.T3"/></_3>
					<_2><c path="thx.core.Tuple4.T2"/></_2>
					<_1><c path="thx.core.Tuple4.T1"/></_1>
					<_0><c path="thx.core.Tuple4.T0"/></_0>
				</a>
				<x path="thx.core.Tuple4">
					<c path="thx.core.Tuple4.T3"/>
					<c path="thx.core.Tuple4.T2"/>
					<c path="thx.core.Tuple4.T1"/>
					<c path="thx.core.Tuple4.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="189" static="1">
			<f a="this">
				<a>
					<_3><c path="thx.core.Tuple4.T3"/></_3>
					<_2><c path="thx.core.Tuple4.T2"/></_2>
					<_1><c path="thx.core.Tuple4.T1"/></_1>
					<_0><c path="thx.core.Tuple4.T0"/></_0>
				</a>
				<x path="thx.core.Tuple3">
					<c path="thx.core.Tuple4.T1"/>
					<c path="thx.core.Tuple4.T2"/>
					<c path="thx.core.Tuple4.T3"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="196" static="1">
			<f a="this">
				<a>
					<_3><c path="thx.core.Tuple4.T3"/></_3>
					<_2><c path="thx.core.Tuple4.T2"/></_2>
					<_1><c path="thx.core.Tuple4.T1"/></_1>
					<_0><c path="thx.core.Tuple4.T0"/></_0>
				</a>
				<x path="thx.core.Tuple3">
					<c path="thx.core.Tuple4.T0"/>
					<c path="thx.core.Tuple4.T1"/>
					<c path="thx.core.Tuple4.T2"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<with public="1" params="T4" get="inline" set="null" line="203" static="1">
			<f a="this:v">
				<a>
					<_3><c path="thx.core.Tuple4.T3"/></_3>
					<_2><c path="thx.core.Tuple4.T2"/></_2>
					<_1><c path="thx.core.Tuple4.T1"/></_1>
					<_0><c path="thx.core.Tuple4.T0"/></_0>
				</a>
				<c path="with.T4"/>
				<x path="thx.core.Tuple5">
					<c path="thx.core.Tuple4.T0"/>
					<c path="thx.core.Tuple4.T1"/>
					<c path="thx.core.Tuple4.T2"/>
					<c path="thx.core.Tuple4.T3"/>
					<c path="with.T4"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="209" static="1">
			<f a="this">
				<a>
					<_3><c path="thx.core.Tuple4.T3"/></_3>
					<_2><c path="thx.core.Tuple4.T2"/></_2>
					<_1><c path="thx.core.Tuple4.T1"/></_1>
					<_0><c path="thx.core.Tuple4.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
	</class>
	<abstract path="thx.core.Tuple5" params="T0:T1:T2:T3:T4" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" module="thx.core.Tuple">
		<from><icast><a>
	<_4><c path="thx.core.Tuple5.T4"/></_4>
	<_3><c path="thx.core.Tuple5.T3"/></_3>
	<_2><c path="thx.core.Tuple5.T2"/></_2>
	<_1><c path="thx.core.Tuple5.T1"/></_1>
	<_0><c path="thx.core.Tuple5.T0"/></_0>
</a></icast></from>
		<this><a>
	<_4><c path="thx.core.Tuple5.T4"/></_4>
	<_3><c path="thx.core.Tuple5.T3"/></_3>
	<_2><c path="thx.core.Tuple5.T2"/></_2>
	<_1><c path="thx.core.Tuple5.T1"/></_1>
	<_0><c path="thx.core.Tuple5.T0"/></_0>
</a></this>
		<to><icast><a>
	<_4><c path="thx.core.Tuple5.T4"/></_4>
	<_3><c path="thx.core.Tuple5.T3"/></_3>
	<_2><c path="thx.core.Tuple5.T2"/></_2>
	<_1><c path="thx.core.Tuple5.T1"/></_1>
	<_0><c path="thx.core.Tuple5.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple5` is a tuple with five values. It maps to an anonymous object with fields `_0`, `_1`, `_2`, `_4`, and `_5`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
	<e>_2</e>
	<e>_3</e>
	<e>_4</e>
</m></meta>
		<impl><class path="thx.core._Tuple.Tuple5_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" private="1" module="thx.core.Tuple">
	<_new public="1" get="inline" set="null" line="221" static="1">
		<f a="_0:_1:_2:_3:_4">
			<c path="thx.core.Tuple5.T0"/>
			<c path="thx.core.Tuple5.T1"/>
			<c path="thx.core.Tuple5.T2"/>
			<c path="thx.core.Tuple5.T3"/>
			<c path="thx.core.Tuple5.T4"/>
			<a>
				<_4><c path="thx.core.Tuple5.T4"/></_4>
				<_3><c path="thx.core.Tuple5.T3"/></_3>
				<_2><c path="thx.core.Tuple5.T2"/></_2>
				<_1><c path="thx.core.Tuple5.T1"/></_1>
				<_0><c path="thx.core.Tuple5.T0"/></_0>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple5` the 5 required value.</haxe_doc>
	</_new>
	<flip public="1" get="inline" set="null" line="227" static="1">
		<f a="this">
			<a>
				<_4><c path="thx.core.Tuple5.T4"/></_4>
				<_3><c path="thx.core.Tuple5.T3"/></_3>
				<_2><c path="thx.core.Tuple5.T2"/></_2>
				<_1><c path="thx.core.Tuple5.T1"/></_1>
				<_0><c path="thx.core.Tuple5.T0"/></_0>
			</a>
			<x path="thx.core.Tuple5">
				<c path="thx.core.Tuple5.T4"/>
				<c path="thx.core.Tuple5.T3"/>
				<c path="thx.core.Tuple5.T2"/>
				<c path="thx.core.Tuple5.T1"/>
				<c path="thx.core.Tuple5.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="234" static="1">
		<f a="this">
			<a>
				<_4><c path="thx.core.Tuple5.T4"/></_4>
				<_3><c path="thx.core.Tuple5.T3"/></_3>
				<_2><c path="thx.core.Tuple5.T2"/></_2>
				<_1><c path="thx.core.Tuple5.T1"/></_1>
				<_0><c path="thx.core.Tuple5.T0"/></_0>
			</a>
			<x path="thx.core.Tuple4">
				<c path="thx.core.Tuple5.T1"/>
				<c path="thx.core.Tuple5.T2"/>
				<c path="thx.core.Tuple5.T3"/>
				<c path="thx.core.Tuple5.T4"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="241" static="1">
		<f a="this">
			<a>
				<_4><c path="thx.core.Tuple5.T4"/></_4>
				<_3><c path="thx.core.Tuple5.T3"/></_3>
				<_2><c path="thx.core.Tuple5.T2"/></_2>
				<_1><c path="thx.core.Tuple5.T1"/></_1>
				<_0><c path="thx.core.Tuple5.T0"/></_0>
			</a>
			<x path="thx.core.Tuple4">
				<c path="thx.core.Tuple5.T0"/>
				<c path="thx.core.Tuple5.T1"/>
				<c path="thx.core.Tuple5.T2"/>
				<c path="thx.core.Tuple5.T3"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<with public="1" params="T5" get="inline" set="null" line="248" static="1">
		<f a="this:v">
			<a>
				<_4><c path="thx.core.Tuple5.T4"/></_4>
				<_3><c path="thx.core.Tuple5.T3"/></_3>
				<_2><c path="thx.core.Tuple5.T2"/></_2>
				<_1><c path="thx.core.Tuple5.T1"/></_1>
				<_0><c path="thx.core.Tuple5.T0"/></_0>
			</a>
			<c path="with.T5"/>
			<x path="thx.core.Tuple6">
				<c path="thx.core.Tuple5.T0"/>
				<c path="thx.core.Tuple5.T1"/>
				<c path="thx.core.Tuple5.T2"/>
				<c path="thx.core.Tuple5.T3"/>
				<c path="thx.core.Tuple5.T4"/>
				<c path="with.T5"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
	</with>
	<toString public="1" get="inline" set="null" line="254" static="1">
		<f a="this">
			<a>
				<_4><c path="thx.core.Tuple5.T4"/></_4>
				<_3><c path="thx.core.Tuple5.T3"/></_3>
				<_2><c path="thx.core.Tuple5.T2"/></_2>
				<_1><c path="thx.core.Tuple5.T1"/></_1>
				<_0><c path="thx.core.Tuple5.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
</class></impl>
	</abstract>
	<class path="thx.core._Tuple.Tuple5_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" private="1" module="thx.core.Tuple">
		<_new public="1" get="inline" set="null" line="221" static="1">
			<f a="_0:_1:_2:_3:_4">
				<c path="thx.core.Tuple5.T0"/>
				<c path="thx.core.Tuple5.T1"/>
				<c path="thx.core.Tuple5.T2"/>
				<c path="thx.core.Tuple5.T3"/>
				<c path="thx.core.Tuple5.T4"/>
				<a>
					<_4><c path="thx.core.Tuple5.T4"/></_4>
					<_3><c path="thx.core.Tuple5.T3"/></_3>
					<_2><c path="thx.core.Tuple5.T2"/></_2>
					<_1><c path="thx.core.Tuple5.T1"/></_1>
					<_0><c path="thx.core.Tuple5.T0"/></_0>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple5` the 5 required value.</haxe_doc>
		</_new>
		<flip public="1" get="inline" set="null" line="227" static="1">
			<f a="this">
				<a>
					<_4><c path="thx.core.Tuple5.T4"/></_4>
					<_3><c path="thx.core.Tuple5.T3"/></_3>
					<_2><c path="thx.core.Tuple5.T2"/></_2>
					<_1><c path="thx.core.Tuple5.T1"/></_1>
					<_0><c path="thx.core.Tuple5.T0"/></_0>
				</a>
				<x path="thx.core.Tuple5">
					<c path="thx.core.Tuple5.T4"/>
					<c path="thx.core.Tuple5.T3"/>
					<c path="thx.core.Tuple5.T2"/>
					<c path="thx.core.Tuple5.T1"/>
					<c path="thx.core.Tuple5.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="234" static="1">
			<f a="this">
				<a>
					<_4><c path="thx.core.Tuple5.T4"/></_4>
					<_3><c path="thx.core.Tuple5.T3"/></_3>
					<_2><c path="thx.core.Tuple5.T2"/></_2>
					<_1><c path="thx.core.Tuple5.T1"/></_1>
					<_0><c path="thx.core.Tuple5.T0"/></_0>
				</a>
				<x path="thx.core.Tuple4">
					<c path="thx.core.Tuple5.T1"/>
					<c path="thx.core.Tuple5.T2"/>
					<c path="thx.core.Tuple5.T3"/>
					<c path="thx.core.Tuple5.T4"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="241" static="1">
			<f a="this">
				<a>
					<_4><c path="thx.core.Tuple5.T4"/></_4>
					<_3><c path="thx.core.Tuple5.T3"/></_3>
					<_2><c path="thx.core.Tuple5.T2"/></_2>
					<_1><c path="thx.core.Tuple5.T1"/></_1>
					<_0><c path="thx.core.Tuple5.T0"/></_0>
				</a>
				<x path="thx.core.Tuple4">
					<c path="thx.core.Tuple5.T0"/>
					<c path="thx.core.Tuple5.T1"/>
					<c path="thx.core.Tuple5.T2"/>
					<c path="thx.core.Tuple5.T3"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<with public="1" params="T5" get="inline" set="null" line="248" static="1">
			<f a="this:v">
				<a>
					<_4><c path="thx.core.Tuple5.T4"/></_4>
					<_3><c path="thx.core.Tuple5.T3"/></_3>
					<_2><c path="thx.core.Tuple5.T2"/></_2>
					<_1><c path="thx.core.Tuple5.T1"/></_1>
					<_0><c path="thx.core.Tuple5.T0"/></_0>
				</a>
				<c path="with.T5"/>
				<x path="thx.core.Tuple6">
					<c path="thx.core.Tuple5.T0"/>
					<c path="thx.core.Tuple5.T1"/>
					<c path="thx.core.Tuple5.T2"/>
					<c path="thx.core.Tuple5.T3"/>
					<c path="thx.core.Tuple5.T4"/>
					<c path="with.T5"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Creates a new Tuple with the addition of the extra value `v`. The Tuple
of course increase in size by one.</haxe_doc>
		</with>
		<toString public="1" get="inline" set="null" line="254" static="1">
			<f a="this">
				<a>
					<_4><c path="thx.core.Tuple5.T4"/></_4>
					<_3><c path="thx.core.Tuple5.T3"/></_3>
					<_2><c path="thx.core.Tuple5.T2"/></_2>
					<_1><c path="thx.core.Tuple5.T1"/></_1>
					<_0><c path="thx.core.Tuple5.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
	</class>
	<abstract path="thx.core.Tuple6" params="T0:T1:T2:T3:T4:T5" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" module="thx.core.Tuple">
		<from><icast><a>
	<_5><c path="thx.core.Tuple6.T5"/></_5>
	<_4><c path="thx.core.Tuple6.T4"/></_4>
	<_3><c path="thx.core.Tuple6.T3"/></_3>
	<_2><c path="thx.core.Tuple6.T2"/></_2>
	<_1><c path="thx.core.Tuple6.T1"/></_1>
	<_0><c path="thx.core.Tuple6.T0"/></_0>
</a></icast></from>
		<this><a>
	<_5><c path="thx.core.Tuple6.T5"/></_5>
	<_4><c path="thx.core.Tuple6.T4"/></_4>
	<_3><c path="thx.core.Tuple6.T3"/></_3>
	<_2><c path="thx.core.Tuple6.T2"/></_2>
	<_1><c path="thx.core.Tuple6.T1"/></_1>
	<_0><c path="thx.core.Tuple6.T0"/></_0>
</a></this>
		<to><icast><a>
	<_5><c path="thx.core.Tuple6.T5"/></_5>
	<_4><c path="thx.core.Tuple6.T4"/></_4>
	<_3><c path="thx.core.Tuple6.T3"/></_3>
	<_2><c path="thx.core.Tuple6.T2"/></_2>
	<_1><c path="thx.core.Tuple6.T1"/></_1>
	<_0><c path="thx.core.Tuple6.T0"/></_0>
</a></icast></to>
		<haxe_doc>`Tuple6` is a tuple with size values. It maps to an anonymous object with fields `_0`, `_1`, `_2`, `_4`, `_5`, and `_6`.</haxe_doc>
		<meta><m n=":forward">
	<e>_0</e>
	<e>_1</e>
	<e>_2</e>
	<e>_3</e>
	<e>_4</e>
	<e>_5</e>
</m></meta>
		<impl><class path="thx.core._Tuple.Tuple6_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" private="1" module="thx.core.Tuple">
	<_new public="1" get="inline" set="null" line="266" static="1">
		<f a="_0:_1:_2:_3:_4:_5">
			<c path="thx.core.Tuple6.T0"/>
			<c path="thx.core.Tuple6.T1"/>
			<c path="thx.core.Tuple6.T2"/>
			<c path="thx.core.Tuple6.T3"/>
			<c path="thx.core.Tuple6.T4"/>
			<c path="thx.core.Tuple6.T5"/>
			<a>
				<_5><c path="thx.core.Tuple6.T5"/></_5>
				<_4><c path="thx.core.Tuple6.T4"/></_4>
				<_3><c path="thx.core.Tuple6.T3"/></_3>
				<_2><c path="thx.core.Tuple6.T2"/></_2>
				<_1><c path="thx.core.Tuple6.T1"/></_1>
				<_0><c path="thx.core.Tuple6.T0"/></_0>
			</a>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Constructs an instance of `Tuple6` the 6 required value.</haxe_doc>
	</_new>
	<flip public="1" get="inline" set="null" line="272" static="1">
		<f a="this">
			<a>
				<_5><c path="thx.core.Tuple6.T5"/></_5>
				<_4><c path="thx.core.Tuple6.T4"/></_4>
				<_3><c path="thx.core.Tuple6.T3"/></_3>
				<_2><c path="thx.core.Tuple6.T2"/></_2>
				<_1><c path="thx.core.Tuple6.T1"/></_1>
				<_0><c path="thx.core.Tuple6.T0"/></_0>
			</a>
			<x path="thx.core.Tuple6">
				<c path="thx.core.Tuple6.T5"/>
				<c path="thx.core.Tuple6.T4"/>
				<c path="thx.core.Tuple6.T3"/>
				<c path="thx.core.Tuple6.T2"/>
				<c path="thx.core.Tuple6.T1"/>
				<c path="thx.core.Tuple6.T0"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
	</flip>
	<dropLeft public="1" get="inline" set="null" line="279" static="1">
		<f a="this">
			<a>
				<_5><c path="thx.core.Tuple6.T5"/></_5>
				<_4><c path="thx.core.Tuple6.T4"/></_4>
				<_3><c path="thx.core.Tuple6.T3"/></_3>
				<_2><c path="thx.core.Tuple6.T2"/></_2>
				<_1><c path="thx.core.Tuple6.T1"/></_1>
				<_0><c path="thx.core.Tuple6.T0"/></_0>
			</a>
			<x path="thx.core.Tuple5">
				<c path="thx.core.Tuple6.T1"/>
				<c path="thx.core.Tuple6.T2"/>
				<c path="thx.core.Tuple6.T3"/>
				<c path="thx.core.Tuple6.T4"/>
				<c path="thx.core.Tuple6.T5"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
	</dropLeft>
	<dropRight public="1" get="inline" set="null" line="286" static="1">
		<f a="this">
			<a>
				<_5><c path="thx.core.Tuple6.T5"/></_5>
				<_4><c path="thx.core.Tuple6.T4"/></_4>
				<_3><c path="thx.core.Tuple6.T3"/></_3>
				<_2><c path="thx.core.Tuple6.T2"/></_2>
				<_1><c path="thx.core.Tuple6.T1"/></_1>
				<_0><c path="thx.core.Tuple6.T0"/></_0>
			</a>
			<x path="thx.core.Tuple5">
				<c path="thx.core.Tuple6.T0"/>
				<c path="thx.core.Tuple6.T1"/>
				<c path="thx.core.Tuple6.T2"/>
				<c path="thx.core.Tuple6.T3"/>
				<c path="thx.core.Tuple6.T4"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
	</dropRight>
	<toString public="1" get="inline" set="null" line="292" static="1">
		<f a="this">
			<a>
				<_5><c path="thx.core.Tuple6.T5"/></_5>
				<_4><c path="thx.core.Tuple6.T4"/></_4>
				<_3><c path="thx.core.Tuple6.T3"/></_3>
				<_2><c path="thx.core.Tuple6.T2"/></_2>
				<_1><c path="thx.core.Tuple6.T1"/></_1>
				<_0><c path="thx.core.Tuple6.T0"/></_0>
			</a>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
	</toString>
</class></impl>
	</abstract>
	<class path="thx.core._Tuple.Tuple6_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Tuple.hx" private="1" module="thx.core.Tuple">
		<_new public="1" get="inline" set="null" line="266" static="1">
			<f a="_0:_1:_2:_3:_4:_5">
				<c path="thx.core.Tuple6.T0"/>
				<c path="thx.core.Tuple6.T1"/>
				<c path="thx.core.Tuple6.T2"/>
				<c path="thx.core.Tuple6.T3"/>
				<c path="thx.core.Tuple6.T4"/>
				<c path="thx.core.Tuple6.T5"/>
				<a>
					<_5><c path="thx.core.Tuple6.T5"/></_5>
					<_4><c path="thx.core.Tuple6.T4"/></_4>
					<_3><c path="thx.core.Tuple6.T3"/></_3>
					<_2><c path="thx.core.Tuple6.T2"/></_2>
					<_1><c path="thx.core.Tuple6.T1"/></_1>
					<_0><c path="thx.core.Tuple6.T0"/></_0>
				</a>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Constructs an instance of `Tuple6` the 6 required value.</haxe_doc>
		</_new>
		<flip public="1" get="inline" set="null" line="272" static="1">
			<f a="this">
				<a>
					<_5><c path="thx.core.Tuple6.T5"/></_5>
					<_4><c path="thx.core.Tuple6.T4"/></_4>
					<_3><c path="thx.core.Tuple6.T3"/></_3>
					<_2><c path="thx.core.Tuple6.T2"/></_2>
					<_1><c path="thx.core.Tuple6.T1"/></_1>
					<_0><c path="thx.core.Tuple6.T0"/></_0>
				</a>
				<x path="thx.core.Tuple6">
					<c path="thx.core.Tuple6.T5"/>
					<c path="thx.core.Tuple6.T4"/>
					<c path="thx.core.Tuple6.T3"/>
					<c path="thx.core.Tuple6.T2"/>
					<c path="thx.core.Tuple6.T1"/>
					<c path="thx.core.Tuple6.T0"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`flip` returns a new Tuple with the values in reverse order.</haxe_doc>
		</flip>
		<dropLeft public="1" get="inline" set="null" line="279" static="1">
			<f a="this">
				<a>
					<_5><c path="thx.core.Tuple6.T5"/></_5>
					<_4><c path="thx.core.Tuple6.T4"/></_4>
					<_3><c path="thx.core.Tuple6.T3"/></_3>
					<_2><c path="thx.core.Tuple6.T2"/></_2>
					<_1><c path="thx.core.Tuple6.T1"/></_1>
					<_0><c path="thx.core.Tuple6.T0"/></_0>
				</a>
				<x path="thx.core.Tuple5">
					<c path="thx.core.Tuple6.T1"/>
					<c path="thx.core.Tuple6.T2"/>
					<c path="thx.core.Tuple6.T3"/>
					<c path="thx.core.Tuple6.T4"/>
					<c path="thx.core.Tuple6.T5"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the first
on the left.</haxe_doc>
		</dropLeft>
		<dropRight public="1" get="inline" set="null" line="286" static="1">
			<f a="this">
				<a>
					<_5><c path="thx.core.Tuple6.T5"/></_5>
					<_4><c path="thx.core.Tuple6.T4"/></_4>
					<_3><c path="thx.core.Tuple6.T3"/></_3>
					<_2><c path="thx.core.Tuple6.T2"/></_2>
					<_1><c path="thx.core.Tuple6.T1"/></_1>
					<_0><c path="thx.core.Tuple6.T0"/></_0>
				</a>
				<x path="thx.core.Tuple5">
					<c path="thx.core.Tuple6.T0"/>
					<c path="thx.core.Tuple6.T1"/>
					<c path="thx.core.Tuple6.T2"/>
					<c path="thx.core.Tuple6.T3"/>
					<c path="thx.core.Tuple6.T4"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>`dropLeft` returns a new Tuple with one less element by dropping the last
on the right.</haxe_doc>
		</dropRight>
		<toString public="1" get="inline" set="null" line="292" static="1">
			<f a="this">
				<a>
					<_5><c path="thx.core.Tuple6.T5"/></_5>
					<_4><c path="thx.core.Tuple6.T4"/></_4>
					<_3><c path="thx.core.Tuple6.T3"/></_3>
					<_2><c path="thx.core.Tuple6.T2"/></_2>
					<_1><c path="thx.core.Tuple6.T1"/></_1>
					<_0><c path="thx.core.Tuple6.T0"/></_0>
				</a>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Provides a string representation of the Tuple</haxe_doc>
		</toString>
	</class>
	<class path="thx.core.Types" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/Types.hx">
		<isAnonymousObject public="1" get="inline" set="null" line="10" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`isAnonymousObject` returns true if `v` is an object and it is not an instance of any custom class.</haxe_doc>
		</isAnonymousObject>
		<isPrimitive public="1" set="method" line="16" static="1">
			<f a="v">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Return `true` if v is any of the following types: Int, Float, Bool or String.</haxe_doc>
		</isPrimitive>
		<hasSuperClass public="1" set="method" line="28" static="1">
			<f a="cls:sup">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns `true` if `cls` extends `sup` or one of its children.

It also returns `true` if `cls` and `sup` are the same.</haxe_doc>
		</hasSuperClass>
		<sameType public="1" params="A:B" set="method" line="40" static="1">
			<f a="a:b">
				<c path="sameType.A"/>
				<c path="sameType.B"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>`sameType` returns true if the arguments `a` and `b` share exactly the same type.</haxe_doc>
		</sameType>
		<typeInheritance public="1" set="method" line="47" static="1">
			<f a="type">
				<e path="ValueType"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>`typeInheritance` returns an array of string describing the entire inheritance
chain of the passed `ValueType`.</haxe_doc>
		</typeInheritance>
		<typeToString public="1" set="method" line="69" static="1">
			<f a="type">
				<e path="ValueType"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of a `ValueType`.</haxe_doc>
		</typeToString>
		<valueTypeInheritance public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="value">
				<c path="valueTypeInheritance.T"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>`valueTypeInheritance` returns an array of string describing the entire inheritance
chain of the passed `value`.</haxe_doc>
		</valueTypeInheritance>
		<valueTypeToString public="1" params="T" get="inline" set="null" line="93" static="1">
			<f a="value">
				<c path="valueTypeToString.T"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string describing the type of any `value`.</haxe_doc>
		</valueTypeToString>
		<haxe_doc>Helper methods to use on values, types and classes.</haxe_doc>
	</class>
	<class path="thx.core.error.AbstractMethod" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/error/AbstractMethod.hx">
		<extends path="thx.core.Error"/>
		<new public="1" set="method" line="19"><f a="?posInfo" v="null">
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>`AbstractMethod` extends `Error` and it is intended to be used inside those methods
that are considered abstract. Abstract methods are methods that needs to be implemented
in a sub-class.

The error message brings the class name/method name that is abstract.

```haxe
function abstractMethod() {
  throw new AbstractMethod();
}
```</haxe_doc>
	</class>
	<class path="thx.core.error.NotImplemented" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/error/NotImplemented.hx">
		<extends path="thx.core.Error"/>
		<new public="1" set="method" line="16"><f a="?posInfo" v="null">
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>`NotImplemented` extends `Error` and it is intended to be used inside method
that are drafted but still do not provide an implementation.

```haxe
public function toBeDone() {
  throw new NotImplemented();
}
```</haxe_doc>
	</class>
	<class path="thx.core.error.NullArgument" params="" file="C:\HaxeToolkit\haxe\lib/thx,core/0,17,7/src/thx/core/error/NullArgument.hx">
		<extends path="thx.core.Error"/>
		<new public="1" set="method" line="18"><f a="message:?posInfo" v=":null">
	<c path="String"/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>`NullArgument` is used to detect if arguments of methods are `null` or empty values.

It should not be used with its contructor but using the static extensions:

```haxe
public function capitalize(text : String) {
  NullArgument.throwIfNull(text);
  // ...
}
```</haxe_doc>
	</class>
	<typedef path="tink.Future" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><x path="tink.core.Future"><c path="tink.Future.T"/></x></typedef>
	<typedef path="tink.Surprise" params="D:F" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><t path="tink.core.Surprise">
	<c path="tink.Surprise.D"/>
	<c path="tink.Surprise.F"/>
</t></typedef>
	<typedef path="tink.FutureTrigger" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><c path="tink.core.FutureTrigger"><c path="tink.FutureTrigger.T"/></c></typedef>
	<typedef path="tink.Outcome" params="D:F" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><e path="tink.core.Outcome">
	<c path="tink.Outcome.D"/>
	<c path="tink.Outcome.F"/>
</e></typedef>
	<typedef path="tink.OutcomeTools" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><c path="tink.core.OutcomeTools"/></typedef>
	<typedef path="tink.Either" params="L:R" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><e path="tink.core.Either">
	<c path="tink.Either.L"/>
	<c path="tink.Either.R"/>
</e></typedef>
	<typedef path="tink.Pair" params="A:B" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><x path="tink.core.Pair">
	<c path="tink.Pair.A"/>
	<c path="tink.Pair.B"/>
</x></typedef>
	<typedef path="tink.MPair" params="A:B" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><x path="tink.core.MPair">
	<c path="tink.MPair.A"/>
	<c path="tink.MPair.B"/>
</x></typedef>
	<typedef path="tink.Signal" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><x path="tink.core.Signal"><c path="tink.Signal.T"/></x></typedef>
	<typedef path="tink.SignalTrigger" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><x path="tink.core.SignalTrigger"><c path="tink.SignalTrigger.T"/></x></typedef>
	<typedef path="tink.Noise" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><e path="tink.core.Noise"/></typedef>
	<typedef path="tink.Error" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><t path="tink.core.Error"/></typedef>
	<typedef path="tink.Callback" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><x path="tink.core.Callback"><c path="tink.Callback.T"/></x></typedef>
	<typedef path="tink.CallbackLink" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><x path="tink.core.CallbackLink"/></typedef>
	<typedef path="tink.CallbackList" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><x path="tink.core.CallbackList"><c path="tink.CallbackList.T"/></x></typedef>
	<typedef path="tink.Ref" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><x path="tink.core.Ref"><c path="tink.Ref.T"/></x></typedef>
	<typedef path="tink.Lazy" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/CoreApi.hx" module="tink.CoreApi"><x path="tink.core.Lazy"><c path="tink.Lazy.T"/></x></typedef>
	<abstract path="tink.core.Callback" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Callback.hx">
		<from>
			<icast><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></icast>
			<icast field="fromNiladic"><f a=""><x path="Void"/></f></icast>
			<icast field="fromMany"><c path="Array"><x path="tink.core.Callback"><c path="fromMany.A"/></x></c></icast>
		</from>
		<this><t path="Null"><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></t></this>
		<impl><class path="tink.core._Callback.Callback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Callback.hx" private="1" module="tink.core.Callback">
	<_new get="inline" set="null" line="7" static="1">
		<f a="f">
			<t path="Null"><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></t>
			<t path="Null"><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></t>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<invoke public="1" get="inline" set="null" line="10" static="1">
		<f a="this:data">
			<t path="Null"><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></t>
			<c path="tink.core.Callback.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</invoke>
	<fromNiladic params="A" get="inline" set="null" line="13" static="1">
		<f a="f">
			<f a=""><x path="Void"/></f>
			<x path="tink.core.Callback"><c path="fromNiladic.A"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromNiladic>
	<fromMany params="A" set="method" line="16" static="1">
		<f a="callbacks">
			<c path="Array"><x path="tink.core.Callback"><c path="fromMany.A"/></x></c>
			<x path="tink.core.Callback"><c path="fromMany.A"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromMany>
</class></impl>
	</abstract>
	<class path="tink.core._Callback.Callback_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Callback.hx" private="1" module="tink.core.Callback">
		<_new get="inline" set="null" line="7" static="1">
			<f a="f">
				<t path="Null"><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></t>
				<t path="Null"><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></t>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<invoke public="1" get="inline" set="null" line="10" static="1">
			<f a="this:data">
				<t path="Null"><f a="">
	<c path="tink.core.Callback.T"/>
	<x path="Void"/>
</f></t>
				<c path="tink.core.Callback.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</invoke>
		<fromNiladic params="A" get="inline" set="null" line="13" static="1">
			<f a="f">
				<f a=""><x path="Void"/></f>
				<x path="tink.core.Callback"><c path="fromNiladic.A"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromNiladic>
		<fromMany params="A" set="method" line="16" static="1">
			<f a="callbacks">
				<c path="Array"><x path="tink.core.Callback"><c path="fromMany.A"/></x></c>
				<x path="tink.core.Callback"><c path="fromMany.A"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromMany>
	</class>
	<abstract path="tink.core.CallbackLink" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Callback.hx" module="tink.core.Callback">
		<from>
			<icast field="fromFunction"><f a=""><x path="Void"/></f></icast>
			<icast field="fromMany"><c path="Array"><x path="tink.core.CallbackLink"/></c></icast>
		</from>
		<this><t path="Null"><f a=""><x path="Void"/></f></t></this>
		<to><icast field="toCallback"><x path="tink.core.Callback"><c path="toCallback.A"/></x></icast></to>
		<impl><class path="tink.core._Callback.CallbackLink_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Callback.hx" private="1" module="tink.core.Callback">
	<_new get="inline" set="null" line="25" static="1">
		<f a="link">
			<f a=""><x path="Void"/></f>
			<t path="Null"><f a=""><x path="Void"/></f></t>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<dissolve public="1" get="inline" set="null" line="28" static="1">
		<f a="this">
			<t path="Null"><f a=""><x path="Void"/></f></t>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</dissolve>
	<toCallback params="A" set="method" line="31" static="1">
		<f a="this">
			<t path="Null"><f a=""><x path="Void"/></f></t>
			<x path="tink.core.Callback"><c path="toCallback.A"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toCallback>
	<fromFunction get="inline" set="null" line="34" static="1">
		<f a="f">
			<f a=""><x path="Void"/></f>
			<x path="tink.core.CallbackLink"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromFunction>
	<fromMany set="method" line="37" static="1">
		<f a="callbacks">
			<c path="Array"><x path="tink.core.CallbackLink"/></c>
			<x path="tink.core.CallbackLink"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromMany>
</class></impl>
	</abstract>
	<class path="tink.core._Callback.CallbackLink_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Callback.hx" private="1" module="tink.core.Callback">
		<_new get="inline" set="null" line="25" static="1">
			<f a="link">
				<f a=""><x path="Void"/></f>
				<t path="Null"><f a=""><x path="Void"/></f></t>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<dissolve public="1" get="inline" set="null" line="28" static="1">
			<f a="this">
				<t path="Null"><f a=""><x path="Void"/></f></t>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</dissolve>
		<toCallback params="A" set="method" line="31" static="1">
			<f a="this">
				<t path="Null"><f a=""><x path="Void"/></f></t>
				<x path="tink.core.Callback"><c path="toCallback.A"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toCallback>
		<fromFunction get="inline" set="null" line="34" static="1">
			<f a="f">
				<f a=""><x path="Void"/></f>
				<x path="tink.core.CallbackLink"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromFunction>
		<fromMany set="method" line="37" static="1">
			<f a="callbacks">
				<c path="Array"><x path="tink.core.CallbackLink"/></c>
				<x path="tink.core.CallbackLink"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromMany>
	</class>
	<class path="tink.core._Callback.Cell" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Callback.hx" private="1" module="tink.core.Callback">
		<pool line="52" static="1"><c path="Array"><c path="tink.core._Callback.Cell"><d/></c></c></pool>
		<get public="1" params="A" get="inline" set="null" line="54" static="1"><f a=""><c path="tink.core._Callback.Cell"><c path="get.A"/></c></f></get>
		<cb public="1"><x path="tink.core.Callback"><c path="tink.core._Callback.Cell.T"/></x></cb>
		<free public="1" get="inline" set="null" line="47"><f a=""><x path="Void"/></f></free>
		<new set="method" line="45"><f a=""><x path="Void"/></f></new>
	</class>
	<abstract path="tink.core.CallbackList" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Callback.hx" module="tink.core.Callback">
		<this><c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c></this>
		<impl><class path="tink.core._Callback.CallbackList_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Callback.hx" private="1" module="tink.core.Callback">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<_new public="1" get="inline" set="null" line="64" static="1">
		<f a=""><c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c></f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_length get="inline" set="null" line="67" static="1">
		<f a="this">
			<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<add public="1" set="method" line="70" static="1">
		<f a="this:cb">
			<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
			<x path="tink.core.Callback"><c path="tink.core.CallbackList.T"/></x>
			<x path="tink.core.CallbackLink"/>
		</f>
		<meta><m n=":impl"/></meta>
	</add>
	<invoke public="1" set="method" line="81" static="1">
		<f a="this:data">
			<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
			<c path="tink.core.CallbackList.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</invoke>
	<clear public="1" set="method" line="86" static="1">
		<f a="this">
			<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clear>
</class></impl>
	</abstract>
	<class path="tink.core._Callback.CallbackList_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Callback.hx" private="1" module="tink.core.Callback">
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<_new public="1" get="inline" set="null" line="64" static="1">
			<f a=""><c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c></f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_length get="inline" set="null" line="67" static="1">
			<f a="this">
				<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<add public="1" set="method" line="70" static="1">
			<f a="this:cb">
				<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
				<x path="tink.core.Callback"><c path="tink.core.CallbackList.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<meta><m n=":impl"/></meta>
		</add>
		<invoke public="1" set="method" line="81" static="1">
			<f a="this:data">
				<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
				<c path="tink.core.CallbackList.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</invoke>
		<clear public="1" set="method" line="86" static="1">
			<f a="this">
				<c path="Array"><c path="tink.core._Callback.Cell"><c path="tink.core.CallbackList.T"/></c></c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clear>
	</class>
	<enum path="tink.core.Either" params="A:B" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Either.hx">
		<Left a="a"><c path="tink.core.Either.A"/></Left>
		<Right a="b"><c path="tink.core.Either.B"/></Right>
	</enum>
	<typedef path="tink.core.Pos" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Error.hx" module="tink.core.Error"><t path="haxe.PosInfos"/></typedef>
	<typedef path="tink.core.Error" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Error.hx"><c path="tink.core.TypedError"><d/></c></typedef>
	<abstract path="tink.core.ErrorCode" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Error.hx" module="tink.core.Error">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="tink.core._Error.ErrorCode_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Error.hx" private="1" module="tink.core.Error">
	<BadRequest public="1" get="inline" set="null" line="14" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BadRequest>
	<Unauthorized public="1" get="inline" set="null" line="15" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Unauthorized>
	<PaymentRequired public="1" get="inline" set="null" line="16" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</PaymentRequired>
	<Forbidden public="1" get="inline" set="null" line="17" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Forbidden>
	<NotFound public="1" get="inline" set="null" line="18" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotFound>
	<MethodNotAllowed public="1" get="inline" set="null" line="19" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</MethodNotAllowed>
	<Gone public="1" get="inline" set="null" line="20" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Gone>
	<NotAcceptable public="1" get="inline" set="null" line="21" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotAcceptable>
	<Timeout public="1" get="inline" set="null" line="22" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Timeout>
	<Conflict public="1" get="inline" set="null" line="23" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</Conflict>
	<OutOfRange public="1" get="inline" set="null" line="24" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</OutOfRange>
	<ExpectationFailed public="1" get="inline" set="null" line="25" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ExpectationFailed>
	<I_am_a_Teapot public="1" get="inline" set="null" line="26" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</I_am_a_Teapot>
	<AuthenticationTimeout public="1" get="inline" set="null" line="27" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</AuthenticationTimeout>
	<UnprocessableEntity public="1" get="inline" set="null" line="28" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</UnprocessableEntity>
	<InternalError public="1" get="inline" set="null" line="30" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</InternalError>
	<NotImplemented public="1" get="inline" set="null" line="31" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</NotImplemented>
	<ServiceUnavailable public="1" get="inline" set="null" line="32" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</ServiceUnavailable>
	<InsufficientStorage public="1" get="inline" set="null" line="33" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</InsufficientStorage>
	<BandwidthLimitExceeded public="1" get="inline" set="null" line="34" static="1">
		<x path="tink.core.ErrorCode"/>
		<meta>
			<m n=":enum"/>
			<m n=":impl"/>
		</meta>
	</BandwidthLimitExceeded>
	<meta><m n=":enum"/></meta>
</class></impl>
	</abstract>
	<class path="tink.core._Error.ErrorCode_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Error.hx" private="1" module="tink.core.Error">
		<BadRequest public="1" get="inline" set="null" line="14" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BadRequest>
		<Unauthorized public="1" get="inline" set="null" line="15" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Unauthorized>
		<PaymentRequired public="1" get="inline" set="null" line="16" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</PaymentRequired>
		<Forbidden public="1" get="inline" set="null" line="17" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Forbidden>
		<NotFound public="1" get="inline" set="null" line="18" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotFound>
		<MethodNotAllowed public="1" get="inline" set="null" line="19" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</MethodNotAllowed>
		<Gone public="1" get="inline" set="null" line="20" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Gone>
		<NotAcceptable public="1" get="inline" set="null" line="21" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotAcceptable>
		<Timeout public="1" get="inline" set="null" line="22" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Timeout>
		<Conflict public="1" get="inline" set="null" line="23" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</Conflict>
		<OutOfRange public="1" get="inline" set="null" line="24" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</OutOfRange>
		<ExpectationFailed public="1" get="inline" set="null" line="25" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ExpectationFailed>
		<I_am_a_Teapot public="1" get="inline" set="null" line="26" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</I_am_a_Teapot>
		<AuthenticationTimeout public="1" get="inline" set="null" line="27" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</AuthenticationTimeout>
		<UnprocessableEntity public="1" get="inline" set="null" line="28" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</UnprocessableEntity>
		<InternalError public="1" get="inline" set="null" line="30" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</InternalError>
		<NotImplemented public="1" get="inline" set="null" line="31" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</NotImplemented>
		<ServiceUnavailable public="1" get="inline" set="null" line="32" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</ServiceUnavailable>
		<InsufficientStorage public="1" get="inline" set="null" line="33" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</InsufficientStorage>
		<BandwidthLimitExceeded public="1" get="inline" set="null" line="34" static="1">
			<x path="tink.core.ErrorCode"/>
			<meta>
				<m n=":enum"/>
				<m n=":impl"/>
			</meta>
		</BandwidthLimitExceeded>
		<meta><m n=":enum"/></meta>
	</class>
	<class path="tink.core.TypedError" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Error.hx" module="tink.core.Error">
		<withData public="1" set="method" line="76" static="1"><f a="?code:message:data:?pos" v="500:::null">
	<x path="tink.core.ErrorCode"/>
	<c path="String"/>
	<d/>
	<t path="tink.core.Pos"/>
	<t path="tink.core.Error"/>
</f></withData>
		<message public="1" set="null"><c path="String"/></message>
		<code public="1" set="null"><x path="tink.core.ErrorCode"/></code>
		<data public="1" set="null"><c path="tink.core.TypedError.T"/></data>
		<pos public="1" set="null"><t path="Null"><t path="tink.core.Pos"/></t></pos>
		<printPos set="method" line="49"><f a=""><c path="String"/></f></printPos>
		<toString public="1" set="method" line="57">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<throwSelf public="1" set="method" line="64">
			<f a=""><d/></f>
			<meta><m n=":keep"/></meta>
		</throwSelf>
		<new public="1" set="method" line="44"><f a="?code:message:?pos" v="500::null">
	<x path="tink.core.ErrorCode"/>
	<c path="String"/>
	<t path="tink.core.Pos"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="tink.core.Future" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Future.hx">
		<from>
			<icast field="fromTrigger"><c path="tink.core.FutureTrigger"><c path="fromTrigger.A"/></c></icast>
			<icast field="fromMany"><c path="Array"><x path="tink.core.Future"><c path="fromMany.A"/></x></c></icast>
		</from>
		<this><f a="">
	<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
	<x path="tink.core.CallbackLink"/>
</f></this>
		<impl><class path="tink.core._Future.Future_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Future.hx" private="1" module="tink.core.Future">
	<_new public="1" set="method" line="10" static="1">
		<f a="f">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<handle public="1" get="inline" set="null" line="12" static="1">
		<f a="this:callback">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
			<x path="tink.core.CallbackLink"/>
		</f>
		<meta><m n=":impl"/></meta>
	</handle>
	<gather public="1" set="method" line="15" static="1">
		<f a="this">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<x path="tink.core.Future"><c path="tink.core.Future.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</gather>
	<first public="1" set="method" line="27" static="1">
		<f a="this:other">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<x path="tink.core.Future"><c path="tink.core.Future.T"/></x>
			<x path="tink.core.Future"><c path="tink.core.Future.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</first>
	<map public="1" params="A" set="method" line="33" static="1">
		<f a="this:f:?gather" v="::true">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<f a="">
				<c path="tink.core.Future.T"/>
				<c path="map.A"/>
			</f>
			<x path="Bool"/>
			<x path="tink.core.Future"><c path="map.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</map>
	<flatMap public="1" params="A" set="method" line="40" static="1">
		<f a="this:next:?gather" v="::true">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<f a="">
				<c path="tink.core.Future.T"/>
				<x path="tink.core.Future"><c path="flatMap.A"/></x>
			</f>
			<x path="Bool"/>
			<x path="tink.core.Future"><c path="flatMap.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</flatMap>
	<merge public="1" params="A:R" set="method" line="47" static="1">
		<f a="this:other:merger:?gather" v=":::true">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<x path="tink.core.Future"><c path="merge.A"/></x>
			<f a=":">
				<c path="tink.core.Future.T"/>
				<c path="merge.A"/>
				<c path="merge.R"/>
			</f>
			<x path="Bool"/>
			<x path="tink.core.Future"><c path="merge.R"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</merge>
	<flatten public="1" params="A" set="method" line="52" static="1"><f a="f">
	<x path="tink.core.Future"><x path="tink.core.Future"><c path="flatten.A"/></x></x>
	<x path="tink.core.Future"><c path="flatten.A"/></x>
</f></flatten>
	<fromTrigger params="A" get="inline" set="null" line="61" static="1">
		<f a="trigger">
			<c path="tink.core.FutureTrigger"><c path="fromTrigger.A"/></c>
			<x path="tink.core.Future"><c path="fromTrigger.A"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromTrigger>
	<ofMany public="1" params="A" set="method" line="64" static="1"><f a="futures:?gather" v=":true">
	<c path="Array"><x path="tink.core.Future"><c path="ofMany.A"/></x></c>
	<x path="Bool"/>
	<x path="tink.core.Future"><c path="Array"><c path="ofMany.A"/></c></x>
</f></ofMany>
	<fromMany params="A" set="method" line="81" static="1">
		<f a="futures">
			<c path="Array"><x path="tink.core.Future"><c path="fromMany.A"/></x></c>
			<x path="tink.core.Future"><c path="Array"><c path="fromMany.A"/></c></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromMany>
	<lazy public="1" params="A" set="method" line="85" static="1">
		<f a="l">
			<x path="tink.core.Lazy"><c path="lazy.A"/></x>
			<x path="tink.core.Future"><c path="lazy.A"/></x>
		</f>
		<meta><m n=":noUsing"/></meta>
	</lazy>
	<sync public="1" params="A" set="method" line="88" static="1">
		<f a="v">
			<c path="sync.A"/>
			<x path="tink.core.Future"><c path="sync.A"/></x>
		</f>
		<meta><m n=":noUsing"/></meta>
	</sync>
	<async public="1" params="A" set="method" line="91" static="1">
		<f a="f:?lazy" v=":false">
			<f a="">
				<f a="">
					<c path="async.A"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<x path="Bool"/>
			<x path="tink.core.Future"><c path="async.A"/></x>
		</f>
		<meta><m n=":noUsing"/></meta>
	</async>
	<or public="1" params="A" set="method" line="100" static="1">
		<f a="a:b">
			<x path="tink.core.Future"><c path="or.A"/></x>
			<x path="tink.core.Future"><c path="or.A"/></x>
			<x path="tink.core.Future"><c path="or.A"/></x>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e>a||b</e></m>
		</meta>
	</or>
	<either public="1" params="A:B" set="method" line="103" static="1">
		<f a="a:b">
			<x path="tink.core.Future"><c path="either.A"/></x>
			<x path="tink.core.Future"><c path="either.B"/></x>
			<x path="tink.core.Future"><e path="tink.core.Either">
	<c path="either.A"/>
	<c path="either.B"/>
</e></x>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e>a||b</e></m>
		</meta>
	</either>
	<and public="1" params="A:B" set="method" line="106" static="1">
		<f a="a:b">
			<x path="tink.core.Future"><c path="and.A"/></x>
			<x path="tink.core.Future"><c path="and.B"/></x>
			<x path="tink.core.Future"><x path="tink.core.Pair">
	<c path="and.A"/>
	<c path="and.B"/>
</x></x>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[a&&b]]></e></m>
		</meta>
	</and>
	<_tryFailingFlatMap public="1" params="D:F:R" set="method" line="109" static="1">
		<f a="f:map">
			<t path="tink.core.Surprise">
				<c path="_tryFailingFlatMap.D"/>
				<c path="_tryFailingFlatMap.F"/>
			</t>
			<f a="">
				<c path="_tryFailingFlatMap.D"/>
				<t path="tink.core.Surprise">
					<c path="_tryFailingFlatMap.R"/>
					<c path="_tryFailingFlatMap.F"/>
				</t>
			</f>
			<x path="tink.core.Future"><e path="tink.core.Outcome">
	<c path="_tryFailingFlatMap.R"/>
	<c path="_tryFailingFlatMap.F"/>
</e></x>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[a>>b]]></e></m>
		</meta>
	</_tryFailingFlatMap>
	<_tryFlatMap public="1" params="D:F:R" set="method" line="115" static="1">
		<f a="f:map">
			<t path="tink.core.Surprise">
				<c path="_tryFlatMap.D"/>
				<c path="_tryFlatMap.F"/>
			</t>
			<f a="">
				<c path="_tryFlatMap.D"/>
				<x path="tink.core.Future"><c path="_tryFlatMap.R"/></x>
			</f>
			<t path="tink.core.Surprise">
				<c path="_tryFlatMap.R"/>
				<c path="_tryFlatMap.F"/>
			</t>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[a>>b]]></e></m>
		</meta>
	</_tryFlatMap>
	<_tryFailingMap public="1" params="D:F:R" set="method" line="121" static="1">
		<f a="f:map">
			<t path="tink.core.Surprise">
				<c path="_tryFailingMap.D"/>
				<c path="_tryFailingMap.F"/>
			</t>
			<f a="">
				<c path="_tryFailingMap.D"/>
				<e path="tink.core.Outcome">
					<c path="_tryFailingMap.R"/>
					<c path="_tryFailingMap.F"/>
				</e>
			</f>
			<x path="tink.core.Future"><e path="tink.core.Outcome">
	<c path="_tryFailingMap.R"/>
	<c path="_tryFailingMap.F"/>
</e></x>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[a>>b]]></e></m>
		</meta>
	</_tryFailingMap>
	<_tryMap public="1" params="D:F:R" set="method" line="124" static="1">
		<f a="f:map">
			<t path="tink.core.Surprise">
				<c path="_tryMap.D"/>
				<c path="_tryMap.F"/>
			</t>
			<f a="">
				<c path="_tryMap.D"/>
				<c path="_tryMap.R"/>
			</f>
			<x path="tink.core.Future"><e path="tink.core.Outcome">
	<c path="_tryMap.R"/>
	<c path="_tryMap.F"/>
</e></x>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[a>>b]]></e></m>
		</meta>
	</_tryMap>
	<_flatMap public="1" params="T:R" set="method" line="127" static="1">
		<f a="f:map">
			<x path="tink.core.Future"><c path="_flatMap.T"/></x>
			<f a="">
				<c path="_flatMap.T"/>
				<x path="tink.core.Future"><c path="_flatMap.R"/></x>
			</f>
			<x path="tink.core.Future"><c path="_flatMap.R"/></x>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[a>>b]]></e></m>
		</meta>
	</_flatMap>
	<_map public="1" params="T:R" set="method" line="130" static="1">
		<f a="f:map">
			<x path="tink.core.Future"><c path="_map.T"/></x>
			<f a="">
				<c path="_map.T"/>
				<c path="_map.R"/>
			</f>
			<x path="tink.core.Future"><c path="_map.R"/></x>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":op"><e><![CDATA[a>>b]]></e></m>
		</meta>
	</_map>
	<trigger public="1" params="A" get="inline" set="null" line="133" static="1">
		<f a=""><c path="tink.core.FutureTrigger"><c path="trigger.A"/></c></f>
		<meta><m n=":noUsing"/></meta>
	</trigger>
</class></impl>
	</abstract>
	<class path="tink.core._Future.Future_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Future.hx" private="1" module="tink.core.Future">
		<_new public="1" set="method" line="10" static="1">
			<f a="f">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<handle public="1" get="inline" set="null" line="12" static="1">
			<f a="this:callback">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<meta><m n=":impl"/></meta>
		</handle>
		<gather public="1" set="method" line="15" static="1">
			<f a="this">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<x path="tink.core.Future"><c path="tink.core.Future.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</gather>
		<first public="1" set="method" line="27" static="1">
			<f a="this:other">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<x path="tink.core.Future"><c path="tink.core.Future.T"/></x>
				<x path="tink.core.Future"><c path="tink.core.Future.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</first>
		<map public="1" params="A" set="method" line="33" static="1">
			<f a="this:f:?gather" v="::true">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<f a="">
					<c path="tink.core.Future.T"/>
					<c path="map.A"/>
				</f>
				<x path="Bool"/>
				<x path="tink.core.Future"><c path="map.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</map>
		<flatMap public="1" params="A" set="method" line="40" static="1">
			<f a="this:next:?gather" v="::true">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<f a="">
					<c path="tink.core.Future.T"/>
					<x path="tink.core.Future"><c path="flatMap.A"/></x>
				</f>
				<x path="Bool"/>
				<x path="tink.core.Future"><c path="flatMap.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</flatMap>
		<merge public="1" params="A:R" set="method" line="47" static="1">
			<f a="this:other:merger:?gather" v=":::true">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Future.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<x path="tink.core.Future"><c path="merge.A"/></x>
				<f a=":">
					<c path="tink.core.Future.T"/>
					<c path="merge.A"/>
					<c path="merge.R"/>
				</f>
				<x path="Bool"/>
				<x path="tink.core.Future"><c path="merge.R"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</merge>
		<flatten public="1" params="A" set="method" line="52" static="1"><f a="f">
	<x path="tink.core.Future"><x path="tink.core.Future"><c path="flatten.A"/></x></x>
	<x path="tink.core.Future"><c path="flatten.A"/></x>
</f></flatten>
		<fromTrigger params="A" get="inline" set="null" line="61" static="1">
			<f a="trigger">
				<c path="tink.core.FutureTrigger"><c path="fromTrigger.A"/></c>
				<x path="tink.core.Future"><c path="fromTrigger.A"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromTrigger>
		<ofMany public="1" params="A" set="method" line="64" static="1"><f a="futures:?gather" v=":true">
	<c path="Array"><x path="tink.core.Future"><c path="ofMany.A"/></x></c>
	<x path="Bool"/>
	<x path="tink.core.Future"><c path="Array"><c path="ofMany.A"/></c></x>
</f></ofMany>
		<fromMany params="A" set="method" line="81" static="1">
			<f a="futures">
				<c path="Array"><x path="tink.core.Future"><c path="fromMany.A"/></x></c>
				<x path="tink.core.Future"><c path="Array"><c path="fromMany.A"/></c></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromMany>
		<lazy public="1" params="A" set="method" line="85" static="1">
			<f a="l">
				<x path="tink.core.Lazy"><c path="lazy.A"/></x>
				<x path="tink.core.Future"><c path="lazy.A"/></x>
			</f>
			<meta><m n=":noUsing"/></meta>
		</lazy>
		<sync public="1" params="A" set="method" line="88" static="1">
			<f a="v">
				<c path="sync.A"/>
				<x path="tink.core.Future"><c path="sync.A"/></x>
			</f>
			<meta><m n=":noUsing"/></meta>
		</sync>
		<async public="1" params="A" set="method" line="91" static="1">
			<f a="f:?lazy" v=":false">
				<f a="">
					<f a="">
						<c path="async.A"/>
						<x path="Void"/>
					</f>
					<x path="Void"/>
				</f>
				<x path="Bool"/>
				<x path="tink.core.Future"><c path="async.A"/></x>
			</f>
			<meta><m n=":noUsing"/></meta>
		</async>
		<or public="1" params="A" set="method" line="100" static="1">
			<f a="a:b">
				<x path="tink.core.Future"><c path="or.A"/></x>
				<x path="tink.core.Future"><c path="or.A"/></x>
				<x path="tink.core.Future"><c path="or.A"/></x>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e>a||b</e></m>
			</meta>
		</or>
		<either public="1" params="A:B" set="method" line="103" static="1">
			<f a="a:b">
				<x path="tink.core.Future"><c path="either.A"/></x>
				<x path="tink.core.Future"><c path="either.B"/></x>
				<x path="tink.core.Future"><e path="tink.core.Either">
	<c path="either.A"/>
	<c path="either.B"/>
</e></x>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e>a||b</e></m>
			</meta>
		</either>
		<and public="1" params="A:B" set="method" line="106" static="1">
			<f a="a:b">
				<x path="tink.core.Future"><c path="and.A"/></x>
				<x path="tink.core.Future"><c path="and.B"/></x>
				<x path="tink.core.Future"><x path="tink.core.Pair">
	<c path="and.A"/>
	<c path="and.B"/>
</x></x>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[a&&b]]></e></m>
			</meta>
		</and>
		<_tryFailingFlatMap public="1" params="D:F:R" set="method" line="109" static="1">
			<f a="f:map">
				<t path="tink.core.Surprise">
					<c path="_tryFailingFlatMap.D"/>
					<c path="_tryFailingFlatMap.F"/>
				</t>
				<f a="">
					<c path="_tryFailingFlatMap.D"/>
					<t path="tink.core.Surprise">
						<c path="_tryFailingFlatMap.R"/>
						<c path="_tryFailingFlatMap.F"/>
					</t>
				</f>
				<x path="tink.core.Future"><e path="tink.core.Outcome">
	<c path="_tryFailingFlatMap.R"/>
	<c path="_tryFailingFlatMap.F"/>
</e></x>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[a>>b]]></e></m>
			</meta>
		</_tryFailingFlatMap>
		<_tryFlatMap public="1" params="D:F:R" set="method" line="115" static="1">
			<f a="f:map">
				<t path="tink.core.Surprise">
					<c path="_tryFlatMap.D"/>
					<c path="_tryFlatMap.F"/>
				</t>
				<f a="">
					<c path="_tryFlatMap.D"/>
					<x path="tink.core.Future"><c path="_tryFlatMap.R"/></x>
				</f>
				<t path="tink.core.Surprise">
					<c path="_tryFlatMap.R"/>
					<c path="_tryFlatMap.F"/>
				</t>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[a>>b]]></e></m>
			</meta>
		</_tryFlatMap>
		<_tryFailingMap public="1" params="D:F:R" set="method" line="121" static="1">
			<f a="f:map">
				<t path="tink.core.Surprise">
					<c path="_tryFailingMap.D"/>
					<c path="_tryFailingMap.F"/>
				</t>
				<f a="">
					<c path="_tryFailingMap.D"/>
					<e path="tink.core.Outcome">
						<c path="_tryFailingMap.R"/>
						<c path="_tryFailingMap.F"/>
					</e>
				</f>
				<x path="tink.core.Future"><e path="tink.core.Outcome">
	<c path="_tryFailingMap.R"/>
	<c path="_tryFailingMap.F"/>
</e></x>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[a>>b]]></e></m>
			</meta>
		</_tryFailingMap>
		<_tryMap public="1" params="D:F:R" set="method" line="124" static="1">
			<f a="f:map">
				<t path="tink.core.Surprise">
					<c path="_tryMap.D"/>
					<c path="_tryMap.F"/>
				</t>
				<f a="">
					<c path="_tryMap.D"/>
					<c path="_tryMap.R"/>
				</f>
				<x path="tink.core.Future"><e path="tink.core.Outcome">
	<c path="_tryMap.R"/>
	<c path="_tryMap.F"/>
</e></x>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[a>>b]]></e></m>
			</meta>
		</_tryMap>
		<_flatMap public="1" params="T:R" set="method" line="127" static="1">
			<f a="f:map">
				<x path="tink.core.Future"><c path="_flatMap.T"/></x>
				<f a="">
					<c path="_flatMap.T"/>
					<x path="tink.core.Future"><c path="_flatMap.R"/></x>
				</f>
				<x path="tink.core.Future"><c path="_flatMap.R"/></x>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[a>>b]]></e></m>
			</meta>
		</_flatMap>
		<_map public="1" params="T:R" set="method" line="130" static="1">
			<f a="f:map">
				<x path="tink.core.Future"><c path="_map.T"/></x>
				<f a="">
					<c path="_map.T"/>
					<c path="_map.R"/>
				</f>
				<x path="tink.core.Future"><c path="_map.R"/></x>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":op"><e><![CDATA[a>>b]]></e></m>
			</meta>
		</_map>
		<trigger public="1" params="A" get="inline" set="null" line="133" static="1">
			<f a=""><c path="tink.core.FutureTrigger"><c path="trigger.A"/></c></f>
			<meta><m n=":noUsing"/></meta>
		</trigger>
	</class>
	<class path="tink.core.FutureTrigger" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Future.hx" module="tink.core.Future">
		<result><c path="tink.core.FutureTrigger.T"/></result>
		<list><x path="tink.core.CallbackList"><c path="tink.core.FutureTrigger.T"/></x></list>
		<future><x path="tink.core.Future"><c path="tink.core.FutureTrigger.T"/></x></future>
		<asFuture public="1" get="inline" set="null" line="155"><f a=""><x path="tink.core.Future"><c path="tink.core.FutureTrigger.T"/></x></f></asFuture>
		<trigger public="1" get="inline" set="null" line="157"><f a="result">
	<c path="tink.core.FutureTrigger.T"/>
	<x path="Bool"/>
</f></trigger>
		<new public="1" set="method" line="143"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="tink.core.Surprise" params="D:F" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Future.hx" module="tink.core.Future"><x path="tink.core.Future"><e path="tink.core.Outcome">
	<c path="tink.core.Surprise.D"/>
	<c path="tink.core.Surprise.F"/>
</e></x></typedef>
	<abstract path="tink.core.Lazy" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Lazy.hx">
		<from>
			<icast field="ofFunc"><f a=""><c path="ofFunc.T"/></f></icast>
			<icast field="ofConst"><c path="ofConst.T"/></icast>
		</from>
		<this><f a=""><c path="tink.core.Lazy.T"/></f></this>
		<to><icast field="get"><c path="tink.core.Lazy.T"/></icast></to>
		<impl><class path="tink.core._Lazy.Lazy_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Lazy.hx" private="1" module="tink.core.Lazy">
	<_new get="inline" set="null" line="5" static="1">
		<f a="r">
			<f a=""><c path="tink.core.Lazy.T"/></f>
			<f a=""><c path="tink.core.Lazy.T"/></f>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get public="1" get="inline" set="null" line="7" static="1">
		<f a="this">
			<f a=""><c path="tink.core.Lazy.T"/></f>
			<c path="tink.core.Lazy.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</get>
	<ofFunc public="1" params="T" set="method" line="10" static="1">
		<f a="f">
			<f a=""><c path="ofFunc.T"/></f>
			<x path="tink.core.Lazy"><c path="ofFunc.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</ofFunc>
	<map public="1" params="A" get="inline" set="null" line="25" static="1">
		<f a="this:f">
			<f a=""><c path="tink.core.Lazy.T"/></f>
			<f a="">
				<c path="tink.core.Lazy.T"/>
				<c path="map.A"/>
			</f>
			<x path="tink.core.Lazy"><c path="map.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</map>
	<flatMap public="1" params="A" get="inline" set="null" line="28" static="1">
		<f a="this:f">
			<f a=""><c path="tink.core.Lazy.T"/></f>
			<f a="">
				<c path="tink.core.Lazy.T"/>
				<x path="tink.core.Lazy"><c path="flatMap.A"/></x>
			</f>
			<x path="tink.core.Lazy"><c path="flatMap.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</flatMap>
	<ofConst params="T" get="inline" set="null" line="31" static="1">
		<f a="c">
			<c path="ofConst.T"/>
			<x path="tink.core.Lazy"><c path="ofConst.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</ofConst>
</class></impl>
	</abstract>
	<class path="tink.core._Lazy.Lazy_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Lazy.hx" private="1" module="tink.core.Lazy">
		<_new get="inline" set="null" line="5" static="1">
			<f a="r">
				<f a=""><c path="tink.core.Lazy.T"/></f>
				<f a=""><c path="tink.core.Lazy.T"/></f>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get public="1" get="inline" set="null" line="7" static="1">
			<f a="this">
				<f a=""><c path="tink.core.Lazy.T"/></f>
				<c path="tink.core.Lazy.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</get>
		<ofFunc public="1" params="T" set="method" line="10" static="1">
			<f a="f">
				<f a=""><c path="ofFunc.T"/></f>
				<x path="tink.core.Lazy"><c path="ofFunc.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</ofFunc>
		<map public="1" params="A" get="inline" set="null" line="25" static="1">
			<f a="this:f">
				<f a=""><c path="tink.core.Lazy.T"/></f>
				<f a="">
					<c path="tink.core.Lazy.T"/>
					<c path="map.A"/>
				</f>
				<x path="tink.core.Lazy"><c path="map.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</map>
		<flatMap public="1" params="A" get="inline" set="null" line="28" static="1">
			<f a="this:f">
				<f a=""><c path="tink.core.Lazy.T"/></f>
				<f a="">
					<c path="tink.core.Lazy.T"/>
					<x path="tink.core.Lazy"><c path="flatMap.A"/></x>
				</f>
				<x path="tink.core.Lazy"><c path="flatMap.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</flatMap>
		<ofConst params="T" get="inline" set="null" line="31" static="1">
			<f a="c">
				<c path="ofConst.T"/>
				<x path="tink.core.Lazy"><c path="ofConst.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</ofConst>
	</class>
	<enum path="tink.core.Noise" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Noise.hx">
		<Noise/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="tink.core.Outcome" params="Data:Failure" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Outcome.hx">
		<Success a="data"><c path="tink.core.Outcome.Data"/></Success>
		<Failure a="failure"><c path="tink.core.Outcome.Failure"/></Failure>
	</enum>
	<class path="tink.core.OutcomeTools" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Outcome.hx" module="tink.core.Outcome">
		<sure public="1" params="D:F" set="method" line="12" static="1"><f a="outcome">
	<e path="tink.core.Outcome">
		<c path="sure.D"/>
		<c path="sure.F"/>
	</e>
	<c path="sure.D"/>
</f></sure>
		<toOption public="1" params="D:F" set="method" line="24" static="1"><f a="outcome">
	<e path="tink.core.Outcome">
		<c path="toOption.D"/>
		<c path="toOption.F"/>
	</e>
	<e path="haxe.ds.Option"><c path="toOption.D"/></e>
</f></toOption>
		<toOutcome public="1" params="D" set="method" line="31" static="1"><f a="option:?pos" v=":null">
	<e path="haxe.ds.Option"><c path="toOutcome.D"/></e>
	<t path="haxe.PosInfos"/>
	<e path="tink.core.Outcome">
		<c path="toOutcome.D"/>
		<t path="tink.core.Error"/>
	</e>
</f></toOutcome>
		<orUse public="1" params="D:F" get="inline" set="null" line="40" static="1"><f a="outcome:fallback">
	<e path="tink.core.Outcome">
		<c path="orUse.D"/>
		<c path="orUse.F"/>
	</e>
	<x path="tink.core.Lazy"><c path="orUse.D"/></x>
	<c path="orUse.D"/>
</f></orUse>
		<orTry public="1" params="D:F" get="inline" set="null" line="47" static="1"><f a="outcome:fallback">
	<e path="tink.core.Outcome">
		<c path="orTry.D"/>
		<c path="orTry.F"/>
	</e>
	<x path="tink.core.Lazy"><e path="tink.core.Outcome">
	<c path="orTry.D"/>
	<c path="orTry.F"/>
</e></x>
	<e path="tink.core.Outcome">
		<c path="orTry.D"/>
		<c path="orTry.F"/>
	</e>
</f></orTry>
		<equals public="1" params="D:F" get="inline" set="null" line="54" static="1"><f a="outcome:to">
	<e path="tink.core.Outcome">
		<c path="equals.D"/>
		<c path="equals.F"/>
	</e>
	<c path="equals.D"/>
	<x path="Bool"/>
</f></equals>
		<map public="1" params="A:B:F" get="inline" set="null" line="61" static="1"><f a="outcome:transform">
	<e path="tink.core.Outcome">
		<c path="map.A"/>
		<c path="map.F"/>
	</e>
	<f a="">
		<c path="map.A"/>
		<c path="map.B"/>
	</f>
	<e path="tink.core.Outcome">
		<c path="map.B"/>
		<c path="map.F"/>
	</e>
</f></map>
		<isSuccess public="1" params="D:F" get="inline" set="null" line="70" static="1"><f a="outcome">
	<e path="tink.core.Outcome">
		<c path="isSuccess.D"/>
		<c path="isSuccess.F"/>
	</e>
	<x path="Bool"/>
</f></isSuccess>
		<flatMap public="1" params="DIn:FIn:DOut:FOut" set="method" line="77" static="1"><f a="o:mapper">
	<e path="tink.core.Outcome">
		<c path="flatMap.DIn"/>
		<c path="flatMap.FIn"/>
	</e>
	<x path="tink.core._Outcome.OutcomeMapper">
		<c path="flatMap.DIn"/>
		<c path="flatMap.FIn"/>
		<c path="flatMap.DOut"/>
		<c path="flatMap.FOut"/>
	</x>
	<e path="tink.core.Outcome">
		<c path="flatMap.DOut"/>
		<c path="flatMap.FOut"/>
	</e>
</f></flatMap>
	</class>
	<abstract path="tink.core._Outcome.OutcomeMapper" params="DIn:FIn:DOut:FOut" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Outcome.hx" private="1" module="tink.core.Outcome">
		<from>
			<icast field="withSameError"><f a="">
	<c path="withSameError.In"/>
	<e path="tink.core.Outcome">
		<c path="withSameError.Out"/>
		<c path="withSameError.Error"/>
	</e>
</f></icast>
			<icast field="withEitherError"><f a="">
	<c path="withEitherError.DIn"/>
	<e path="tink.core.Outcome">
		<c path="withEitherError.DOut"/>
		<c path="withEitherError.FOut"/>
	</e>
</f></icast>
		</from>
		<this><a><f><f a="">
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMapper.DIn"/>
		<c path="tink.core._Outcome.OutcomeMapper.FIn"/>
	</e>
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMapper.DOut"/>
		<c path="tink.core._Outcome.OutcomeMapper.FOut"/>
	</e>
</f></f></a></this>
		<impl><class path="tink.core._Outcome.OutcomeMapper_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Outcome.hx" private="1" module="tink.core.Outcome">
	<_new set="method" line="83" static="1">
		<f a="f">
			<f a="">
				<e path="tink.core.Outcome">
					<c path="tink.core._Outcome.OutcomeMapper.DIn"/>
					<c path="tink.core._Outcome.OutcomeMapper.FIn"/>
				</e>
				<e path="tink.core.Outcome">
					<c path="tink.core._Outcome.OutcomeMapper.DOut"/>
					<c path="tink.core._Outcome.OutcomeMapper.FOut"/>
				</e>
			</f>
			<a><f><f a="">
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMapper.DIn"/>
		<c path="tink.core._Outcome.OutcomeMapper.FIn"/>
	</e>
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMapper.DOut"/>
		<c path="tink.core._Outcome.OutcomeMapper.FOut"/>
	</e>
</f></f></a>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<apply public="1" set="method" line="84" static="1">
		<f a="this:o">
			<a><f><f a="">
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMapper.DIn"/>
		<c path="tink.core._Outcome.OutcomeMapper.FIn"/>
	</e>
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMapper.DOut"/>
		<c path="tink.core._Outcome.OutcomeMapper.FOut"/>
	</e>
</f></f></a>
			<e path="tink.core.Outcome">
				<c path="tink.core._Outcome.OutcomeMapper.DIn"/>
				<c path="tink.core._Outcome.OutcomeMapper.FIn"/>
			</e>
			<e path="tink.core.Outcome">
				<c path="tink.core._Outcome.OutcomeMapper.DOut"/>
				<c path="tink.core._Outcome.OutcomeMapper.FOut"/>
			</e>
		</f>
		<meta><m n=":impl"/></meta>
	</apply>
	<withSameError params="In:Out:Error" set="method" line="87" static="1">
		<f a="f">
			<f a="">
				<c path="withSameError.In"/>
				<e path="tink.core.Outcome">
					<c path="withSameError.Out"/>
					<c path="withSameError.Error"/>
				</e>
			</f>
			<x path="tink.core._Outcome.OutcomeMapper">
				<c path="withSameError.In"/>
				<c path="withSameError.Error"/>
				<c path="withSameError.Out"/>
				<c path="withSameError.Error"/>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</withSameError>
	<withEitherError params="DIn:FIn:DOut:FOut" set="method" line="96" static="1">
		<f a="f">
			<f a="">
				<c path="withEitherError.DIn"/>
				<e path="tink.core.Outcome">
					<c path="withEitherError.DOut"/>
					<c path="withEitherError.FOut"/>
				</e>
			</f>
			<x path="tink.core._Outcome.OutcomeMapper">
				<c path="withEitherError.DIn"/>
				<c path="withEitherError.FIn"/>
				<c path="withEitherError.DOut"/>
				<e path="tink.core.Either">
					<c path="withEitherError.FIn"/>
					<c path="withEitherError.FOut"/>
				</e>
			</x>
		</f>
		<meta><m n=":from"/></meta>
	</withEitherError>
</class></impl>
	</abstract>
	<class path="tink.core._Outcome.OutcomeMapper_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Outcome.hx" private="1" module="tink.core.Outcome">
		<_new set="method" line="83" static="1">
			<f a="f">
				<f a="">
					<e path="tink.core.Outcome">
						<c path="tink.core._Outcome.OutcomeMapper.DIn"/>
						<c path="tink.core._Outcome.OutcomeMapper.FIn"/>
					</e>
					<e path="tink.core.Outcome">
						<c path="tink.core._Outcome.OutcomeMapper.DOut"/>
						<c path="tink.core._Outcome.OutcomeMapper.FOut"/>
					</e>
				</f>
				<a><f><f a="">
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMapper.DIn"/>
		<c path="tink.core._Outcome.OutcomeMapper.FIn"/>
	</e>
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMapper.DOut"/>
		<c path="tink.core._Outcome.OutcomeMapper.FOut"/>
	</e>
</f></f></a>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<apply public="1" set="method" line="84" static="1">
			<f a="this:o">
				<a><f><f a="">
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMapper.DIn"/>
		<c path="tink.core._Outcome.OutcomeMapper.FIn"/>
	</e>
	<e path="tink.core.Outcome">
		<c path="tink.core._Outcome.OutcomeMapper.DOut"/>
		<c path="tink.core._Outcome.OutcomeMapper.FOut"/>
	</e>
</f></f></a>
				<e path="tink.core.Outcome">
					<c path="tink.core._Outcome.OutcomeMapper.DIn"/>
					<c path="tink.core._Outcome.OutcomeMapper.FIn"/>
				</e>
				<e path="tink.core.Outcome">
					<c path="tink.core._Outcome.OutcomeMapper.DOut"/>
					<c path="tink.core._Outcome.OutcomeMapper.FOut"/>
				</e>
			</f>
			<meta><m n=":impl"/></meta>
		</apply>
		<withSameError params="In:Out:Error" set="method" line="87" static="1">
			<f a="f">
				<f a="">
					<c path="withSameError.In"/>
					<e path="tink.core.Outcome">
						<c path="withSameError.Out"/>
						<c path="withSameError.Error"/>
					</e>
				</f>
				<x path="tink.core._Outcome.OutcomeMapper">
					<c path="withSameError.In"/>
					<c path="withSameError.Error"/>
					<c path="withSameError.Out"/>
					<c path="withSameError.Error"/>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</withSameError>
		<withEitherError params="DIn:FIn:DOut:FOut" set="method" line="96" static="1">
			<f a="f">
				<f a="">
					<c path="withEitherError.DIn"/>
					<e path="tink.core.Outcome">
						<c path="withEitherError.DOut"/>
						<c path="withEitherError.FOut"/>
					</e>
				</f>
				<x path="tink.core._Outcome.OutcomeMapper">
					<c path="withEitherError.DIn"/>
					<c path="withEitherError.FIn"/>
					<c path="withEitherError.DOut"/>
					<e path="tink.core.Either">
						<c path="withEitherError.FIn"/>
						<c path="withEitherError.FOut"/>
					</e>
				</x>
			</f>
			<meta><m n=":from"/></meta>
		</withEitherError>
	</class>
	<abstract path="tink.core.Pair" params="A:B" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Pair.hx">
		<this><x path="tink.core.MPair">
	<c path="tink.core.Pair.A"/>
	<c path="tink.core.Pair.B"/>
</x></this>
		<to><icast field="toBool"><x path="Bool"/></icast></to>
		<impl><class path="tink.core._Pair.Pair_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Pair.hx" private="1" module="tink.core.Pair">
	<a public="1" get="accessor" set="null" static="1">
		<c path="tink.core.Pair.A"/>
		<meta><m n=":impl"/></meta>
	</a>
	<b public="1" get="accessor" set="null" static="1">
		<c path="tink.core.Pair.B"/>
		<meta><m n=":impl"/></meta>
	</b>
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a="a:b">
			<c path="tink.core.Pair.A"/>
			<c path="tink.core.Pair.B"/>
			<x path="tink.core.MPair">
				<c path="tink.core.Pair.A"/>
				<c path="tink.core.Pair.B"/>
			</x>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_a get="inline" set="null" line="10" static="1">
		<f a="this">
			<x path="tink.core.MPair">
				<c path="tink.core.Pair.A"/>
				<c path="tink.core.Pair.B"/>
			</x>
			<c path="tink.core.Pair.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_a>
	<get_b get="inline" set="null" line="11" static="1">
		<f a="this">
			<x path="tink.core.MPair">
				<c path="tink.core.Pair.A"/>
				<c path="tink.core.Pair.B"/>
			</x>
			<c path="tink.core.Pair.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_b>
	<toBool get="inline" set="null" line="13" static="1">
		<f a="this">
			<x path="tink.core.MPair">
				<c path="tink.core.Pair.A"/>
				<c path="tink.core.Pair.B"/>
			</x>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toBool>
	<isNil public="1" set="method" line="16" static="1">
		<f a="this">
			<x path="tink.core.MPair">
				<c path="tink.core.Pair.A"/>
				<c path="tink.core.Pair.B"/>
			</x>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":op"><e>'???'</e></m>
		</meta>
	</isNil>
	<nil public="1" params="A:B" set="method" line="19" static="1"><f a=""><x path="tink.core.Pair">
	<c path="nil.A"/>
	<c path="nil.B"/>
</x></f></nil>
</class></impl>
	</abstract>
	<class path="tink.core._Pair.Pair_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Pair.hx" private="1" module="tink.core.Pair">
		<a public="1" get="accessor" set="null" static="1">
			<c path="tink.core.Pair.A"/>
			<meta><m n=":impl"/></meta>
		</a>
		<b public="1" get="accessor" set="null" static="1">
			<c path="tink.core.Pair.B"/>
			<meta><m n=":impl"/></meta>
		</b>
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a="a:b">
				<c path="tink.core.Pair.A"/>
				<c path="tink.core.Pair.B"/>
				<x path="tink.core.MPair">
					<c path="tink.core.Pair.A"/>
					<c path="tink.core.Pair.B"/>
				</x>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_a get="inline" set="null" line="10" static="1">
			<f a="this">
				<x path="tink.core.MPair">
					<c path="tink.core.Pair.A"/>
					<c path="tink.core.Pair.B"/>
				</x>
				<c path="tink.core.Pair.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_a>
		<get_b get="inline" set="null" line="11" static="1">
			<f a="this">
				<x path="tink.core.MPair">
					<c path="tink.core.Pair.A"/>
					<c path="tink.core.Pair.B"/>
				</x>
				<c path="tink.core.Pair.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_b>
		<toBool get="inline" set="null" line="13" static="1">
			<f a="this">
				<x path="tink.core.MPair">
					<c path="tink.core.Pair.A"/>
					<c path="tink.core.Pair.B"/>
				</x>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toBool>
		<isNil public="1" set="method" line="16" static="1">
			<f a="this">
				<x path="tink.core.MPair">
					<c path="tink.core.Pair.A"/>
					<c path="tink.core.Pair.B"/>
				</x>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":op"><e>'???'</e></m>
			</meta>
		</isNil>
		<nil public="1" params="A:B" set="method" line="19" static="1"><f a=""><x path="tink.core.Pair">
	<c path="nil.A"/>
	<c path="nil.B"/>
</x></f></nil>
	</class>
	<typedef path="tink.core._Pair.Data" params="A:B" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Pair.hx" private="1" module="tink.core.Pair"><c path="neko.NativeArray"><d/></c></typedef>
	<abstract path="tink.core.MPair" params="A:B" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Pair.hx" module="tink.core.Pair">
		<this><t path="tink.core._Pair.Data">
	<c path="tink.core.MPair.A"/>
	<c path="tink.core.MPair.B"/>
</t></this>
		<impl><class path="tink.core._Pair.MPair_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Pair.hx" private="1" module="tink.core.Pair">
	<a public="1" get="accessor" set="accessor" static="1">
		<c path="tink.core.MPair.A"/>
		<meta><m n=":impl"/></meta>
	</a>
	<b public="1" get="accessor" set="accessor" static="1">
		<c path="tink.core.MPair.B"/>
		<meta><m n=":impl"/></meta>
	</b>
	<_new public="1" get="inline" set="null" line="44" static="1">
		<f a="a:b">
			<c path="tink.core.MPair.A"/>
			<c path="tink.core.MPair.B"/>
			<t path="tink.core._Pair.Data">
				<c path="tink.core.MPair.A"/>
				<c path="tink.core.MPair.B"/>
			</t>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_a get="inline" set="null" line="53" static="1">
		<f a="this">
			<t path="tink.core._Pair.Data">
				<c path="tink.core.MPair.A"/>
				<c path="tink.core.MPair.B"/>
			</t>
			<c path="tink.core.MPair.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_a>
	<get_b get="inline" set="null" line="56" static="1">
		<f a="this">
			<t path="tink.core._Pair.Data">
				<c path="tink.core.MPair.A"/>
				<c path="tink.core.MPair.B"/>
			</t>
			<c path="tink.core.MPair.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_b>
	<set_a get="inline" set="null" line="59" static="1">
		<f a="this:v">
			<t path="tink.core._Pair.Data">
				<c path="tink.core.MPair.A"/>
				<c path="tink.core.MPair.B"/>
			</t>
			<c path="tink.core.MPair.A"/>
			<c path="tink.core.MPair.A"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_a>
	<set_b get="inline" set="null" line="62" static="1">
		<f a="this:v">
			<t path="tink.core._Pair.Data">
				<c path="tink.core.MPair.A"/>
				<c path="tink.core.MPair.B"/>
			</t>
			<c path="tink.core.MPair.B"/>
			<c path="tink.core.MPair.B"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_b>
</class></impl>
	</abstract>
	<class path="tink.core._Pair.MPair_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Pair.hx" private="1" module="tink.core.Pair">
		<a public="1" get="accessor" set="accessor" static="1">
			<c path="tink.core.MPair.A"/>
			<meta><m n=":impl"/></meta>
		</a>
		<b public="1" get="accessor" set="accessor" static="1">
			<c path="tink.core.MPair.B"/>
			<meta><m n=":impl"/></meta>
		</b>
		<_new public="1" get="inline" set="null" line="44" static="1">
			<f a="a:b">
				<c path="tink.core.MPair.A"/>
				<c path="tink.core.MPair.B"/>
				<t path="tink.core._Pair.Data">
					<c path="tink.core.MPair.A"/>
					<c path="tink.core.MPair.B"/>
				</t>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_a get="inline" set="null" line="53" static="1">
			<f a="this">
				<t path="tink.core._Pair.Data">
					<c path="tink.core.MPair.A"/>
					<c path="tink.core.MPair.B"/>
				</t>
				<c path="tink.core.MPair.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_a>
		<get_b get="inline" set="null" line="56" static="1">
			<f a="this">
				<t path="tink.core._Pair.Data">
					<c path="tink.core.MPair.A"/>
					<c path="tink.core.MPair.B"/>
				</t>
				<c path="tink.core.MPair.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_b>
		<set_a get="inline" set="null" line="59" static="1">
			<f a="this:v">
				<t path="tink.core._Pair.Data">
					<c path="tink.core.MPair.A"/>
					<c path="tink.core.MPair.B"/>
				</t>
				<c path="tink.core.MPair.A"/>
				<c path="tink.core.MPair.A"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_a>
		<set_b get="inline" set="null" line="62" static="1">
			<f a="this:v">
				<t path="tink.core._Pair.Data">
					<c path="tink.core.MPair.A"/>
					<c path="tink.core.MPair.B"/>
				</t>
				<c path="tink.core.MPair.B"/>
				<c path="tink.core.MPair.B"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_b>
	</class>
	<abstract path="tink.core.Ref" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Ref.hx">
		<from><icast field="to"><c path="to.A"/></icast></from>
		<this><x path="haxe.ds.Vector"><c path="tink.core.Ref.T"/></x></this>
		<to><icast field="get_value"><c path="tink.core.Ref.T"/></icast></to>
		<impl><class path="tink.core._Ref.Ref_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Ref.hx" private="1" module="tink.core.Ref">
	<value public="1" get="accessor" set="accessor" static="1">
		<c path="tink.core.Ref.T"/>
		<meta><m n=":impl"/></meta>
	</value>
	<_new get="inline" set="null" line="6" static="1">
		<f a=""><x path="haxe.ds.Vector"><c path="tink.core.Ref.T"/></x></f>
		<meta><m n=":impl"/></meta>
	</_new>
	<get_value get="inline" set="null" line="8" static="1">
		<f a="this">
			<x path="haxe.ds.Vector"><c path="tink.core.Ref.T"/></x>
			<c path="tink.core.Ref.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</get_value>
	<set_value get="inline" set="null" line="9" static="1">
		<f a="this:param">
			<x path="haxe.ds.Vector"><c path="tink.core.Ref.T"/></x>
			<c path="tink.core.Ref.T"/>
			<c path="tink.core.Ref.T"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_value>
	<toString public="1" set="method" line="11" static="1">
		<f a="this">
			<x path="haxe.ds.Vector"><c path="tink.core.Ref.T"/></x>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<to public="1" params="A" get="inline" set="null" line="13" static="1">
		<f a="v">
			<c path="to.A"/>
			<x path="tink.core.Ref"><c path="to.A"/></x>
		</f>
		<meta>
			<m n=":noUsing"/>
			<m n=":from"/>
		</meta>
	</to>
</class></impl>
	</abstract>
	<class path="tink.core._Ref.Ref_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Ref.hx" private="1" module="tink.core.Ref">
		<value public="1" get="accessor" set="accessor" static="1">
			<c path="tink.core.Ref.T"/>
			<meta><m n=":impl"/></meta>
		</value>
		<_new get="inline" set="null" line="6" static="1">
			<f a=""><x path="haxe.ds.Vector"><c path="tink.core.Ref.T"/></x></f>
			<meta><m n=":impl"/></meta>
		</_new>
		<get_value get="inline" set="null" line="8" static="1">
			<f a="this">
				<x path="haxe.ds.Vector"><c path="tink.core.Ref.T"/></x>
				<c path="tink.core.Ref.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</get_value>
		<set_value get="inline" set="null" line="9" static="1">
			<f a="this:param">
				<x path="haxe.ds.Vector"><c path="tink.core.Ref.T"/></x>
				<c path="tink.core.Ref.T"/>
				<c path="tink.core.Ref.T"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_value>
		<toString public="1" set="method" line="11" static="1">
			<f a="this">
				<x path="haxe.ds.Vector"><c path="tink.core.Ref.T"/></x>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<to public="1" params="A" get="inline" set="null" line="13" static="1">
			<f a="v">
				<c path="to.A"/>
				<x path="tink.core.Ref"><c path="to.A"/></x>
			</f>
			<meta>
				<m n=":noUsing"/>
				<m n=":from"/>
			</meta>
		</to>
	</class>
	<abstract path="tink.core.Signal" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Signal.hx">
		<this><f a="">
	<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
	<x path="tink.core.CallbackLink"/>
</f></this>
		<impl><class path="tink.core._Signal.Signal_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Signal.hx" private="1" module="tink.core.Signal">
	<_new public="1" get="inline" set="null" line="8" static="1">
		<f a="f">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<handle public="1" get="inline" set="null" line="10" static="1">
		<f a="this:handler">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
			<x path="tink.core.CallbackLink"/>
		</f>
		<meta><m n=":impl"/></meta>
	</handle>
	<map public="1" params="A" set="method" line="13" static="1">
		<f a="this:f:?gather" v="::true">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<f a="">
				<c path="tink.core.Signal.T"/>
				<c path="map.A"/>
			</f>
			<x path="Bool"/>
			<x path="tink.core.Signal"><c path="map.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</map>
	<flatMap public="1" params="A" set="method" line="20" static="1">
		<f a="this:f:?gather" v="::true">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<f a="">
				<c path="tink.core.Signal.T"/>
				<x path="tink.core.Future"><c path="flatMap.A"/></x>
			</f>
			<x path="Bool"/>
			<x path="tink.core.Signal"><c path="flatMap.A"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</flatMap>
	<filter public="1" set="method" line="27" static="1">
		<f a="this:f:?gather" v="::true">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<f a="">
				<c path="tink.core.Signal.T"/>
				<x path="Bool"/>
			</f>
			<x path="Bool"/>
			<x path="tink.core.Signal"><c path="tink.core.Signal.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</filter>
	<join public="1" set="method" line="34" static="1">
		<f a="this:other:?gather" v="::true">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<x path="tink.core.Signal"><c path="tink.core.Signal.T"/></x>
			<x path="Bool"/>
			<x path="tink.core.Signal"><c path="tink.core.Signal.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</join>
	<next public="1" set="method" line="47" static="1">
		<f a="this">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<x path="tink.core.Future"><c path="tink.core.Signal.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</next>
	<noise public="1" set="method" line="53" static="1">
		<f a="this">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<x path="tink.core.Signal"><e path="tink.core.Noise"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</noise>
	<gather public="1" set="method" line="56" static="1">
		<f a="this">
			<f a="">
				<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<x path="tink.core.Signal"><c path="tink.core.Signal.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</gather>
	<trigger public="1" params="T" set="method" line="62" static="1"><f a=""><x path="tink.core.SignalTrigger"><c path="trigger.T"/></x></f></trigger>
	<ofClassical public="1" params="A" set="method" line="65" static="1"><f a="add:remove:?gather" v="::true">
	<f a="">
		<f a="">
			<c path="ofClassical.A"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<f a="">
		<f a="">
			<c path="ofClassical.A"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="tink.core.Signal"><c path="ofClassical.A"/></x>
</f></ofClassical>
</class></impl>
	</abstract>
	<class path="tink.core._Signal.Signal_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Signal.hx" private="1" module="tink.core.Signal">
		<_new public="1" get="inline" set="null" line="8" static="1">
			<f a="f">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<handle public="1" get="inline" set="null" line="10" static="1">
			<f a="this:handler">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
				<x path="tink.core.CallbackLink"/>
			</f>
			<meta><m n=":impl"/></meta>
		</handle>
		<map public="1" params="A" set="method" line="13" static="1">
			<f a="this:f:?gather" v="::true">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<f a="">
					<c path="tink.core.Signal.T"/>
					<c path="map.A"/>
				</f>
				<x path="Bool"/>
				<x path="tink.core.Signal"><c path="map.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</map>
		<flatMap public="1" params="A" set="method" line="20" static="1">
			<f a="this:f:?gather" v="::true">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<f a="">
					<c path="tink.core.Signal.T"/>
					<x path="tink.core.Future"><c path="flatMap.A"/></x>
				</f>
				<x path="Bool"/>
				<x path="tink.core.Signal"><c path="flatMap.A"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</flatMap>
		<filter public="1" set="method" line="27" static="1">
			<f a="this:f:?gather" v="::true">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<f a="">
					<c path="tink.core.Signal.T"/>
					<x path="Bool"/>
				</f>
				<x path="Bool"/>
				<x path="tink.core.Signal"><c path="tink.core.Signal.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</filter>
		<join public="1" set="method" line="34" static="1">
			<f a="this:other:?gather" v="::true">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<x path="tink.core.Signal"><c path="tink.core.Signal.T"/></x>
				<x path="Bool"/>
				<x path="tink.core.Signal"><c path="tink.core.Signal.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</join>
		<next public="1" set="method" line="47" static="1">
			<f a="this">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<x path="tink.core.Future"><c path="tink.core.Signal.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</next>
		<noise public="1" set="method" line="53" static="1">
			<f a="this">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<x path="tink.core.Signal"><e path="tink.core.Noise"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</noise>
		<gather public="1" set="method" line="56" static="1">
			<f a="this">
				<f a="">
					<x path="tink.core.Callback"><c path="tink.core.Signal.T"/></x>
					<x path="tink.core.CallbackLink"/>
				</f>
				<x path="tink.core.Signal"><c path="tink.core.Signal.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</gather>
		<trigger public="1" params="T" set="method" line="62" static="1"><f a=""><x path="tink.core.SignalTrigger"><c path="trigger.T"/></x></f></trigger>
		<ofClassical public="1" params="A" set="method" line="65" static="1"><f a="add:remove:?gather" v="::true">
	<f a="">
		<f a="">
			<c path="ofClassical.A"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<f a="">
		<f a="">
			<c path="ofClassical.A"/>
			<x path="Void"/>
		</f>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="tink.core.Signal"><c path="ofClassical.A"/></x>
</f></ofClassical>
	</class>
	<abstract path="tink.core.SignalTrigger" params="T" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Signal.hx" module="tink.core.Signal">
		<from><icast><x path="tink.core.CallbackList"><c path="tink.core.SignalTrigger.T"/></x></icast></from>
		<this><x path="tink.core.CallbackList"><c path="tink.core.SignalTrigger.T"/></x></this>
		<to><icast field="asSignal"><x path="tink.core.Signal"><c path="tink.core.SignalTrigger.T"/></x></icast></to>
		<impl><class path="tink.core._Signal.SignalTrigger_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Signal.hx" private="1" module="tink.core.Signal">
	<_new public="1" get="inline" set="null" line="79" static="1">
		<f a=""><x path="tink.core.CallbackList"><c path="tink.core.SignalTrigger.T"/></x></f>
		<meta><m n=":impl"/></meta>
	</_new>
	<trigger public="1" get="inline" set="null" line="80" static="1">
		<f a="this:event">
			<x path="tink.core.CallbackList"><c path="tink.core.SignalTrigger.T"/></x>
			<c path="tink.core.SignalTrigger.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</trigger>
	<getLength public="1" get="inline" set="null" line="82" static="1">
		<f a="this">
			<x path="tink.core.CallbackList"><c path="tink.core.SignalTrigger.T"/></x>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getLength>
	<asSignal public="1" set="method" line="84" static="1">
		<f a="this">
			<x path="tink.core.CallbackList"><c path="tink.core.SignalTrigger.T"/></x>
			<x path="tink.core.Signal"><c path="tink.core.SignalTrigger.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</asSignal>
</class></impl>
	</abstract>
	<class path="tink.core._Signal.SignalTrigger_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/tink_core/1,0,0-rc,7/src/tink/core/Signal.hx" private="1" module="tink.core.Signal">
		<_new public="1" get="inline" set="null" line="79" static="1">
			<f a=""><x path="tink.core.CallbackList"><c path="tink.core.SignalTrigger.T"/></x></f>
			<meta><m n=":impl"/></meta>
		</_new>
		<trigger public="1" get="inline" set="null" line="80" static="1">
			<f a="this:event">
				<x path="tink.core.CallbackList"><c path="tink.core.SignalTrigger.T"/></x>
				<c path="tink.core.SignalTrigger.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</trigger>
		<getLength public="1" get="inline" set="null" line="82" static="1">
			<f a="this">
				<x path="tink.core.CallbackList"><c path="tink.core.SignalTrigger.T"/></x>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getLength>
		<asSignal public="1" set="method" line="84" static="1">
			<f a="this">
				<x path="tink.core.CallbackList"><c path="tink.core.SignalTrigger.T"/></x>
				<x path="tink.core.Signal"><c path="tink.core.SignalTrigger.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</asSignal>
	</class>
	<enum path="ufront.api.ApiReturnType" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/api/ApiReturnType.hx">
		<ARTFuture/>
		<ARTOutcome/>
		<ARTVoid/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="ufront.api.UFApi" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/api/UFApi.hx">
		<auth public="1">
			<c path="ufront.auth.UFAuthHandler"><c path="ufront.auth.UFAuthUser"/></c>
			<meta>
				<m n="name"><e>"auth"</e></m>
				<m n="type"><e>"ufront.auth.UFAuthHandler"</e></m>
				<m n="inject"/>
			</meta>
			<haxe_doc>The current `ufront.auth.UFAuthHandler`.

		You can use this to check permissions etc.

		This is inserted via dependency injection.</haxe_doc>
		</auth>
		<messages public="1">
			<c path="ufront.log.MessageList"/>
			<meta>
				<m n="name"><e>"messages"</e></m>
				<m n="type"><e>"ufront.log.MessageList"</e></m>
				<m n=":noCompletion"/>
				<m n="inject"/>
			</meta>
			<haxe_doc>The messages list.

		When called from a web context, this will usually result in the HttpContext's `messages` array being pushed to so your log handlers can handle the messages appropriately.

		This is inserted via dependency injection, and must be injected for `ufTrace`, `ufLog`, `ufWarn` and `ufError` to function correctly.</haxe_doc>
		</messages>
		<ufTrace get="inline" set="null" line="56">
			<f a="msg:?pos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>A shortcut to `HttpContext.ufTrace`

		A `messages` array must be injected for these to function correctly.  Use `ufront.handler.MVCHandler` and `ufront.handler.RemotingHandler` to inject this correctly.</haxe_doc>
		</ufTrace>
		<ufLog get="inline" set="null" line="66">
			<f a="msg:?pos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>A shortcut to `HttpContext.ufLog`

		A `messages` array must be injected for these to function correctly.  Use `ufront.handler.MVCHandler` and `ufront.handler.RemotingHandler` to inject this correctly.</haxe_doc>
		</ufLog>
		<ufWarn get="inline" set="null" line="76">
			<f a="msg:?pos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>A shortcut to `HttpContext.ufWarn`

		A `messages` array must be injected for these to function correctly.  Use `ufront.handler.MVCHandler` and `ufront.handler.RemotingHandler` to inject this correctly.</haxe_doc>
		</ufWarn>
		<ufError get="inline" set="null" line="86">
			<f a="msg:?pos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>A shortcut to `HttpContext.ufError`

		A `messages` array must be injected for these to function correctly.  Use `ufront.handler.MVCHandler` and `ufront.handler.RemotingHandler` to inject this correctly.</haxe_doc>
		</ufError>
		<toString public="1" set="method" line="94">
			<f a=""><c path="String"/></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Print the current class name</haxe_doc>
		</toString>
		<new public="1" set="method" line="48">
			<f a=""><x path="Void"/></f>
			<haxe_doc>A default constructor.

		This has no effect, it just exists so you don't need to create a constructor on every child class.</haxe_doc>
		</new>
		<haxe_doc>This class provides a build macro that will take some extra precautions to make
	sure your Api class compiles successfully on the client as well as the server.

	Basically, the build macro strips out private methods, and the method bodies of public methods,
	so all that is left is the method signiature.

	This way, the Proxy class will still be created successfully, but none of the server-side APIs
	get tangled up in client side code.</haxe_doc>
		<meta><m n=":autoBuild"><e>'???'</e></m></meta>
	</class>
	<class path="ufront.api.UFAsyncApi" params="T" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/api/UFApi.hx" module="ufront.api.UFApi">
		<className><c path="String"/></className>
		<api><c path="ufront.api.UFAsyncApi.T"/></api>
		<_makeApiCall params="A:B" set="method" line="121"><f a="method:args:flags">
	<c path="String"/>
	<c path="Array"><d/></c>
	<x path="haxe.EnumFlags"><e path="ufront.api.ApiReturnType"/></x>
	<t path="tink.Surprise">
		<c path="_makeApiCall.A"/>
		<e path="haxe.remoting.RemotingError"><c path="_makeApiCall.B"/></e>
	</t>
</f></_makeApiCall>
		<new public="1" set="method" line="111">
			<f a="api">
				<c path="ufront.api.UFAsyncApi.T"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n="name"><e>"new"</e></m>
				<m n="args"><e>{type:"ufront.api.UFAsyncApi.T",opt:false}</e></m>
				<m n="inject"/>
			</meta>
		</new>
		<haxe_doc><![CDATA[A class that builds an API proxy of an existing UFApi.
	On the server it just wraps results in Futures.
	On the client it uses a `HttpAsyncConnectionWithTraces` to perform remoting.
	Constructor dependency injection is used to get the original API on the server or the remoting connection on the client.
	Usage: `class AsyncLoginApi extends UFAsyncApi<LoginApi> {}`]]></haxe_doc>
		<meta><m n=":autoBuild"><e>'???'</e></m></meta>
	</class>
	<class path="ufront.api.UFApiContext" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/api/UFApiContext.hx">
		<injector><c path="minject.Injector"/></injector>
		<new public="1" set="method" line="53"><f a=""><x path="Void"/></f></new>
		<haxe_doc>RemotingApi is a base class for setting up your Haxe remoting API context.

It uses the `ApiMacros.buildApiContext` macro and `minject` together.

Please only define public variables in the sub class, each one representing an API class
you wish to share with your remoting context.  Eg:

	class MainApi extends ufront.api.RemotingApi {
		var clientAPI:app.client.ClientAPI;
		var purchaseAPI:app.purchase.PurchasingAPI;
	}

Please don't use properties.  And don't define any functions, including the constructor.
All of your API objects (that is, all the variables you specify) will be instantiated
by some of our macro code.

For the server side, this API object can be used in the remoting controller:

	RemotingController.remotingApi = MyApi;

For the client side, another class will be generated in the same location.  So if you have

	my.app.MainApi;

The build macro will generate

	my.app.MainApiClient;

as well as the proxy classes for any APIs that you used:

	my.app.ClientApiProxy;
	my.app.PurchasingApiProxy;

Your ApiClient can be initialised with two constructor arguments: the URL of the remoting end point, and an error handler:

	new my.app.MainApiClient(url, errorHandler);
	new my.app.MainApiClient("http://api.google.com/haxeremoting/", function (e:Dynamic) trace (e));

Please note, you will need to explicitly import the API so that the build macro runs and the proxy is generated.  Otherwise you
will get a "Class not found : my.app.MainApiClient" error.  So instead, do:

	import my.app.MainApi;
	...
	new my.app.MainApiClient(url, errorHandler);</haxe_doc>
		<meta><m n=":autoBuild"><e>'???'</e></m></meta>
	</class>
	<class path="ufront.app.HttpApplication" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/app/HttpApplication.hx">
		<injector public="1">
			<c path="minject.Injector"/>
			<haxe_doc>An injector for things that should be available to all parts of the application.

		Things we could inject:

		- Your App Configuration
		- An ICacheStore implementation
		- An IMailer implementation

		etc.

		This will be made available to the following:

		- Any Middleware - see `ufront.app.UFMiddleware` - for example, RemotingModule, DispatchModule or CacheModule
		- Any request handlers, error or log handlers - see `ufront.app.UFRequestHandler` and `ufront.app.UFErrorHandler`
		- Any child injectors, for example, "controllerInjector" or "apiInjector" in `UfrontApplication`

		By default, any handlers or middleware you add will be added to the injector also.</haxe_doc>
		</injector>
		<requestMiddleware public="1" set="null">
			<c path="Array"><c path="ufront.app.UFRequestMiddleware"/></c>
			<haxe_doc>Middleware to be used in the application, before the request is processed.</haxe_doc>
		</requestMiddleware>
		<requestHandlers public="1" set="null">
			<c path="Array"><c path="ufront.app.UFRequestHandler"/></c>
			<haxe_doc>Handlers that can process this request and write a response.

		Examples:

		 - `ufront.handler.DispatchHandler`
		 - `ufront.handler.RemotingHandler`
		 - StaticHandler (share static files over HTTP)
		 - SASS handler (compile *.css requests from *.sass files using the SASS compiler)</haxe_doc>
		</requestHandlers>
		<responseMiddleware public="1" set="null">
			<c path="Array"><c path="ufront.app.UFResponseMiddleware"/></c>
			<haxe_doc>Middleware to be used in the application, after the request is processed.</haxe_doc>
		</responseMiddleware>
		<logHandlers public="1" set="null">
			<c path="Array"><c path="ufront.app.UFLogHandler"/></c>
			<haxe_doc>Log handlers to use for traces, logs, warnings and errors.

		These may write to log files, trace to the browser console etc.</haxe_doc>
		</logHandlers>
		<errorHandlers public="1" set="null">
			<c path="Array"><c path="ufront.app.UFErrorHandler"/></c>
			<haxe_doc>Error handlers to use if unhandled exceptions or Failures occur.

		These may write to log files, help with debugging, present error pages to the browser etc.</haxe_doc>
		</errorHandlers>
		<urlFilters public="1" set="null">
			<c path="Array"><c path="ufront.web.url.filter.UFUrlFilter"/></c>
			<haxe_doc>UrlFilters for the current application.
		These will be used in the HttpContext for `getRequestUri` and `generateUri`.
		See `addUrlFilter()` and `clearUrlFilters()` below.
		Modifying this list will take effect at the beginning of the next `execute()` request.</haxe_doc>
		</urlFilters>
		<messages public="1">
			<c path="Array"><t path="ufront.log.Message"/></c>
			<haxe_doc>Messages (traces, logs, warnings, errors) that are not associated with a specific request.</haxe_doc>
		</messages>
		<modulesReady>
			<t path="tink.Surprise">
				<t path="tink.Noise"/>
				<t path="tink.Error"/>
			</t>
			<haxe_doc>A future trigger, for internal use, that lets us tell if all our modules (middleware and handlers) are ready for use</haxe_doc>
		</modulesReady>
		<currentModule>
			<t path="tink.core.Pos"/>
			<haxe_doc>A position representing the current module.  Useful for diagnosing if something in our async chain never completed.</haxe_doc>
		</currentModule>
		<pathToContentDir>
			<c path="String"/>
			<haxe_doc>The (relative) path to the content directory.</haxe_doc>
		</pathToContentDir>
		<inject public="1" params="T" set="method" line="154">
			<f a="cl:?val:?cl2:?singleton:?named" v=":null:null:false:null">
				<x path="Class"><c path="inject.T"/></x>
				<c path="inject.T"/>
				<x path="Class"><c path="inject.T"/></x>
				<x path="Bool"/>
				<c path="String"/>
				<c path="ufront.app.HttpApplication"/>
			</f>
			<haxe_doc>Shortcut to map a class or value into `injector`.

		See `ufront.core.InjectorTools.inject()` for details on how the injections are applied.

		This method is chainable.</haxe_doc>
		</inject>
		<init public="1" set="method" line="162">
			<f a=""><t path="tink.Surprise">
	<t path="tink.Noise"/>
	<t path="tink.Error"/>
</t></f>
			<haxe_doc>Perform `init()` on any handlers or middleware that require it</haxe_doc>
		</init>
		<dispose public="1" set="method" line="183">
			<f a=""><t path="tink.Surprise">
	<t path="tink.Noise"/>
	<t path="tink.Error"/>
</t></f>
			<haxe_doc>Perform `dispose()` on any handlers or middleware that require it</haxe_doc>
		</dispose>
		<getModulesThatRequireInit set="method" line="199"><f a=""><c path="Array"><c path="ufront.app.UFInitRequired"/></c></f></getModulesThatRequireInit>
		<addRequestMiddleware public="1" get="inline" set="null" line="212">
			<f a="?middlewareItem:?middleware:?first" v="null:null:false">
				<c path="ufront.app.UFRequestMiddleware"/>
				<t path="Iterable"><c path="ufront.app.UFRequestMiddleware"/></t>
				<x path="Bool"/>
				<c path="ufront.app.HttpApplication"/>
			</f>
			<haxe_doc>Add one or more `UFRequestMiddleware` items to this HttpApplication. This method is chainable.</haxe_doc>
		</addRequestMiddleware>
		<addRequestHandler public="1" get="inline" set="null" line="218">
			<f a="?handler:?handlers:?first" v="null:null:false">
				<c path="ufront.app.UFRequestHandler"/>
				<t path="Iterable"><c path="ufront.app.UFRequestHandler"/></t>
				<x path="Bool"/>
				<c path="ufront.app.HttpApplication"/>
			</f>
			<haxe_doc>Add one or more `UFRequestHandler`s to this HttpApplication. This method is chainable.</haxe_doc>
		</addRequestHandler>
		<addErrorHandler public="1" get="inline" set="null" line="224">
			<f a="?handler:?handlers:?first" v="null:null:false">
				<c path="ufront.app.UFErrorHandler"/>
				<t path="Iterable"><c path="ufront.app.UFErrorHandler"/></t>
				<x path="Bool"/>
				<c path="ufront.app.HttpApplication"/>
			</f>
			<haxe_doc>Add one or more `UFErrorHandler`s to this HttpApplication. This method is chainable.</haxe_doc>
		</addErrorHandler>
		<addResponseMiddleware public="1" get="inline" set="null" line="230">
			<f a="?middlewareItem:?middleware:?first" v="null:null:false">
				<c path="ufront.app.UFResponseMiddleware"/>
				<t path="Iterable"><c path="ufront.app.UFResponseMiddleware"/></t>
				<x path="Bool"/>
				<c path="ufront.app.HttpApplication"/>
			</f>
			<haxe_doc>Add one or more `UFRequestMiddleware` items to this HttpApplication. This method is chainable.</haxe_doc>
		</addResponseMiddleware>
		<addLogHandler public="1" get="inline" set="null" line="236">
			<f a="?logger:?loggers:?first" v="null:null:false">
				<c path="ufront.app.UFLogHandler"/>
				<t path="Iterable"><c path="ufront.app.UFLogHandler"/></t>
				<x path="Bool"/>
				<c path="ufront.app.HttpApplication"/>
			</f>
			<haxe_doc>Add some `UFRequestMiddleware` to this HttpApplication. This method is chainable.</haxe_doc>
		</addLogHandler>
		<addModule params="T" set="method" line="239"><f a="modulesArr:?newModule:?newModules:first" v=":null:null:">
	<c path="Array"><c path="addModule.T"/></c>
	<c path="addModule.T"/>
	<t path="Iterable"><c path="addModule.T"/></t>
	<x path="Bool"/>
	<c path="ufront.app.HttpApplication"/>
</f></addModule>
		<execute public="1" set="method" line="271">
			<f a="httpContext">
				<c path="ufront.web.context.HttpContext"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n=":access"><e>'???'</e></m></meta>
			<haxe_doc>Execute the request

		Ṫhis involves:

		- Setting the URL filters on the HttpContext.
		- Firing all `UFRequestMiddleware`, in order
		- Using the various `UFRequestHandler`s, until one of them is able to handle and process our request.
		- Firing all `UFResponseMiddleware`, in order
		- Logging any messages (traces, logs, warnings, errors) that occured during the request
		- Flushing the response to the browser and concluding the request

		If errors occur (an unhandled exception or `ufront.core.Outcome.Failure` is returned by one of the modules), we will run through each of the `UFErrorHandler`s.
		These may print a nice error message, provide recover, diagnostics, logging etc.

		Each module can modify `HttpContext.completion` to cause certain parts of the request life-cycle to be skipped.</haxe_doc>
		</execute>
		<executeModules set="method" line="324">
			<f a="modules:ctx:?flag" v="::null">
				<c path="Array"><t path="tink.Pair">
	<f a="">
		<c path="ufront.web.context.HttpContext"/>
		<t path="tink.Surprise">
			<t path="tink.Noise"/>
			<t path="tink.Error"/>
		</t>
	</f>
	<t path="tink.core.Pos"/>
</t></c>
				<c path="ufront.web.context.HttpContext"/>
				<e path="ufront.web.context.RequestCompletion"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc><![CDATA[Given a collection of modules (middleware or handlers, anything that returns Future<Void>),
		execute the modules one at a time, waiting for each to finish before starting the next one.

		If a `RequestCompletion` flag is provided, modules will not run if the request has that completion
		flag already set.  Once all the modules have run, it will set the flag.

		Usage:

		`requestHandlersDone:Future<Noise> = executeModules( requestHandlers.map(function (r) return new Pair(Type.getClassName(Type.getClass(r)), r.handleRequest)), httpContext, CRequestHandler );`

		Returns a future that will be a Success if the chain completed successfully, or a Failure containing the error otherwise.]]></haxe_doc>
		</executeModules>
		<handleError set="method" line="362">
			<f a="err:ctx:doneTrigger">
				<t path="tink.Error"/>
				<c path="ufront.web.context.HttpContext"/>
				<t path="tink.FutureTrigger"><t path="tink.Outcome">
	<t path="tink.Noise"/>
	<t path="tink.Error"/>
</t></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Run through each of the error handlers, then the log handlers (if they haven't run already)

		Then mark the middleware and requestHandlers as complete, so the `execute` function can log, flush and finish the request.</haxe_doc>
		</handleError>
		<clearMessages set="method" line="395"><f a=""><t path="tink.Surprise">
	<t path="tink.Noise"/>
	<t path="tink.Error"/>
</t></f></clearMessages>
		<flush set="method" line="402"><f a="ctx">
	<c path="ufront.web.context.HttpContext"/>
	<t path="tink.Noise"/>
</f></flush>
		<executeRequest public="1" set="method" line="417">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create a HTTPContext for the current request and execute it.

			This will ensure that the current injector and it's mappings are included in the HttpContext.
			Available on PHP and Neko.</haxe_doc>
		</executeRequest>
		<useModNekoCache public="1" set="method" line="466">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Use `neko.Web.cacheModule` to speed up requests if using neko and not using `-debug`.
		
		Using `cacheModule` will cause your app to execute normally on the first load, but subsequent loads will:
		
		- Keep the module loaded
		- Keep static variables initialised
		- Skip straight to our `executeRequest` function for each new request
		
		A few things to note:
		
		- This will have no effect on platforms other than Neko.
		- This will have no effect if you compile with `-debug`.
		- If you have multiple simultaneous requests, mod_neko may load up several instances of the module, and keep all of them cached, and pick one for each request.
		- Using `nekotools server` sometimes fails to clear the cache after you re-compile. You can either restart the server, or compile with `-debug` to avoid this problem.</haxe_doc>
		</useModNekoCache>
		<addUrlFilter public="1" set="method" line="475">
			<f a="filter">
				<c path="ufront.web.url.filter.UFUrlFilter"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add a URL filter to be used in the HttpContext for `getRequestUri` and `generateUri`</haxe_doc>
		</addUrlFilter>
		<clearUrlFilters public="1" set="method" line="483">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Remove existing URL filters</haxe_doc>
		</clearUrlFilters>
		<setContentDirectory public="1" set="method" line="490">
			<f a="relativePath">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the relative path to the content directory.</haxe_doc>
		</setContentDirectory>
		<new public="1" set="method" line="125">
			<f a=""><x path="Void"/></f>
			<meta><m n=":access"><e>'???'</e></m></meta>
			<haxe_doc>Start a new HttpApplication

		Depending on the platform, this may run multiple requests or it may be created per request.

		The constructor will initialize each of the events, and add a single `onPostLogRequest` event handler to make sure logs are not executed twice in the event of an error.

		After creating the application, you can initialize the modules and then execute requests with a given HttpContext.</haxe_doc>
		</new>
		<haxe_doc>The base class for a HTTP Application

	This provides the framework for setting up a web-app that either uses Http or emulates Http behaviour - receiving requests and issuing responses.

	It's function is:

	- Have a handful of events, one after another.  The event chain fires for each request.
	- Have different modules that do things (eg, a module to check a cache, a module to fire a controller action, a module to log a request)
	- Modules listen to events, and trigger their functionality at the right part of the request.
	- Each request has a HttpContext, describing the request, the response, the current session, authorization handler and other things.
	- Once the request is complete, or if there is an error, the HTTP response is sent to the client.

	Depending on the environment, a HttpApplication may be created once per request, or the application may be persistent and have many requests.</haxe_doc>
	</class>
	<class path="ufront.app.HttpApplicationMacros" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/app/HttpApplicationMacros.hx"/>
	<class path="ufront.app.UFErrorHandler" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/app/UFErrorHandler.hx" interface="1">
		<handleError public="1" set="method"><f a="err:ctx">
	<t path="tink.Error"/>
	<c path="ufront.web.context.HttpContext"/>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></handleError>
		<haxe_doc>Represents an error handler that can help us output, log, diagnose or even recover from errors in our HttpApplication.

	When an unhandled Failure or exception occurs, each of the UFErrorHandler events will fire.

	These can perform tasks such as:

	- Displaying a helpful error page
	- Providing stack traces to the developer
	- Logging or emailing a copy of the error report

	Because multiple ErrorHandlers can exist at once, you should only add one which writes to the http response, or you may generate a confusing page/message.  Another approach is to make your error handler only write a response if one is not already written.

	The `handleError()` method should return a Surprise - a Future letting you know when the outcome of the error handler once it has completed - was it a success (continue with any remaining stages in the request) or a failure (in which case, a raw error will be thrown - you have an error in your error handler).</haxe_doc>
		<meta><m n="interface"/></meta>
	</class>
	<class path="ufront.app.UFInitRequired" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/app/UFInitRequired.hx" interface="1">
		<init public="1" set="method"><f a="app">
	<c path="ufront.app.HttpApplication"/>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></init>
		<dispose public="1" set="method"><f a="app">
	<c path="ufront.app.HttpApplication"/>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></dispose>
		<haxe_doc>This is to be used with Handlers or Middleware that require an init() function.

	Should be used in conjunction with `UFMiddleware`, `UFRequestHandler`, `UFErrorHandler` and `UFLogHandler`.

	If a handler or middleware module implement `UFInitRequired`, then when they are added to the app, `init( httpApplication )` is called, and the app will wait for all modules to be completed before accepting requests.

	Both `init()` and `dispose()` should return a Surprise - a Future letting you know when the outcome of the operation once it has completed - was it a success (continue with the request) or a failure (throw to the error handler).</haxe_doc>
		<meta><m n="interface"/></meta>
	</class>
	<class path="ufront.app.UFLogHandler" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/app/UFLogHandler.hx" interface="1">
		<log public="1" set="method"><f a="ctx:appMessages">
	<c path="ufront.web.context.HttpContext"/>
	<c path="Array"><t path="ufront.log.Message"/></c>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></log>
		<haxe_doc>Interface for a Logger - something which takes trace, log and error messages from the request and logs them appropriately.

	This may include:

	- Sending them to the client's browser console
	- Saving them to a log file on the server
	- Saving them to a database
	- Sending them to a debugging tool

	etc.

	The `log()` method takes two arguments - the `HttpContext`, which will include the messages for the current request, and `appMessages`, which may contain app specific messages which may or may not be relevant to that request.  It is up to the LogHandler to decide whether to log these or not.

	The `log()` method should return a Surprise - a Future letting you know when the outcome of the operation once it is complete - was it a success (you can continue) or a failure (throw to the error handler)</haxe_doc>
		<meta><m n="interface"/></meta>
	</class>
	<class path="ufront.app.UFResponseMiddleware" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/app/UFMiddleware.hx" module="ufront.app.UFMiddleware" interface="1">
		<responseOut public="1" set="method"><f a="ctx">
	<c path="ufront.web.context.HttpContext"/>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></responseOut>
		<haxe_doc>Middleware that runs after the request has been processed.

	It can be used for things such as:

	- modify or append the response,
	- log traces from the request (either including `console.log` snippets in the response, or logging on the server)
	- cache the response for fututre requests
	- save data from the request for analytics

	etc.  This middleware has full access to the HttpContext of the current request, so can modify the request details or write to the response.

	You can modify the values of `ctx.completion` to skip remaining response middleware, the logging or flushing stages of the request.

	The `responseOut()` method should return a Surprise - a Future letting you know when the outcome of the operation once it is complete - was it a success (continue with the request) or a failure (throw to the error handler)</haxe_doc>
		<meta><m n="interface"/></meta>
	</class>
	<class path="ufront.app.UFRequestMiddleware" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/app/UFMiddleware.hx" module="ufront.app.UFMiddleware" interface="1">
		<requestIn public="1" set="method"><f a="ctx">
	<c path="ufront.web.context.HttpContext"/>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></requestIn>
		<haxe_doc>Middleware that runs before the request has been processed.

	It can be used for things such as:

	- perform redirects
	- initiate a session
	- check for a cached response
	- begin a timer to measure the length of the request

	etc.  This middleware has full access to the HttpContext of the current request, so can modify the request details or write to the response.

	To prevent the request from executing (for example, if you have a cached version of the page you can display), you can modify the values of `ctx.completion` to skip remaining request middleware, the request handler, any response middleware, logging, or flushing the response to the browser.

	The `requestIn()` method should return a Surprise - a Future letting you know when the outcome of the operation once it is complete - was it a success (continue with the request) or a failure (throw to the error handler)</haxe_doc>
		<meta><m n="interface"/></meta>
	</class>
	<class path="ufront.app.UFMiddleware" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/app/UFMiddleware.hx" interface="1">
		<extends path="ufront.app.UFResponseMiddleware"/>
		<extends path="ufront.app.UFRequestMiddleware"/>
		<haxe_doc>An interface representing Middleware that is applied both before and after processing the request.

	This can be useful if you have middleware that sits in both positions

	See `UFRequestMiddleware` and `UFResponseMiddleware` for more details.</haxe_doc>
		<meta><m n="interface"/></meta>
	</class>
	<class path="ufront.app.UFRequestHandler" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/app/UFRequestHandler.hx" interface="1">
		<handleRequest public="1" set="method"><f a="ctx">
	<c path="ufront.web.context.HttpContext"/>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></handleRequest>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<haxe_doc>Represents an object that can handle a `HttpRequest`, process as required, and write the `HttpResponse`.

	Two big examples for ufront include `DispatchHandler` and `RemotingHandler`.

	Multiple request handlers can exist in an application.  They will be called one at a time (in the order they were added) until one of them successfully handles the request.  The first to successfully handle the request should mark `httpContext.completion.requestHandler=true` so that other handlers do not also run.

	The `handleRequest()` method should return a Surprise - a Future letting you know when the outcome of the request handler once it has completed - was it a success (continue with the request) or a failure (throw to the error handler).

	If the outcome was a success, the response middleware, logging and flushing stages will then take place.</haxe_doc>
		<meta><m n="interface"/></meta>
	</class>
	<class path="ufront.app.UfrontApplication" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/app/UfrontApplication.hx">
		<extends path="ufront.app.HttpApplication"/>
		<configuration public="1" set="null">
			<t path="ufront.web.UfrontConfiguration"/>
			<haxe_doc>The configuration that was used when setting up the application.

		This is set during the constructor.  Changing values of this object is not guaranteed to have any effect.</haxe_doc>
		</configuration>
		<mvcHandler public="1" set="null">
			<c path="ufront.handler.MVCHandler"/>
			<haxe_doc>The dispatch handler used for this application.

		This is mostly made accessible for unit testing and logging purposes.  You are unlikely to need to access it for anything else.</haxe_doc>
		</mvcHandler>
		<remotingHandler public="1" set="null">
			<c path="ufront.handler.RemotingHandler"/>
			<haxe_doc>The remoting handler used for this application.

		It is automatically set up if a `UFApiContext` class is supplied</haxe_doc>
		</remotingHandler>
		<viewEngine public="1" set="null">
			<c path="ufront.view.UFViewEngine"/>
			<haxe_doc>The view engine being used with this application

		It is configured using the `viewEngine` property on your `UfrontConfiguration`.</haxe_doc>
		</viewEngine>
		<execute public="1" set="method" line="167" override="1">
			<f a="httpContext">
				<c path="ufront.web.context.HttpContext"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Execute the current request.

		The first time this runs, `initOnFirstExecute()` will be called, which runs some more initialization that requires the HttpContext to be ready before running.</haxe_doc>
		</execute>
		<firstRun><x path="Bool"/></firstRun>
		<initOnFirstExecute set="method" line="177"><f a="httpContext">
	<c path="ufront.web.context.HttpContext"/>
	<x path="Void"/>
</f></initOnFirstExecute>
		<loadApiContext public="1" get="inline" set="null" line="202">
			<f a="apiContext">
				<x path="Class"><c path="ufront.api.UFApiContext"/></x>
				<c path="ufront.app.UfrontApplication"/>
			</f>
			<haxe_doc>Shortcut for `remotingHandler.loadApiContext()`

		Returns itself so chaining is enabled.</haxe_doc>
		</loadApiContext>
		<appTemplatingEngines><c path="List"><t path="ufront.view.TemplatingEngine"/></c></appTemplatingEngines>
		<addTemplatingEngine public="1" set="method" line="213">
			<f a="engine">
				<t path="ufront.view.TemplatingEngine"/>
				<c path="ufront.app.UfrontApplication"/>
			</f>
			<haxe_doc>Add support for a templating engine to your view engine.

		Some ready-to-go templating engines are included `ufront.view.TemplatingEngines`.</haxe_doc>
		</addTemplatingEngine>
		<inject public="1" params="T" set="method" line="227" override="1">
			<f a="cl:?val:?cl2:?singleton:?named" v=":null:null:false:null">
				<x path="Class"><c path="inject.T"/></x>
				<c path="inject.T"/>
				<x path="Class"><c path="inject.T"/></x>
				<x path="Bool"/>
				<c path="String"/>
				<c path="ufront.app.UfrontApplication"/>
			</f>
			<haxe_doc>Shortcut to map a class or value into `injector`.

		See `ufront.core.InjectorTools.inject()` for details on how the injections are applied.

		This method is chainable.</haxe_doc>
		</inject>
		<new public="1" set="method" line="87">
			<f a="?optionsIn" v="null">
				<t path="ufront.web.UfrontConfiguration"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initialize a new UfrontApplication with the given configurations.

		@param	?optionsIn		Options for UfrontApplication.  See `DefaultUfrontConfiguration` for details.  Any missing values will imply defaults should be used.

		This will redirect `haxe.Log.trace` to a local function which adds trace messages to the `messages` property of this application.  You will need to use an appropriate tracing module to view these.</haxe_doc>
		</new>
		<haxe_doc>A standard Ufront Application.  This extends HttpApplication and provides:

	- Routing with `ufront.handler.MVCHandler`
	- Easily add a Haxe remoting API context and initiate the `ufront.handler.RemotingHandler`
	- Tracing, to console, logfile or remoting call, based on your `ufront.web.UfrontConfiguration`

	Ufront uses `minject.Injector` for dependency injection, and `UfrontApplication` adds several things to the injector, depending on your configuration:

	- All of the controllers specified in your configuration (by default: all of them)
	- All of the APIs specified in your configuration (by default: all of them)
	- A singleton of the UFViewEngine specified in your UfronConfiguration.
	- The implementation of `UFHttpSession` you chose in your UfrontConfiguration, to be instantiated on each request.
	- The implementation of `UFAuthHandler` you chose in your UfrontConfiguration, to be instantiated on each request.
	- A String named `viewPath` for the path to your view folder, specified in your configuration.
	- A String name `scriptDirectory`, containing the path to the directory the current app is located in.
	- A String name `contentDirectory`, containing the path to the content directory specified in your configuration.

	Futher injections may take place in various middleware / handlers also.

	@author Jason O'Neil
	@author Andreas Soderlund
	@author Franco Ponticelli</haxe_doc>
	</class>
	<enum path="ufront.auth.AuthError" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/auth/AuthError.hx">
		<NotLoggedIn><haxe_doc>Thrown if a login is required, but the user was not logged in</haxe_doc></NotLoggedIn>
		<LoginFailed a="msg">
			<c path="String"/>
			<haxe_doc>Thrown if Authentication fails</haxe_doc>
		</LoginFailed>
		<NotLoggedInAs a="u">
			<c path="ufront.auth.UFAuthUser"/>
			<haxe_doc>Thrown if a login is required, but the user was not logged in, or is logged in as someone else</haxe_doc>
		</NotLoggedInAs>
		<NoPermission a="p">
			<x path="EnumValue"/>
			<haxe_doc>Thrown is a permission is required, but the user is not logged in or does not have the correct permission</haxe_doc>
		</NoPermission>
		<meta><m n=":keep"/></meta>
	</enum>
	<class path="ufront.auth.UFAuthHandler" params="T" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/auth/UFAuthHandler.hx" interface="1">
		<isLoggedIn public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Is a session currently open and authenticated - is the user logged in?</haxe_doc>
		</isLoggedIn>
		<requireLogin public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Require the user to be logged in.
		Otherwise trigger the `onNotLoggedIn` notifier, and throw `AuthError.NotLoggedIn`</haxe_doc>
		</requireLogin>
		<isLoggedInAs public="1" set="method">
			<f a="user">
				<c path="ufront.auth.UFAuthUser"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Is this particular user currently logged in.  Will return false if a different user is logged in.</haxe_doc>
		</isLoggedInAs>
		<requireLoginAs public="1" set="method">
			<f a="user">
				<c path="ufront.auth.UFAuthUser"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Require this user to be the one currently logged in.
		Otherwise will trigger `onNotLoggedInAs` dispatcher, and throw `AuthError.NotLoggedInAs( user )`</haxe_doc>
		</requireLoginAs>
		<hasPermission public="1" set="method">
			<f a="permission">
				<x path="EnumValue"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Does the given user have the specified permission?
		Will return false if the user is not logged in, or if the user does not have permission.</haxe_doc>
		</hasPermission>
		<hasPermissions public="1" set="method">
			<f a="permissions">
				<t path="Iterable"><x path="EnumValue"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Does the given user have the specified permissions?
		Will return false if the user is not logged in, or if the user does not have all of the specified permissions.</haxe_doc>
		</hasPermissions>
		<requirePermission public="1" set="method">
			<f a="permission">
				<x path="EnumValue"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Require the given user to have the specified permission.
		If not, trigger the `onNoPermission` dispatcher, throw `AuthError.NoPermission(permission)`.</haxe_doc>
		</requirePermission>
		<requirePermissions public="1" set="method">
			<f a="permissions">
				<t path="Iterable"><x path="EnumValue"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Require the given user to have the specified permissions.
		If not, trigger the `onNoPermission` dispatcher, throw `AuthError.NoPermission(permission)`.</haxe_doc>
		</requirePermissions>
		<getUserByID public="1" set="method">
			<f a="id">
				<c path="String"/>
				<t path="Null"><c path="ufront.auth.UFAuthHandler.T"/></t>
			</f>
			<haxe_doc>Given a String containing the user ID, find the appropriate UFAuthUser object.
		The user ID should match the one provided by `ufront.auth.UFAuthUser.userID`.</haxe_doc>
		</getUserByID>
		<setCurrentUser public="1" set="method">
			<f a="user">
				<c path="ufront.auth.UFAuthUser"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the currentUser in the session.
		This is used when implementing "login as _____" functionality.
		Make sure to only expose this method in a secure piece of code, ie, after checking the current user has permissions to take over another user's account.
		Will throw an error if the user could not be set.</haxe_doc>
		</setCurrentUser>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>A String representation, usually just the name of the AuthHandler class, and possibly the current user.</haxe_doc>
		</toString>
		<currentUser public="1" get="null" set="null">
			<t path="Null"><c path="ufront.auth.UFAuthHandler.T"/></t>
			<haxe_doc>The currently logged in user.  Will be null if no user is logged in.</haxe_doc>
		</currentUser>
		<haxe_doc>An interface describing an authentication handler.

	This lets you write code where the underlying authentication layer could be swapped out.
	For example, you may switch from EasyAuth (db authentication) to LDAP, or to an OAuth provider.

	Using this mechanism would allow your login checks, identity checks, and permission checks to remain the same with a different (or even multiple) login mechanisms.

	@author Jason O'Neil</haxe_doc>
		<meta><m n="interface"/></meta>
	</class>
	<class path="ufront.auth.EasyAuth" params="" file="C:\HaxeToolkit\haxe\lib/ufront-easyauth/1,0,0-rc,9/src/ufront/auth/EasyAuth.hx">
		<implements path="ufront.auth.UFAuthHandler"><c path="ufront.auth.model.User"/></implements>
		<defaultSessionVariableName public="1" line="19" static="1">
			<c path="String"/>
			<haxe_doc>The default variable name to save the User ID to in the current session. Default is `easyauth_session_storage`.</haxe_doc>
		</defaultSessionVariableName>
		<sessionVariableName public="1" set="null">
			<c path="String"/>
			<haxe_doc>The session variable name for the current auth handler.
			If the dependency injector has a String with the name "easyAuthSessionVariableName", that value will be used.
			If not, `defaultSessionVariableName` will be used.</haxe_doc>
		</sessionVariableName>
		<context public="1" set="null">
			<c path="ufront.web.context.HttpContext"/>
			<meta>
				<m n="name"><e>"context"</e></m>
				<m n="type"><e>"ufront.web.context.HttpContext"</e></m>
				<m n="inject"/>
			</meta>
			<haxe_doc>The current HttpContext, should be provided by injection.</haxe_doc>
		</context>
		<currentUser public="1" get="accessor" set="null">
			<t path="Null"><c path="ufront.auth.model.User"/></t>
			<haxe_doc>The current user, if logged in. Will be null if they are not logged in.</haxe_doc>
		</currentUser>
		<isSuperUser public="1" get="accessor" set="null">
			<x path="Bool"/>
			<haxe_doc>Does the current user have super-user status?
			
			This means they either have the EAPCanDoAnything permission, or nobody has that permission.
			What this means is, until you set a superuser, everyone will count as a superuser.
			This is potentially dangerous, but is required during the setup of your app.</haxe_doc>
		</isSuperUser>
		<postInjection public="1" set="method" line="50">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n="name"><e>"postInjection"</e></m>
				<m n="args"/>
				<m n="post"/>
			</meta>
			<haxe_doc>Read configuration from injector after `context` has been injected.</haxe_doc>
		</postInjection>
		<isLoggedIn public="1" set="method" line="58"><f a=""><x path="Bool"/></f></isLoggedIn>
		<requireLogin public="1" set="method" line="62"><f a=""><x path="Void"/></f></requireLogin>
		<isLoggedInAs public="1" set="method" line="66"><f a="user">
	<c path="ufront.auth.UFAuthUser"/>
	<x path="Bool"/>
</f></isLoggedInAs>
		<requireLoginAs public="1" set="method" line="71"><f a="user">
	<c path="ufront.auth.UFAuthUser"/>
	<x path="Void"/>
</f></requireLoginAs>
		<hasPermission public="1" set="method" line="75"><f a="permission">
	<x path="EnumValue"/>
	<x path="Bool"/>
</f></hasPermission>
		<hasPermissions public="1" set="method" line="79"><f a="permissions">
	<t path="Iterable"><x path="EnumValue"/></t>
	<x path="Bool"/>
</f></hasPermissions>
		<requirePermission public="1" set="method" line="88"><f a="permission">
	<x path="EnumValue"/>
	<x path="Void"/>
</f></requirePermission>
		<requirePermissions public="1" set="method" line="95"><f a="permissions">
	<t path="Iterable"><x path="EnumValue"/></t>
	<x path="Void"/>
</f></requirePermissions>
		<setCurrentUser public="1" set="method" line="101"><f a="user">
	<c path="ufront.auth.UFAuthUser"/>
	<x path="Void"/>
</f></setCurrentUser>
		<_currentUser><c path="ufront.auth.model.User"/></_currentUser>
		<get_currentUser set="method" line="112"><f a=""><c path="ufront.auth.model.User"/></f></get_currentUser>
		<startSession public="1" set="method" line="124"><f a="authAdapter">
	<c path="ufront.auth.UFAuthAdapter"><c path="ufront.auth.model.User"/></c>
	<t path="tink.Surprise">
		<c path="ufront.auth.model.User"/>
		<e path="ufront.auth.AuthError"/>
	</t>
</f></startSession>
		<startSessionSync public="1" set="method" line="139"><f a="authAdapter">
	<c path="ufront.auth.UFAuthAdapterSync"><c path="ufront.auth.model.User"/></c>
	<t path="tink.Outcome">
		<c path="ufront.auth.model.User"/>
		<e path="ufront.auth.AuthError"/>
	</t>
</f></startSessionSync>
		<endSession public="1" set="method" line="152"><f a=""><x path="Void"/></f></endSession>
		<getUserByID public="1" set="method" line="163">
			<f a="id">
				<c path="String"/>
				<t path="Null"><c path="ufront.auth.model.User"/></t>
			</f>
			<haxe_doc>Fetch the user by their username.

			(Note well: username, not database row ID.)</haxe_doc>
		</getUserByID>
		<toString public="1" set="method" line="167"><f a=""><c path="String"/></f></toString>
		<get_isSuperUser set="method" line="171"><f a=""><x path="Bool"/></f></get_isSuperUser>
		<new public="1" set="method" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Create a new EasyAuth handler.
			You should usually create this using an `injector.instantiate(EasyAuth)` call so that dependency injection is handled correctly.</haxe_doc>
		</new>
		<haxe_doc></haxe_doc>
	</class>
	<class path="ufront.auth.EasyAuthAdminMode" params="" file="C:\HaxeToolkit\haxe\lib/ufront-easyauth/1,0,0-rc,9/src/ufront/auth/EasyAuth.hx" module="ufront.auth.EasyAuth">
		<extends path="ufront.auth.EasyAuth"/>
		<get_currentUser set="method" line="207" override="1"><f a=""><c path="ufront.auth.model.User"/></f></get_currentUser>
		<new public="1" set="method" line="202"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A version of EasyAuth that acts in admin mode, useful for task runners etc.

		Exactly the same, but `isSuperUser` is always true, so permissions checks always pass etc.</haxe_doc>
	</class>
	<class path="ufront.auth.UFAuthAdapterSync" params="T" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/auth/UFAuthAdapter.hx" module="ufront.auth.UFAuthAdapter" interface="1">
		<authenticateSync public="1" set="method"><f a=""><t path="tink.Outcome">
	<c path="ufront.auth.UFAuthAdapterSync.T"/>
	<e path="ufront.auth.AuthError"/>
</t></f></authenticateSync>
		<meta><m n="interface"/></meta>
	</class>
	<class path="ufront.auth.UFAuthAdapter" params="T" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/auth/UFAuthAdapter.hx" interface="1">
		<authenticate public="1" set="method"><f a=""><t path="tink.Surprise">
	<c path="ufront.auth.UFAuthAdapter.T"/>
	<e path="ufront.auth.AuthError"/>
</t></f></authenticate>
		<meta><m n="interface"/></meta>
	</class>
	<class path="ufront.auth.EasyAuthDBAdapter" params="" file="C:\HaxeToolkit\haxe\lib/ufront-easyauth/1,0,0-rc,9/src/ufront/auth/EasyAuthDBAdapter.hx">
		<implements path="ufront.auth.UFAuthAdapterSync"><c path="ufront.auth.model.User"/></implements>
		<implements path="ufront.auth.UFAuthAdapter"><c path="ufront.auth.model.User"/></implements>
		<suppliedUsername><c path="String"/></suppliedUsername>
		<suppliedPassword><c path="String"/></suppliedPassword>
		<authenticateSync public="1" set="method" line="19"><f a=""><t path="tink.Outcome">
	<c path="ufront.auth.model.User"/>
	<e path="ufront.auth.AuthError"/>
</t></f></authenticateSync>
		<authenticate public="1" set="method" line="36"><f a=""><t path="tink.Surprise">
	<c path="ufront.auth.model.User"/>
	<e path="ufront.auth.AuthError"/>
</t></f></authenticate>
		<new public="1" set="method" line="14"><f a="username:password">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="ufront.auth.EasyAuthPermissions" params="" file="C:\HaxeToolkit\haxe\lib/ufront-easyauth/1,0,0-rc,9/src/ufront/auth/EasyAuthPermissions.hx">
		<EAPListAllUsers><haxe_doc>List all users.</haxe_doc></EAPListAllUsers>
		<EAPListAllGroups><haxe_doc>List all groups.</haxe_doc></EAPListAllGroups>
		<EAPListUserPermissions><haxe_doc>List all permissions for a given user.</haxe_doc></EAPListUserPermissions>
		<EAPListGroupsForUser><haxe_doc>List all groups for any given user.</haxe_doc></EAPListGroupsForUser>
		<EAPListUsersInGroups><haxe_doc>List all users in any given group.</haxe_doc></EAPListUsersInGroups>
		<EAPCreateUser><haxe_doc>Create a new user.</haxe_doc></EAPCreateUser>
		<EAPCreateGroup><haxe_doc>Assign a user to a group.</haxe_doc></EAPCreateGroup>
		<EAPAssignOwnGroup><haxe_doc>Assign a user to a group that you already belong to.</haxe_doc></EAPAssignOwnGroup>
		<EAPAssignAnyGroup><haxe_doc>Assign a user to any group.</haxe_doc></EAPAssignAnyGroup>
		<EAPAssignUserPermissionYouHave><haxe_doc>Assign a permission you already have to another user or group.</haxe_doc></EAPAssignUserPermissionYouHave>
		<EAPAssignAnyUserPermission><haxe_doc>Assign any permission to another user or group.</haxe_doc></EAPAssignAnyUserPermission>
		<EAPEditOwnUser><haxe_doc>Edit your own user.</haxe_doc></EAPEditOwnUser>
		<EAPEditAnyUser><haxe_doc>Edit any User.</haxe_doc></EAPEditAnyUser>
		<EAPChangePasswordOwnUser><haxe_doc>Change the password for your own user.</haxe_doc></EAPChangePasswordOwnUser>
		<EAPChangePasswordAnyUser><haxe_doc>Change the password for any User.</haxe_doc></EAPChangePasswordAnyUser>
		<EAPEditOwnGroup><haxe_doc>Edit a Group you belong to.</haxe_doc></EAPEditOwnGroup>
		<EAPEditAnyGroup><haxe_doc>Edit any Group.</haxe_doc></EAPEditAnyGroup>
		<EAPCanDoAnything><haxe_doc>Can do anything - they are a superuser.</haxe_doc></EAPCanDoAnything>
		<haxe_doc>Permissions that are used by EasyAuth for setting up new users, groups, and permissions.

	Please note these permissions are enforced when using `ufront.auth.api.EasyAuthApi`, but they could be bypassed by using the models / database directly.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="ufront.auth.NobodyAuthHandler" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/auth/NobodyAuthHandler.hx">
		<implements path="ufront.auth.UFAuthHandler"><c path="ufront.auth.UFAuthUser"/></implements>
		<isLoggedIn public="1" set="method" line="18"><f a=""><x path="Bool"/></f></isLoggedIn>
		<requireLogin public="1" set="method" line="20"><f a=""><x path="Void"/></f></requireLogin>
		<isLoggedInAs public="1" set="method" line="22"><f a="user">
	<c path="ufront.auth.UFAuthUser"/>
	<x path="Bool"/>
</f></isLoggedInAs>
		<requireLoginAs public="1" set="method" line="24"><f a="user">
	<c path="ufront.auth.UFAuthUser"/>
	<x path="Void"/>
</f></requireLoginAs>
		<hasPermission public="1" set="method" line="26"><f a="permission">
	<x path="EnumValue"/>
	<x path="Bool"/>
</f></hasPermission>
		<hasPermissions public="1" set="method" line="28"><f a="permissions">
	<t path="Iterable"><x path="EnumValue"/></t>
	<x path="Bool"/>
</f></hasPermissions>
		<requirePermission public="1" set="method" line="30"><f a="permission">
	<x path="EnumValue"/>
	<x path="Void"/>
</f></requirePermission>
		<requirePermissions public="1" set="method" line="32"><f a="permissions">
	<t path="Iterable"><x path="EnumValue"/></t>
	<x path="Void"/>
</f></requirePermissions>
		<getUserByID public="1" set="method" line="34"><f a="id">
	<c path="String"/>
	<t path="Null"><c path="ufront.auth.UFAuthUser"/></t>
</f></getUserByID>
		<setCurrentUser public="1" set="method" line="36"><f a="u">
	<t path="Null"><c path="ufront.auth.UFAuthUser"/></t>
	<x path="Void"/>
</f></setCurrentUser>
		<toString public="1" set="method" line="38"><f a=""><c path="String"/></f></toString>
		<currentUser public="1" get="accessor" set="null"><t path="Null"><c path="ufront.auth.UFAuthUser"/></t></currentUser>
		<get_currentUser set="method" line="41"><f a=""><t path="Null"><c path="ufront.auth.UFAuthUser"/></t></f></get_currentUser>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<haxe_doc>An AuthHandler which always gives no permissions.

	This is used when another auth handler isn't available, and will return false (or throw errors) for all permission checks.

	Who would trust you anyway? *You're a nobody.* ;)

	@author Jason O'Neil</haxe_doc>
	</class>
	<class path="ufront.auth.UFAuthUser" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/auth/UFAuthUser.hx" interface="1">
		<can public="1" set="method">
			<f a="?permission:?permissions">
				<x path="EnumValue"/>
				<t path="Iterable"><x path="EnumValue"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Does this user have the specified permission(s)
		You can specify either a single permission or a group or permissions.
		All permissions must be satisfied for it to return true.</haxe_doc>
		</can>
		<userID public="1" get="null" set="null">
			<c path="String"/>
			<haxe_doc>A getter to give a string representing a unique identifier for this user.

		This could be a database ID, a username, email, URL, or anything - the important thing is it is unique for this type of AuthHandler.</haxe_doc>
		</userID>
		<haxe_doc>An interface describing an authentication handler.

	This lets you write code where the underlying authentication layer could be swapped out.
	For example, you may switch from EasyAuth (db authentication) to LDAP, or to an OAuth provider.

	Using this mechanism would allow your login checks, identity checks, and permission checks to remain the same with a different (or even multiple) login mechanisms.

	@author Jason O'Neil</haxe_doc>
		<meta><m n="interface"/></meta>
	</class>
	<class path="ufront.auth.api.EasyAuthApi" params="" file="C:\HaxeToolkit\haxe\lib/ufront-easyauth/1,0,0-rc,9/src/ufront/auth/api/EasyAuthApi.hx">
		<extends path="ufront.api.UFApi"/>
		<easyAuth public="1">
			<c path="ufront.auth.EasyAuth"/>
			<meta>
				<m n="name"><e>"easyAuth"</e></m>
				<m n="type"><e>"ufront.auth.EasyAuth"</e></m>
				<m n="inject"/>
			</meta>
		</easyAuth>
		<attemptLogin public="1" set="method" line="26">
			<f a="username:password">
				<c path="String"/>
				<c path="String"/>
				<t path="tink.Outcome">
					<c path="ufront.auth.model.User"/>
					<e path="ufront.auth.AuthError"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
			<haxe_doc>Attempt to login given a username and password.

		@param username The username of the user we wish to log in as.
		@param password The user entered password - this will be hashed with the same salt and compared to the hash in the database.
		@return `Success(user)` if the login was successful, or `Failure(AuthError)` if it failed.</haxe_doc>
		</attemptLogin>
		<logout public="1" set="method" line="37">
			<f a=""><x path="Void"/></f>
			<meta><m n="returnType"><e>4</e></m></meta>
			<haxe_doc>Logout (end the current session).

		Please note this does not end the session, (the HttpSessionState is still alive, along with any cookies etc), it just ends the authentication, so you are no longer logged in as a user.

		@return `Success(user)` if the login was successful, or `Failure(AuthError)` if it failed.</haxe_doc>
		</logout>
		<authenticate public="1" set="method" line="49">
			<f a="username:password">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n="returnType"><e>0</e></m></meta>
			<haxe_doc>Authentification without storing sessions. Useful for development, testing or occasional client request.
		In production sending credentials to the server multiple times should be avoided, use login/sessions instead.
	
		@param username The username of the user we wish to authentificate.
		@param password The user entered password.
		@return `true` if username and password are valid, false otherwise.</haxe_doc>
		</authenticate>
		<getUser public="1" set="method" line="58">
			<f a="userID">
				<x path="Int"/>
				<t path="tink.Outcome">
					<c path="ufront.auth.model.User"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</getUser>
		<getUserByUsername public="1" set="method" line="65">
			<f a="username">
				<c path="String"/>
				<t path="tink.Outcome">
					<c path="ufront.auth.model.User"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</getUserByUsername>
		<getAllUsers public="1" set="method" line="72">
			<f a=""><t path="tink.Outcome">
	<c path="List"><c path="ufront.auth.model.User"/></c>
	<t path="tink.Error"/>
</t></f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</getAllUsers>
		<getGroup public="1" set="method" line="79">
			<f a="groupID">
				<x path="Int"/>
				<t path="tink.Outcome">
					<c path="ufront.auth.model.Group"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</getGroup>
		<getGroupByName public="1" set="method" line="86">
			<f a="name">
				<c path="String"/>
				<t path="tink.Outcome">
					<c path="ufront.auth.model.Group"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</getGroupByName>
		<getAllGroups public="1" set="method" line="93">
			<f a=""><t path="tink.Outcome">
	<c path="List"><c path="ufront.auth.model.Group"/></c>
	<t path="tink.Error"/>
</t></f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</getAllGroups>
		<getAllGroupsForUser public="1" set="method" line="100">
			<f a="userID">
				<x path="Int"/>
				<t path="tink.Outcome">
					<c path="List"><c path="ufront.auth.model.Group"/></c>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</getAllGroupsForUser>
		<getAllUsersInGroup public="1" set="method" line="108">
			<f a="groupID">
				<x path="Int"/>
				<t path="tink.Outcome">
					<c path="List"><c path="ufront.auth.model.User"/></c>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</getAllUsersInGroup>
		<getAllPermissionsForUser public="1" set="method" line="116">
			<f a="userID">
				<x path="Int"/>
				<t path="tink.Outcome">
					<c path="List"><x path="EnumValue"/></c>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</getAllPermissionsForUser>
		<createUser public="1" set="method" line="130">
			<f a="username:password">
				<c path="String"/>
				<c path="String"/>
				<t path="tink.Outcome">
					<c path="ufront.auth.model.User"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</createUser>
		<createGroup public="1" set="method" line="139">
			<f a="groupName">
				<c path="String"/>
				<t path="tink.Outcome">
					<c path="ufront.auth.model.Group"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</createGroup>
		<userAllowedToAssignToGroup set="method" line="148"><f a="group">
	<c path="ufront.auth.model.Group"/>
	<x path="Void"/>
</f></userAllowedToAssignToGroup>
		<assignUserToGroup public="1" set="method" line="158">
			<f a="userID:groupID">
				<x path="Int"/>
				<x path="Int"/>
				<t path="tink.Outcome">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</assignUserToGroup>
		<removeUserFromGroup public="1" set="method" line="168">
			<f a="userID:groupID">
				<x path="Int"/>
				<x path="Int"/>
				<t path="tink.Outcome">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</removeUserFromGroup>
		<userAllowedToAssignPermissions set="method" line="178"><f a="permission">
	<x path="EnumValue"/>
	<x path="Void"/>
</f></userAllowedToAssignPermissions>
		<assignPermissionToUser public="1" set="method" line="188">
			<f a="permission:userID">
				<x path="EnumValue"/>
				<x path="Int"/>
				<t path="tink.Outcome">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</assignPermissionToUser>
		<assignPermissionToGroup public="1" set="method" line="209">
			<f a="permission:groupID">
				<x path="EnumValue"/>
				<x path="Int"/>
				<t path="tink.Outcome">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</assignPermissionToGroup>
		<revokePermissionFromUser public="1" set="method" line="230">
			<f a="permission:userID">
				<x path="EnumValue"/>
				<x path="Int"/>
				<t path="tink.Outcome">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</revokePermissionFromUser>
		<revokePermissionFromGroup public="1" set="method" line="239">
			<f a="permission:groupID">
				<x path="EnumValue"/>
				<x path="Int"/>
				<t path="tink.Outcome">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</revokePermissionFromGroup>
		<userAllowedToEditUsers set="method" line="248"><f a="user">
	<c path="ufront.auth.model.User"/>
	<x path="Void"/>
</f></userAllowedToEditUsers>
		<changeUsername public="1" set="method" line="258">
			<f a="userID:newUsername">
				<x path="Int"/>
				<c path="String"/>
				<t path="tink.Outcome">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</changeUsername>
		<changeCurrentUserPassword public="1" set="method" line="268">
			<f a="userID:oldPassword:newPassword">
				<x path="Int"/>
				<c path="String"/>
				<c path="String"/>
				<t path="tink.Outcome">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</changeCurrentUserPassword>
		<changeAnyPassword public="1" set="method" line="281">
			<f a="userID:newPassword">
				<x path="Int"/>
				<c path="String"/>
				<t path="tink.Outcome">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</changeAnyPassword>
		<userAllowedToEditGroups set="method" line="291"><f a="group">
	<c path="ufront.auth.model.Group"/>
	<x path="Void"/>
</f></userAllowedToEditGroups>
		<changeGroupName public="1" set="method" line="301">
			<f a="groupID:newName">
				<x path="Int"/>
				<c path="String"/>
				<t path="tink.Outcome">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n="returnType"><e>2</e></m></meta>
		</changeGroupName>
		<wrapInOutcome params="T" set="method" line="311"><f a="fn:?pos" v=":null">
	<f a=""><c path="wrapInOutcome.T"/></f>
	<t path="haxe.PosInfos"/>
	<t path="tink.Outcome">
		<c path="wrapInOutcome.T"/>
		<t path="tink.Error"/>
	</t>
</f></wrapInOutcome>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<haxe_doc>An API to conduct basic auth operations, from logging in to creating users and granting permissions.</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="ufront.db.Object" params="" file="C:\HaxeToolkit\haxe\lib/ufront-orm/1,0,0-rc,11/src/ufront/db/Object.hx">
		<extends path="sys.db.Object"/>
		<manager line="168" static="1">
			<c path="sys.db.Manager"><c path="ufront.db.Object"/></c>
			<haxe_doc>Even though it's non-sensical to have a manager on `ufront.db.Object`, the Haxe record macros (not the ufront ones) add a `__getManager` field if we don't have one (platforms other than neko.)
			This breaks things when you have an inheritance chain, where `ufront.db.Object` doesn't have a manager, but it's children do.
			As a workaround I'm putting this private static manager here.</haxe_doc>
		</manager>
		<id public="1">
			<t path="sys.db.SId"/>
			<haxe_doc>A default ID. Auto-incrementing 32-bit Int.</haxe_doc>
		</id>
		<created public="1">
			<t path="sys.db.SDateTime"/>
			<haxe_doc>The time this record was first created.</haxe_doc>
		</created>
		<modified public="1">
			<t path="sys.db.SDateTime"/>
			<haxe_doc>The time this record was last modified.</haxe_doc>
		</modified>
		<saved public="1" get="accessor" set="null">
			<t path="tink.Signal"><t path="tink.Noise"/></t>
			<meta><m n=":skip"/></meta>
			<haxe_doc>A signal that is triggered after a successful save.</haxe_doc>
		</saved>
		<savedTrigger>
			<t path="tink.SignalTrigger"><t path="tink.Noise"/></t>
			<meta><m n=":skip"/></meta>
		</savedTrigger>
		<insert public="1" set="method" line="93" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Inserts a new record to the database.
			Will throw an error if `this.validate()` fails.
			Updates the "created" and "modified" timestamps before saving.</haxe_doc>
		</insert>
		<update public="1" set="method" line="112" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Updates an existing record in the database.
			Will throw an error if `this.validate()` fails.
			Updates the "modified" timestamp before saving.</haxe_doc>
		</update>
		<save public="1" set="method" line="130">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Save a record (either inserting or updating) to the database.
			If `id` is null, then it needs to be inserted.
			If `id` already exists, try to update first.
			If that throws an error, it means that it is not inserted yet, so then insert it.
			Updates the "created" and "modified" timestamps as required.</haxe_doc>
		</save>
		<refresh public="1" set="method" line="155">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Refresh the relations on this object.
			Currently this does not refresh the object itself, it merely empties the cached related objects so they will be fetched again.
			In future we might get this to refresh the object itself from the database.</haxe_doc>
		</refresh>
		<toString public="1" set="method" line="243" override="1"><f a=""><c path="String"/></f></toString>
		<validationErrors public="1">
			<x path="ufront.db.ValidationErrors"/>
			<meta><m n=":skip"/></meta>
			<haxe_doc>If a call to validate() fails, it will populate this map with a list of errors.  The key should
	be the name of the field that failed validation, and the values should be a description of any errors.</haxe_doc>
		</validationErrors>
		<validate public="1" set="method" line="264">
			<f a=""><x path="Bool"/></f>
			<haxe_doc><![CDATA[A function to validate the current model.

	By default, this checks that no values are null unless they are Null<T> / SNull<T>, or if it the unique ID
	that will be automatically generated.  If any are null when they shouldn't be, the model fails to validate.

	It also looks for "validate_{fieldName}" functions, and if they match, it executes the function.  If the function
	throws an error or returns false, then validation will fail.

	If you override this method to add more custom validation, then we recommend starting with `super.validate()` and
	ending with `return validationErrors.isValid;`]]></haxe_doc>
		</validate>
		<_validationsFromMacros set="method" line="274">
			<f a=""><x path="Void"/></f>
			<haxe_doc>The build macro will save override this method and populate it with validation statements.</haxe_doc>
		</_validationsFromMacros>
		<get_saved set="method" line="276"><f a=""><t path="tink.Signal"><t path="tink.Noise"/></t></f></get_saved>
		<hxSerialize set="method" line="286">
			<f a="s">
				<c path="haxe.Serializer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":access"><e>'???'</e></m></meta>
			<haxe_doc>Custom serialization.  It will serialize all fields listed in the model's `@ufSerialize` metadata, which should be generated by the build macro for each model.</haxe_doc>
		</hxSerialize>
		<hxUnserialize set="method" line="329">
			<f a="s">
				<c path="haxe.Unserializer"/>
				<x path="Void"/>
			</f>
			<meta><m n=":access"><e>'???'</e></m></meta>
			<haxe_doc>Custom serialization.  It will unserialize all fields listed in the model's `@ufSerialize` metadata, which should be generated by the build macro for each model.</haxe_doc>
		</hxUnserialize>
		<new public="1" set="method" line="83"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Ufront DB Objects

This is the base class for models in Ufront's "Model, View, Controller" pattern.

Each model extends `ufront.db.Object`, and uses simple fields to describe what kind of data each of these objects will contain, and how that is saved to the database.
The type of each variable matches the type used in the database.

On the server, this class extends `sys.db.Object` and adds:

- a default unique `this.id` field (`SUId`, unsigned auto-incrementing integer)
- a `this.created` timestamp (`SDateTime`)
- a `this.modified` timestamps (`SDateTime`)
- modified `this.insert()` and `this.update()` methods that check validation and updates `this.created` and `this.modified` timestamps
- a `this.save()` method that performs either `this.insert()` or `this.update()`
- a `this.validate()` method that checks if the object is valid. This method is filled out with validation rules by a build macro.
- a `this.validationErrors` property to check which errors were found in validation.
- macro powered `this.hxSerialize()` and `this.hxUnserialize()` methods to ensure these objects serialize and unserialize nicely.
- a default `this.toString()` method that provides "${modelName}#${id}" eg "Person#23"
- a `save` signal

On the client, this *does not* longer extends `sys.db.Object`, so you can interact with your models even on targets that don't have access to the `sys.db` APIs - for example, Javascript in the browser.

This means that:

- Client side code can create, edit, and validate the objects.
- You can send objects back and forward using Haxe remoting, for example saving an object to the server, or retrieving a list from the server.
- When you unpack the object on the client it is fully typed, and you get full code re-use between client and server.
- They just can't save them back to the database, because you can't connect to (for example) MySQL directly.
- There is the experimental `ClientDS` library which allows you to save back to the server asynchronously using a remoting API.

You should use `-D server` or `-D client` defines in your hxml build file to help ufront know whether we're compiling for the server or client.

Build macro effects:

- Process `BelongsTo<T>`, `HasMany<T>`, `HasOne<T>` and `ManyToMany<A,B>` relationships and create the appropriate getters and setters.
- Add the appropriate validation checks to our `this.validate()` method.
- Save appropriate metadata for being able to serialize and unserialize correctly.
- On the server, create a `public static var manager:Manager<T> = new Manager(T)` property for each class.
- On the client, if using ClientDS, create a `public static var clientDS:ClientDS<T>` property for each class.]]></haxe_doc>
		<meta>
			<m n="rtti"><e>"oy4:namey6:Objecty7:indexesahy9:relationsahy7:hfieldsby2:idoR0R5y6:isNullfy1:tjy17:sys.db.RecordType:0:0gy8:modifiedoR0R9R6fR7jR8:11:0gy7:createdoR0R10R6fR7r7ghy3:keyaR5hy6:fieldsar4r8r6hg"</e></m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="noTable"/>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="ufront.auth.model.Group" params="" file="C:\HaxeToolkit\haxe\lib/ufront-easyauth/1,0,0-rc,9/src/ufront/auth/model/Group.hx">
		<extends path="ufront.db.Object"/>
		<manager public="1" line="767" static="1"><c path="sys.db.Manager"><c path="ufront.auth.model.Group"/></c></manager>
		<name public="1"><t path="sys.db.SString"><c path="I255"/></t></name>
		<users public="1" get="accessor" set="null">
			<c path="ufront.db.ManyToMany">
				<c path="ufront.auth.model.Group"/>
				<c path="ufront.auth.model.User"/>
			</c>
			<meta>
				<m n=":skip"/>
				<m n=":includeInSerialization"/>
			</meta>
		</users>
		<permissions public="1" get="accessor" set="accessor">
			<t path="ufront.db.HasMany"><c path="ufront.auth.model.Permission"/></t>
			<meta>
				<m n=":skip"/>
				<m n=":isVar"/>
			</meta>
		</permissions>
		<get_users set="method" line="21">
			<f a=""><c path="ufront.db.ManyToMany">
	<c path="ufront.auth.model.Group"/>
	<c path="ufront.auth.model.User"/>
</c></f>
			<meta><m n=":access"><e>'???'</e></m></meta>
		</get_users>
		<get_permissions set="method" line="500"><f a=""><c path="List"><c path="ufront.auth.model.Permission"/></c></f></get_permissions>
		<set_permissions set="method" line="518"><f a="list">
	<c path="List"><c path="ufront.auth.model.Permission"/></c>
	<c path="List"><c path="ufront.auth.model.Permission"/></c>
</f></set_permissions>
		<_validationsFromMacros set="method" line="779" override="1"><f a=""><x path="Void"/></f></_validationsFromMacros>
		<new public="1" set="method" line="13"><f a="?name" v="null">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n="rtti"><e>"oy4:namey10:auth_groupy7:indexesahy9:relationsahy7:hfieldsby2:idoR0R5y6:isNullfy1:tjy17:sys.db.RecordType:0:0gR0oR0R0R6fR7jR8:9:1i255gy8:modifiedoR0R9R6fR7jR8:11:0gy7:createdoR0R10R6fR7r9ghy3:keyaR5hy6:fieldsar4r10r8r6hg"</e></m>
			<m n="ufRelationships">
				<e>"users,ManyToMany,ufront.auth.model.User"</e>
				<e>"permissions,HasMany,ufront.auth.model.Permission,groupID"</e>
			</m>
			<m n="ufSerialize">
				<e>"name"</e>
				<e>"ManyToManyusers"</e>
				<e>"id"</e>
				<e>"created"</e>
				<e>"modified"</e>
			</m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":table"><e>"auth_group"</e></m>
		</meta>
	</class>
	<class path="ufront.auth.model.Permission" params="" file="C:\HaxeToolkit\haxe\lib/ufront-easyauth/1,0,0-rc,9/src/ufront/auth/model/Permission.hx">
		<extends path="ufront.db.Object"/>
		<getPermissionID public="1" set="method" line="17" static="1"><f a="e">
	<x path="EnumValue"/>
	<c path="String"/>
</f></getPermissionID>
		<manager public="1" line="767" static="1"><c path="sys.db.Manager"><c path="ufront.auth.model.Permission"/></c></manager>
		<permission public="1"><t path="sys.db.SString"><c path="I255"/></t></permission>
		<group public="1" get="accessor" set="accessor">
			<t path="Null"><t path="ufront.db.BelongsTo"><c path="ufront.auth.model.Group"/></t></t>
			<meta>
				<m n=":skip"/>
				<m n=":isVar"/>
			</meta>
		</group>
		<user public="1" get="accessor" set="accessor">
			<t path="Null"><t path="ufront.db.BelongsTo"><c path="ufront.auth.model.User"/></t></t>
			<meta>
				<m n=":skip"/>
				<m n=":isVar"/>
			</meta>
		</user>
		<groupID public="1">
			<t path="Null"><t path="sys.db.SUInt"/></t>
			<haxe_doc>The unique ID for field `group`.  This is what is actually stored in the database</haxe_doc>
		</groupID>
		<get_group set="method" line="14"><f a=""><t path="Null"><c path="ufront.auth.model.Group"/></t></f></get_group>
		<set_group set="method" line="14"><f a="v">
	<t path="Null"><c path="ufront.auth.model.Group"/></t>
	<t path="Null"><c path="ufront.auth.model.Group"/></t>
</f></set_group>
		<userID public="1">
			<t path="Null"><t path="sys.db.SUInt"/></t>
			<haxe_doc>The unique ID for field `user`.  This is what is actually stored in the database</haxe_doc>
		</userID>
		<get_user set="method" line="15"><f a=""><t path="Null"><c path="ufront.auth.model.User"/></t></f></get_user>
		<set_user set="method" line="15"><f a="v">
	<t path="Null"><c path="ufront.auth.model.User"/></t>
	<t path="Null"><c path="ufront.auth.model.User"/></t>
</f></set_user>
		<_validationsFromMacros set="method" line="779" override="1"><f a=""><x path="Void"/></f></_validationsFromMacros>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n="rtti"><e>"oy4:namey15:auth_permissiony7:indexesaoy4:keysay10:permissiony7:groupIDhy6:uniquetgoR3aR4y6:userIDhR6tghy9:relationsahy7:hfieldsby2:idoR0R10y6:isNullfy1:tjy17:sys.db.RecordType:0:0gR4oR0R4R11fR12jR13:9:1i255gy8:modifiedoR0R14R11fR12jR13:11:0gR5oR0R5R11tR12jR13:3:0gR7oR0R7R11tR12r15gy7:createdoR0R15R11fR12r13ghy3:keyaR10hy6:fieldsar8r17r12r10r14r16hg"</e></m>
			<m n="ufRelationships">
				<e>"group,BelongsTo,ufront.auth.model.Group"</e>
				<e>"user,BelongsTo,ufront.auth.model.User"</e>
			</m>
			<m n="ufSerialize">
				<e>"permission"</e>
				<e>"groupID"</e>
				<e>"userID"</e>
				<e>"id"</e>
				<e>"created"</e>
				<e>"modified"</e>
			</m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":table"><e>"auth_permission"</e></m>
			<m n=":index">
				<e>permission</e>
				<e>groupID</e>
				<e>unique</e>
			</m>
			<m n=":index">
				<e>permission</e>
				<e>userID</e>
				<e>unique</e>
			</m>
		</meta>
	</class>
	<class path="ufront.auth.model.User" params="" file="C:\HaxeToolkit\haxe\lib/ufront-easyauth/1,0,0-rc,9/src/ufront/auth/model/User.hx">
		<extends path="ufront.db.Object"/>
		<implements path="ufront.auth.UFAuthUser"/>
		<generatePasswordHash public="1" set="method" line="108" static="1"><f a="password:salt">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></generatePasswordHash>
		<manager public="1" line="767" static="1"><c path="sys.db.Manager"><c path="ufront.auth.model.User"/></c></manager>
		<username public="1"><t path="sys.db.SString"><c path="I40"/></t></username>
		<salt public="1"><t path="sys.db.SString"><c path="I32"/></t></salt>
		<password public="1"><t path="sys.db.SString"><c path="I64"/></t></password>
		<forcePasswordChange public="1"><x path="Bool"/></forcePasswordChange>
		<userPermissions public="1" get="accessor" set="accessor">
			<t path="ufront.db.HasMany"><c path="ufront.auth.model.Permission"/></t>
			<meta>
				<m n=":skip"/>
				<m n=":isVar"/>
			</meta>
		</userPermissions>
		<groups public="1" get="accessor" set="null">
			<c path="ufront.db.ManyToMany">
				<c path="ufront.auth.model.User"/>
				<c path="ufront.auth.model.Group"/>
			</c>
			<meta>
				<m n=":skip"/>
				<m n=":includeInSerialization"/>
			</meta>
		</groups>
		<userID public="1" get="accessor" set="null">
			<c path="String"/>
			<meta><m n=":skip"/></meta>
		</userID>
		<setPassword public="1" set="method" line="40">
			<f a="password">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Generate a new salt and password.  You will need to call save() yourself</haxe_doc>
		</setPassword>
		<can public="1" set="method" line="55">
			<f a="?permission:?permissions" v="null:null">
				<x path="EnumValue"/>
				<t path="Iterable"><x path="EnumValue"/></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check permissions.  if (myUser.can(DriveCar) or if (myUser.can([DriveCar,BorrowParentsCar])) { ... }</haxe_doc>
		</can>
		<get_userID set="method" line="64"><f a=""><t path="sys.db.SString"><c path="I40"/></t></f></get_userID>
		<checkPermission set="method" line="68"><f a="p">
	<x path="EnumValue"/>
	<x path="Bool"/>
</f></checkPermission>
		<allUserPermissions>
			<c path="List"><c path="String"/></c>
			<meta><m n=":skip"/></meta>
		</allUserPermissions>
		<loadUserPermissions set="method" line="74"><f a=""><x path="Void"/></f></loadUserPermissions>
		<toString public="1" set="method" line="95" override="1"><f a=""><t path="sys.db.SString"><c path="I40"/></t></f></toString>
		<removeSensitiveData public="1" set="method" line="101"><f a=""><c path="ufront.auth.model.User"/></f></removeSensitiveData>
		<get_userPermissions set="method" line="500"><f a=""><c path="List"><c path="ufront.auth.model.Permission"/></c></f></get_userPermissions>
		<set_userPermissions set="method" line="518"><f a="list">
	<c path="List"><c path="ufront.auth.model.Permission"/></c>
	<c path="List"><c path="ufront.auth.model.Permission"/></c>
</f></set_userPermissions>
		<get_groups set="method" line="21">
			<f a=""><c path="ufront.db.ManyToMany">
	<c path="ufront.auth.model.User"/>
	<c path="ufront.auth.model.Group"/>
</c></f>
			<meta><m n=":access"><e>'???'</e></m></meta>
		</get_groups>
		<_validationsFromMacros set="method" line="779" override="1"><f a=""><x path="Void"/></f></_validationsFromMacros>
		<new public="1" set="method" line="24"><f a="username:?password" v=":null">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n="rtti"><e>"oy4:namey9:auth_usery7:indexesaoy4:keysay8:usernamehy6:uniquetghy9:relationsahy7:hfieldsbR4oR0R4y6:isNullfy1:tjy17:sys.db.RecordType:9:1i40gy2:idoR0R11R8fR9jR10:0:0gy8:modifiedoR0R12R8fR9jR10:11:0gy4:saltoR0R13R8fR9jR10:9:1i32gy7:createdoR0R14R8fR9r11gy19:forcePasswordChangeoR0R15R8fR9jR10:8:0gy8:passwordoR0R16R8fR9jR10:9:1i64ghy3:keyaR11hy6:fieldsar8r14r10r6r12r17r15hg"</e></m>
			<m n="ufRelationships">
				<e>"userPermissions,HasMany,ufront.auth.model.Permission,userID"</e>
				<e>"groups,ManyToMany,ufront.auth.model.Group"</e>
			</m>
			<m n="ufSerialize">
				<e>"username"</e>
				<e>"salt"</e>
				<e>"password"</e>
				<e>"forcePasswordChange"</e>
				<e>"ManyToManygroups"</e>
				<e>"id"</e>
				<e>"created"</e>
				<e>"modified"</e>
			</m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":table"><e>"auth_user"</e></m>
			<m n=":index">
				<e>username</e>
				<e>unique</e>
			</m>
		</meta>
	</class>
	<class path="ufront.core.InjectionRef" params="T" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/core/InjectionRef.hx">
		<pool line="30" static="1"><c path="Array"><c path="ufront.core.InjectionRef"><d/></c></c></pool>
		<of public="1" params="T" set="method" line="33" static="1">
			<f a="v">
				<c path="of.T"/>
				<c path="ufront.core.InjectionRef"><c path="of.T"/></c>
			</f>
			<haxe_doc>Return a reference for the current value.</haxe_doc>
		</of>
		<value><c path="ufront.core.InjectionRef.T"/></value>
		<get public="1" set="method" line="49">
			<f a=""><c path="ufront.core.InjectionRef.T"/></f>
			<haxe_doc>Return the value behind the current reference.
		Please note that this can only be called once - after that the value is set to null and the object is recycled.</haxe_doc>
		</get>
		<new set="method" line="43"><f a="v">
	<c path="ufront.core.InjectionRef.T"/>
	<x path="Void"/>
</f></new>
		<haxe_doc><![CDATA[Sadly the `minject` library only supports injecting dependencies that are a class instance.
	Sometimes we would like to inject integers, booleans, functions, abstracts or more.
	This class provides a simple wrapper object that can be used.

	Please note that because minject doesn't pay attention to type parameters, any `InjectionRef` mapping will match any `InjectionRef` injection point.
	Therefore it is recommended you use named injection points whenever using `InjectionRef`.

	For example:

	```haxe
	var someInt:Int;
	@inject("someInt") public function new( ref:InjectionRef<Int> ) {
		this.someInt = ref.get();
	}
	```

	And then when you map a value:

	```haxe
	injector.mapValue( InjectionRef, "someInt", InjectionRef.of(99) );
	```

	Please note that all `InjectionRef` objects are recycled - after `get()` is called the value is emptied and the object is added to a pool to be used on the next `of()` call.]]></haxe_doc>
	</class>
	<class path="ufront.core.InjectionTools" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/core/InjectionTools.hx">
		<inject public="1" params="T" set="method" line="35" static="1">
			<f a="injector:cl:?val:?cl2:?singleton:?named" v="::null:null:false:null">
				<c path="minject.Injector"/>
				<x path="Class"><c path="inject.T"/></x>
				<c path="inject.T"/>
				<x path="Class"><c path="inject.T"/></x>
				<x path="Bool"/>
				<c path="String"/>
				<c path="minject.Injector"/>
			</f>
			<haxe_doc><![CDATA[Shortcut to map a class into `injector`.

		The rules are as follows:

		> - If `cl` is null, this method has no effect.
		> - If `val` is supplied, `injector.mapValue( cl, val, ?named )` will be used.
		> 	- If the type of val is not exactly `cl`, then `injector.mapValue( Type.getClass(cl), val, ?named )` will also be called so that the implementation class is available.
		> - Otherwise, if `singleton` is true:
		> 	- And `cl2` is supplied, `injector.mapSingletonOf( cl, cl2, ?named )` is used.
		> 	- And `cl2` is not supplied, `injector.mapSingleton( cl, ?named )` is used.
		> - Otherwise, if `singleton` is false:
		> 	- And `cl2` is supplied, `injector.mapClass( cl, cl2, ?named )` is used.
		> 	- And `cl2` is not supplied, `injector.mapClass( cl, cl, ?named )` is used.

		If a mapping for this class & name already exists, it will be replaced.
		If a mapping for this class & name already exists on a parent injector, it will be left in place, but the rule on the current (child) injector will take precedence.

		@param injector (required) The injector to inject into.
		@param cl (required) The `whenAskedFor` class or interface. If `cl2` is not supplied this is also used as the implementation.
		@param val (optional) The value to supply.
		@param cl2 (optional) An implementation class to use when `cl` is asked for. If not supplied, `cl` will be used.
		@param singleton (default=false) Should this class produce always produce a singleton?
		@param named (optional) A specific name that this injection mapping should apply to.
		@return The original injector.]]></haxe_doc>
		</inject>
		<listMappings public="1" set="method" line="75" static="1">
			<f a="injector:?arr:?prefix" v=":null:''">
				<c path="minject.Injector"/>
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Get a list of strings describing all the current mappings on this injector and it's parents.

		This is useful for debugging / logging purposes.

		@param injector The current injector
		@param arr Optional, used for recursively checking parent injectors, should not be set manually.
		@param prefix Optional, used for recursively checking parent injectors, should not be set manually.
		@return An array containing a list of strings describing the current injecctor.</haxe_doc>
		</listMappings>
		<haxe_doc>Some utilities for working with `minject.Injector`.</haxe_doc>
	</class>
	<abstract path="ufront.core.MultiValueMap" params="T" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/core/MultiValueMap.hx">
		<from>
			<icast><c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c></icast>
			<icast field="fromMapOfArrays"><x path="Map">
	<c path="String"/>
	<c path="Array"><c path="fromMapOfArrays.T"/></c>
</x></icast>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.T"/></c></icast>
			<icast field="fromMap"><x path="Map">
	<c path="String"/>
	<c path="fromMap.T"/>
</x></icast>
		</from>
		<this><c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c></this>
		<to>
			<icast><c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c></icast>
			<icast field="toMapOfArrays"><x path="Map">
	<c path="String"/>
	<c path="Array"><c path="toMapOfArrays.T"/></c>
</x></icast>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="ufront.core.MultiValueMap.T"/></c></icast>
			<icast field="toMap"><x path="Map">
	<c path="String"/>
	<c path="ufront.core.MultiValueMap.T"/>
</x></icast>
		</to>
		<haxe_doc><![CDATA[A custom map structure that represents Http GET/POST parameters.

	It behaves similarly to `Map<String,T>`, except it can contain multiple values for a given parameter name, which is suitable for HTML inputs that return multiple values.

	Notes:

	- For PHP, multiple values are only supported if the parameter name ends with `[]`.
	- Because of the PHP limitation, other platforms (neko etc) ignore a `[]` at the end of a parameter name.
	- Complex lists, such as the following, are not supported: `<input name="person[1][firstName]" />`, only simple "[]" is supported: `<input name="person[]">`]]></haxe_doc>
		<impl><class path="ufront.core._MultiValueMap.MultiValueMap_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/core/MultiValueMap.hx" private="1" module="ufront.core.MultiValueMap">
	<_new public="1" get="inline" set="null" line="19" static="1">
		<f a=""><c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c></f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Create a new MultiValueMap</haxe_doc>
	</_new>
	<keys public="1" get="inline" set="null" line="26" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
			<t path="Iterator"><c path="String"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Return an iterator containing the names of all parameters in this MultiValueMap</haxe_doc>
	</keys>
	<exists public="1" get="inline" set="null" line="33" static="1">
		<f a="this:name">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Check if a parameter with the given name exists.

		If the `name` is null, the result is unspecified.</haxe_doc>
	</exists>
	<iterator public="1" set="method" line="39" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
			<t path="Iterator"><c path="ufront.core.MultiValueMap.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Return an iterator containing the values of each parameter in this MultiValueMap.
		If multiple parameters have the same name, all values will be included.</haxe_doc>
	</iterator>
	<get public="1" set="method" line="52" static="1">
		<f a="this:name">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
			<c path="String"/>
			<t path="Null"><c path="ufront.core.MultiValueMap.T"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Get the value for a parameter with this name.

		If this name has more than one parameter, the final value (in the order they were set) will be used.
		If there is no parameter with this name, it returns null.
		If `name` is null, the result is unspecified.

		Array access is provided on this method: `trace ( myMultiValueMap['emailAddress'] )`</haxe_doc>
	</get>
	<getAll public="1" set="method" line="71" static="1">
		<f a="this:name">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
			<c path="String"/>
			<c path="Array"><c path="ufront.core.MultiValueMap.T"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Get an array of values for the given parameter name.

		Multiple values will be returned in the order they were set.
		If there is only a single value, the array will have a length of `1`.
		If there is no parameter with this name, the array will have a length of `0`.
		If `name` is null, the result is unspecified.

		If the field name in your HTML input ended with "[]", you do not need to include that here.
		For example, the values of `<input name='phone[]' /><input name='phone[]' />` could be accessed with `MultiValueMap.get('phone')`.]]></haxe_doc>
	</getAll>
	<set public="1" set="method" line="88" static="1">
		<f a="this:name:value">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
			<c path="String"/>
			<c path="ufront.core.MultiValueMap.T"/>
			<x path="Void"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Set a value in our MultiValueMap.

		If one or more parameters already existed for this name, they will be replaced.
		If the value is null, this method will have no effect.
		If name is null, the result is unspecified.

		If the name ends with "[]", the "[]" will be stripped from the name before setting the value.
		Names such as this are required for PHP to have multiple values with the same name.

		Array access is provided on this method: `trace ( myMultiValueMap['emailAddress'] = 'jason@ufront.net'; )`</haxe_doc>
	</set>
	<add public="1" set="method" line="105" static="1">
		<f a="this:name:value">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
			<c path="String"/>
			<c path="ufront.core.MultiValueMap.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Add a value to our MultiValueMap.

		If the value already exists, this value will be added after it.
		If the value is null, this will have no effect.
		If `name` is null, the result is unspecified.

		If the name ends with "[]", the "[]" will be stripped from the name before setting the value.
		Names such as this are required for PHP to have multiple values with the same name.</haxe_doc>
	</add>
	<remove public="1" get="inline" set="null" line="120" static="1">
		<f a="this:key">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Remove all values for a given key

		If the `key` is null, the result is unspecified.</haxe_doc>
	</remove>
	<clone public="1" set="method" line="129" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
			<x path="ufront.core.MultiValueMap"><c path="ufront.core.MultiValueMap.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Create a clone of the current MultiValueMap.

		The clone is a shallow copy - the values point to the same objects in memory as the original map values.

		However the array for storing multiple values is a new array, meaning adding a new value on the cloned array will not cause the new value to appear on the original array.</haxe_doc>
	</clone>
	<toString public="1" set="method" line="142" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Create a string representation of the current map.</haxe_doc>
	</toString>
	<stripArrayFromName get="inline" set="null" line="156" static="1">
		<f a="this:name">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</stripArrayFromName>
	<toMapOfArrays public="1" params="T" get="inline" set="null" line="163" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="toMapOfArrays.T"/></c></c>
			<x path="Map">
				<c path="String"/>
				<c path="Array"><c path="toMapOfArrays.T"/></c>
			</x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[Implicit cast to `Map<String,Array<T>>`]]></haxe_doc>
	</toMapOfArrays>
	<fromMapOfArrays public="1" params="T" get="inline" set="null" line="168" static="1">
		<f a="map">
			<x path="Map">
				<c path="String"/>
				<c path="Array"><c path="fromMapOfArrays.T"/></c>
			</x>
			<x path="ufront.core.MultiValueMap"><c path="fromMapOfArrays.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[Implicit cast from `Map<String,Array<T>>`]]></haxe_doc>
	</fromMapOfArrays>
	<toStringMap public="1" set="method" line="175" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
			<c path="haxe.ds.StringMap"><c path="ufront.core.MultiValueMap.T"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[Convert a `MultiValueMap` into a `StringMap<T>`]]></haxe_doc>
	</toStringMap>
	<toMap public="1" get="inline" set="null" line="184" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
			<x path="Map">
				<c path="String"/>
				<c path="ufront.core.MultiValueMap.T"/>
			</x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[Convert a `MultiValueMap` into a `Map<String,T>`]]></haxe_doc>
	</toMap>
	<fromStringMap public="1" params="T" set="method" line="191" static="1">
		<f a="stringMap">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.T"/></c>
			<x path="ufront.core.MultiValueMap"><c path="fromStringMap.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[Convert a `StringMap<T>` into a `MultiValueMap`

		If `map` is null, this will return an empty `MultiValueMap`.]]></haxe_doc>
	</fromStringMap>
	<fromMap public="1" params="T" get="inline" set="null" line="204" static="1">
		<f a="map">
			<x path="Map">
				<c path="String"/>
				<c path="fromMap.T"/>
			</x>
			<x path="ufront.core.MultiValueMap"><c path="fromMap.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[Convert a `Map<String,T>` into a `MultiValueMap`

		If `map` is null, this will return an empty `MultiValueMap`]]></haxe_doc>
	</fromMap>
	<combine public="1" params="T" set="method" line="209" static="1">
		<f a="maps">
			<c path="Array"><x path="ufront.core.MultiValueMap"><c path="combine.T"/></x></c>
			<x path="ufront.core.MultiValueMap"><c path="combine.T"/></x>
		</f>
		<haxe_doc>Combine multiple `MultiValueMap`s into a single map.</haxe_doc>
	</combine>
</class></impl>
	</abstract>
	<class path="ufront.core._MultiValueMap.MultiValueMap_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/core/MultiValueMap.hx" private="1" module="ufront.core.MultiValueMap">
		<_new public="1" get="inline" set="null" line="19" static="1">
			<f a=""><c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c></f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Create a new MultiValueMap</haxe_doc>
		</_new>
		<keys public="1" get="inline" set="null" line="26" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
				<t path="Iterator"><c path="String"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Return an iterator containing the names of all parameters in this MultiValueMap</haxe_doc>
		</keys>
		<exists public="1" get="inline" set="null" line="33" static="1">
			<f a="this:name">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Check if a parameter with the given name exists.

		If the `name` is null, the result is unspecified.</haxe_doc>
		</exists>
		<iterator public="1" set="method" line="39" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
				<t path="Iterator"><c path="ufront.core.MultiValueMap.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Return an iterator containing the values of each parameter in this MultiValueMap.
		If multiple parameters have the same name, all values will be included.</haxe_doc>
		</iterator>
		<get public="1" set="method" line="52" static="1">
			<f a="this:name">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
				<c path="String"/>
				<t path="Null"><c path="ufront.core.MultiValueMap.T"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Get the value for a parameter with this name.

		If this name has more than one parameter, the final value (in the order they were set) will be used.
		If there is no parameter with this name, it returns null.
		If `name` is null, the result is unspecified.

		Array access is provided on this method: `trace ( myMultiValueMap['emailAddress'] )`</haxe_doc>
		</get>
		<getAll public="1" set="method" line="71" static="1">
			<f a="this:name">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
				<c path="String"/>
				<c path="Array"><c path="ufront.core.MultiValueMap.T"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Get an array of values for the given parameter name.

		Multiple values will be returned in the order they were set.
		If there is only a single value, the array will have a length of `1`.
		If there is no parameter with this name, the array will have a length of `0`.
		If `name` is null, the result is unspecified.

		If the field name in your HTML input ended with "[]", you do not need to include that here.
		For example, the values of `<input name='phone[]' /><input name='phone[]' />` could be accessed with `MultiValueMap.get('phone')`.]]></haxe_doc>
		</getAll>
		<set public="1" set="method" line="88" static="1">
			<f a="this:name:value">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
				<c path="String"/>
				<c path="ufront.core.MultiValueMap.T"/>
				<x path="Void"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Set a value in our MultiValueMap.

		If one or more parameters already existed for this name, they will be replaced.
		If the value is null, this method will have no effect.
		If name is null, the result is unspecified.

		If the name ends with "[]", the "[]" will be stripped from the name before setting the value.
		Names such as this are required for PHP to have multiple values with the same name.

		Array access is provided on this method: `trace ( myMultiValueMap['emailAddress'] = 'jason@ufront.net'; )`</haxe_doc>
		</set>
		<add public="1" set="method" line="105" static="1">
			<f a="this:name:value">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
				<c path="String"/>
				<c path="ufront.core.MultiValueMap.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Add a value to our MultiValueMap.

		If the value already exists, this value will be added after it.
		If the value is null, this will have no effect.
		If `name` is null, the result is unspecified.

		If the name ends with "[]", the "[]" will be stripped from the name before setting the value.
		Names such as this are required for PHP to have multiple values with the same name.</haxe_doc>
		</add>
		<remove public="1" get="inline" set="null" line="120" static="1">
			<f a="this:key">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Remove all values for a given key

		If the `key` is null, the result is unspecified.</haxe_doc>
		</remove>
		<clone public="1" set="method" line="129" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
				<x path="ufront.core.MultiValueMap"><c path="ufront.core.MultiValueMap.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Create a clone of the current MultiValueMap.

		The clone is a shallow copy - the values point to the same objects in memory as the original map values.

		However the array for storing multiple values is a new array, meaning adding a new value on the cloned array will not cause the new value to appear on the original array.</haxe_doc>
		</clone>
		<toString public="1" set="method" line="142" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Create a string representation of the current map.</haxe_doc>
		</toString>
		<stripArrayFromName get="inline" set="null" line="156" static="1">
			<f a="this:name">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</stripArrayFromName>
		<toMapOfArrays public="1" params="T" get="inline" set="null" line="163" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="toMapOfArrays.T"/></c></c>
				<x path="Map">
					<c path="String"/>
					<c path="Array"><c path="toMapOfArrays.T"/></c>
				</x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[Implicit cast to `Map<String,Array<T>>`]]></haxe_doc>
		</toMapOfArrays>
		<fromMapOfArrays public="1" params="T" get="inline" set="null" line="168" static="1">
			<f a="map">
				<x path="Map">
					<c path="String"/>
					<c path="Array"><c path="fromMapOfArrays.T"/></c>
				</x>
				<x path="ufront.core.MultiValueMap"><c path="fromMapOfArrays.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[Implicit cast from `Map<String,Array<T>>`]]></haxe_doc>
		</fromMapOfArrays>
		<toStringMap public="1" set="method" line="175" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
				<c path="haxe.ds.StringMap"><c path="ufront.core.MultiValueMap.T"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[Convert a `MultiValueMap` into a `StringMap<T>`]]></haxe_doc>
		</toStringMap>
		<toMap public="1" get="inline" set="null" line="184" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="ufront.core.MultiValueMap.T"/></c></c>
				<x path="Map">
					<c path="String"/>
					<c path="ufront.core.MultiValueMap.T"/>
				</x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[Convert a `MultiValueMap` into a `Map<String,T>`]]></haxe_doc>
		</toMap>
		<fromStringMap public="1" params="T" set="method" line="191" static="1">
			<f a="stringMap">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.T"/></c>
				<x path="ufront.core.MultiValueMap"><c path="fromStringMap.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[Convert a `StringMap<T>` into a `MultiValueMap`

		If `map` is null, this will return an empty `MultiValueMap`.]]></haxe_doc>
		</fromStringMap>
		<fromMap public="1" params="T" get="inline" set="null" line="204" static="1">
			<f a="map">
				<x path="Map">
					<c path="String"/>
					<c path="fromMap.T"/>
				</x>
				<x path="ufront.core.MultiValueMap"><c path="fromMap.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[Convert a `Map<String,T>` into a `MultiValueMap`

		If `map` is null, this will return an empty `MultiValueMap`]]></haxe_doc>
		</fromMap>
		<combine public="1" params="T" set="method" line="209" static="1">
			<f a="maps">
				<c path="Array"><x path="ufront.core.MultiValueMap"><c path="combine.T"/></x></c>
				<x path="ufront.core.MultiValueMap"><c path="combine.T"/></x>
			</f>
			<haxe_doc>Combine multiple `MultiValueMap`s into a single map.</haxe_doc>
		</combine>
	</class>
	<class path="ufront.core.OrderedStringMap" params="T" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/core/OrderedStringMap.hx">
		<length public="1" set="null"><x path="Int"/></length>
		<set public="1" set="method" line="22"><f a="key:value">
	<c path="String"/>
	<c path="ufront.core.OrderedStringMap.T"/>
	<x path="Void"/>
</f></set>
		<setAt public="1" set="method" line="32"><f a="index:key:value">
	<x path="Int"/>
	<c path="String"/>
	<c path="ufront.core.OrderedStringMap.T"/>
	<x path="Void"/>
</f></setAt>
		<get public="1" set="method" line="40"><f a="key">
	<c path="String"/>
	<t path="Null"><c path="ufront.core.OrderedStringMap.T"/></t>
</f></get>
		<getAt public="1" set="method" line="45"><f a="index">
	<x path="Int"/>
	<t path="Null"><c path="ufront.core.OrderedStringMap.T"/></t>
</f></getAt>
		<indexOf public="1" set="method" line="50"><f a="key">
	<c path="String"/>
	<x path="Int"/>
</f></indexOf>
		<exists public="1" set="method" line="59"><f a="key">
	<c path="String"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method" line="64"><f a="key">
	<c path="String"/>
	<c path="ufront.core.OrderedStringMap.T"/>
</f></remove>
		<removeAt public="1" set="method" line="74"><f a="index">
	<x path="Int"/>
	<c path="ufront.core.OrderedStringMap.T"/>
</f></removeAt>
		<keyAt public="1" set="method" line="85"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></keyAt>
		<keys public="1" set="method" line="90"><f a=""><t path="Iterator"><c path="String"/></t></f></keys>
		<iterator public="1" set="method" line="95"><f a=""><t path="Iterator"><c path="ufront.core.OrderedStringMap.T"/></t></f></iterator>
		<clear public="1" set="method" line="100"><f a=""><x path="Void"/></f></clear>
		<array public="1" set="method" line="107"><f a=""><c path="Array"><c path="ufront.core.OrderedStringMap.T"/></c></f></array>
		<toString public="1" set="method" line="115"><f a=""><c path="String"/></f></toString>
		<__keys><c path="Array"><c path="String"/></c></__keys>
		<__hash><x path="Map">
	<c path="String"/>
	<c path="ufront.core.OrderedStringMap.T"/>
</x></__hash>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[An ordered map implementation.
	Copied from `thx.collections.HashList` in Franco's old thx library - it doesn't seem to be in the new version.
	In future we might change this to an abstract or make it compatible with Map<String,T>
	@author Franco Ponticelli]]></haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<class path="ufront.core.Sync" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/core/Sync.hx">
		<success public="1" params="F" set="method" line="15" static="1">
			<f a=""><t path="tink.Surprise">
	<t path="tink.Noise"/>
	<c path="success.F"/>
</t></f>
			<haxe_doc><![CDATA[Return a Success(Noise) to satisfy Surprise<Noise,T>]]></haxe_doc>
		</success>
		<s static="1"><t path="tink.Surprise">
	<t path="tink.Noise"/>
	<d/>
</t></s>
		<httpError public="1" params="S" set="method" line="26" static="1">
			<f a="?msg:?err:?p" v="null:null:null">
				<c path="String"/>
				<d/>
				<t path="tink.core.Pos"/>
				<t path="tink.Surprise">
					<c path="httpError.S"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc><![CDATA[Return a Failure(Error) to satisfy Surprise<T,HttpError>

		Will wrap your error with `HttpError.internalServerError(err)`]]></haxe_doc>
		</httpError>
		<of public="1" params="T" set="method" line="33" static="1">
			<f a="v">
				<c path="of.T"/>
				<t path="tink.Future"><c path="of.T"/></t>
			</f>
			<haxe_doc>Alias for `tink.core.Future.sync(v)`</haxe_doc>
		</of>
		<haxe_doc>Simple shortcuts for creating Future's synchronously</haxe_doc>
	</class>
	<class path="ufront.db.ManyToMany" params="A:B" file="C:\HaxeToolkit\haxe\lib/ufront-orm/1,0,0-rc,11/src/ufront/db/ManyToMany.hx">
		<managers line="101" static="1"><c path="haxe.ds.StringMap"><c path="sys.db.Manager"><c path="ufront.db.Relationship"/></c></c></managers>
		<getManager set="method" line="151" static="1">
			<f a="tableName">
				<c path="String"/>
				<c path="sys.db.Manager"><c path="ufront.db.Relationship"/></c>
			</f>
			<meta><m n=":access"><e>'???'</e></m></meta>
		</getManager>
		<isABeforeB set="method" line="170" static="1"><f a="a:b">
	<x path="Class"><d/></x>
	<x path="Class"><d/></x>
	<x path="Bool"/>
</f></isABeforeB>
		<generateTableName public="1" set="method" line="182" static="1">
			<f a="a:b">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Generate the table name used to join these two classes.</haxe_doc>
		</generateTableName>
		<createJoinTable public="1" set="method" line="199" static="1">
			<f a="aModel:bModel">
				<x path="Class"><c path="ufront.db.Object"/></x>
				<x path="Class"><c path="ufront.db.Object"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a join table for the two classes if it does not exist already.</haxe_doc>
		</createJoinTable>
		<relatedIDsforObjects public="1" set="method" line="214" static="1">
			<f a="aModel:bModel:?aObjectIDs" v="::null">
				<x path="Class"><c path="ufront.db.Object"/></x>
				<x path="Class"><c path="ufront.db.Object"/></x>
				<t path="Iterable"><t path="sys.db.SUId"/></t>
				<c path="haxe.ds.IntMap"><c path="List"><x path="Int"/></c></c>
			</f>
			<haxe_doc>A function to at once retrieve the related IDs of several objects.
			
			@param aModel The model for the object IDs you have
			@param bModel The model the the related object IDs you want to fetch
			@param aObjectIDs The specific models you want to get.  If not supplied, we'll get a map of ALL manyToMany relationships between these two models.
			@return An IntMap, where the key is aObjectID, and the value is a list of related bObjectIDs</haxe_doc>
		</relatedIDsforObjects>
		<a><x path="Class"><c path="ufront.db.ManyToMany.A"/></x></a>
		<b><x path="Class"><c path="ufront.db.ManyToMany.B"/></x></b>
		<aObject><c path="ufront.db.ManyToMany.A"/></aObject>
		<bList><c path="List"><c path="ufront.db.ManyToMany.B"/></c></bList>
		<bListIDs><c path="List"><x path="Int"/></c></bListIDs>
		<unsavedBObjects><t path="Null"><c path="List"><c path="ufront.db.ManyToMany.B"/></c></t></unsavedBObjects>
		<length public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The number of related objects.</haxe_doc>
		</length>
		<tableName><c path="String"/></tableName>
		<bManager><c path="sys.db.Manager"><c path="ufront.db.ManyToMany.B"/></c></bManager>
		<manager><c path="sys.db.Manager"><c path="ufront.db.Relationship"/></c></manager>
		<first public="1" get="inline" set="null" line="140"><f a=""><t path="Null"><c path="ufront.db.ManyToMany.B"/></t></f></first>
		<isEmpty public="1" get="inline" set="null" line="141"><f a=""><x path="Bool"/></f></isEmpty>
		<join public="1" get="inline" set="null" line="142"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<last public="1" get="inline" set="null" line="143"><f a=""><t path="Null"><c path="ufront.db.ManyToMany.B"/></t></f></last>
		<iterator public="1" get="inline" set="null" line="144"><f a=""><t path="Iterator"><c path="ufront.db.ManyToMany.B"/></t></f></iterator>
		<filter public="1" get="inline" set="null" line="145"><f a="predicate">
	<f a="">
		<c path="ufront.db.ManyToMany.B"/>
		<x path="Bool"/>
	</f>
	<c path="List"><c path="ufront.db.ManyToMany.B"/></c>
</f></filter>
		<map public="1" get="inline" set="null" line="146"><f a="fn">
	<f a="">
		<c path="ufront.db.ManyToMany.B"/>
		<unknown/>
	</f>
	<c path="List"><unknown/></c>
</f></map>
		<toString public="1" get="inline" set="null" line="147"><f a=""><c path="String"/></f></toString>
		<refreshList public="1" set="method" line="246">
			<f a=""><x path="Void"/></f>
			<meta><m n=":access"><e>'???'</e></m></meta>
			<haxe_doc>Fetch the related objects from the database.
			If `aObject` does not have an ID, then it will just have an empty list for now.
			Any outstanding operations (`add` or `remove` operations that have not yet been committed to the database) will be lost.</haxe_doc>
		</refreshList>
		<compileBList set="method" line="267">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This private function is used when a ManyToMany getter is accessed, and it has a null bList, but it has bListIDs and/or unsavedBObjects.
			This happens for instance if the object was serialized and unserialized (via remoting for example).
			This will perform a query to load the bList given the current IDs.</haxe_doc>
		</compileBList>
		<commitJoins public="1" set="method" line="287">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Resolves any differences between the joins represented here and the joins in the database.
			Most actions (`add`, `remove`, `setList` etc) apply to the database immediately if a) we're on the server and b) both objects have an ID.
			If one of the joint objects is unsaved, or if we're on the client, then we might have a situation where our list here is out of sync with our list on the server.
			Calling this will add or remove joins from the database to match our current state.
			Please note if some of your objects are *still* unsaved, they will still remain unsaved.</haxe_doc>
		</commitJoins>
		<add public="1" set="method" line="299">
			<f a="bObject">
				<c path="ufront.db.ManyToMany.B"/>
				<x path="Void"/>
			</f>
			<meta><m n=":access"><e>'???'</e></m></meta>
			<haxe_doc>Add a related object by creating a new Relationship on the appropriate join table.
		If either aObject or bObject have no ID, we will add them to our local list, and they will be updated when saving.
		If the object already has a relationship in the join table, it will be ignored.</haxe_doc>
		</add>
		<remove public="1" set="method" line="332">
			<f a="bObject">
				<c path="ufront.db.ManyToMany.B"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the relationship/join between our `aObject` and a particular `bObject`.
		
		If `bObject` is null this will have no effect.
		If `aObject` or `bObject` have no ID, then the `bObject` will be removed from the local list, but no database query will be executed.</haxe_doc>
		</remove>
		<clear public="1" set="method" line="353">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Remove all relationships between our `aObject` and any `bObjects`.
		If our `aObject` has no id, then no database call will be made.</haxe_doc>
		</clear>
		<setList public="1" set="method" line="374">
			<f a="newBList">
				<t path="Iterable"><c path="ufront.db.ManyToMany.B"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the list of related B objects.
		Any objects that were not previously related will have a relationship added with `this.add()`
		Any objects that were previously related and are in `newBList` will not be affected.
		Any objects that were previously related and are not in `newBList` will have `this.remove()` called so they are no longer related.</haxe_doc>
		</setList>
		<get_length get="inline" set="null" line="390"><f a=""><x path="Int"/></f></get_length>
		<new public="1" set="method" line="114">
			<f a="aObject:bClass:?initialise" v="::true">
				<c path="ufront.db.ManyToMany.A"/>
				<x path="Class"><c path="ufront.db.ManyToMany.B"/></x>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ManyToMany` object for managing related objects between `aObject` and `bClass`.

		@param aObject - The current object. If `aObject` is null an exception will be thrown.
		@param bClass - The model of related objects you are joining with.
		@param initialise - Whether to fetch the current list of related objects immediately (server only, default is true).</haxe_doc>
		</new>
		<haxe_doc><![CDATA[An object used to join two tables/models with a Many-to-Many relationship.

A ManyToMany relationship is one where two models are joined but there's no obvious `BelongsTo` relationship - each object can be related to many others on each side.

Examples include:

- Blog Posts and Tags (each blog post can have many tags, each tag can have many blog posts)
- Users and Groups (each user can have many groups, each group can have many users)
- Projects and Staff (each project can have many staff assigned to it, each staff member could be assigned to one or more projects)
- Students and Classes, etc.

The join table follows the `Relationship` schema, but uses a different name for each join type.
The naming convention for join tables is `_join_$firstClass_$secondClass` where the class names are sorted alphabetically.

A current limitation is that you can only have one ManyToMany join table between each combination of models.
For example, you cannot have two properties `teachers:ManyToMany<Teacher,Class>` and `assistantTeachers:ManyToMany<Teacher,Class>` - they will both use the same join table.

The `ManyToMany` class has some static helpers for:

- `ManyToMany.generateTableName` Generating a join table name from two classes
- `ManyToMany.createJoinTable` Creating the join table in the database, if it does not exist
- `ManyToMany.relatedIDsforObjects` Getting the related IDs for a particular set of object

The `ManyToMany` object is used to find the related IDs for a particular object:

```haxe
var joins = new ManyToMany( myUser, Group );
for ( group in joins ) {
	trace( group );
}
joins.add( someNewGroup );
```

If in your models you specify a `ManyToMany` property, the build macro will automatically take care of constructing the `ManyToMany` object for you:

```haxe
// Please note the ordering of the two type parameters: you always do the current model first, the related model second.
class User {
	var groups:ManyToMany<User,Group>;
}
class Group {
	var users:ManyToMany<Group,User>;
}

function () {
	for ( group in myUser.groups ) {
		trace( '$myUser is in the group $group' );
		trace( 'The other people in that group are: '+group.users.join(", ") );
	}
}
```

Please note that on the server, SQL queries are executed immediately - if you `this.add()` a related object, it will insert the join row immediately.
This means that all of your related objects must be saved and have a valid ID before you start creating joins.

When you first create a ManyToMany object, it will fetch the list of related objects if `initialise` is true.
If you're accessing the joins through a model's `ManyToMany` property, the first time you call the getter it will fetch the list.

On the client, none of the SQL queries are executed, but the ManyToMany object can be serialized and shared between client and server.
This means you can serialize an object on the server with it's joins, and unserialize it on the client with the relationships in tact.
Making changes to the ManyToMany object on the client, such as adding another related object, will have no effect on the database.]]></haxe_doc>
	</class>
	<typedef path="ufront.db.BelongsTo" params="T" file="C:\HaxeToolkit\haxe\lib/ufront-orm/1,0,0-rc,11/src/ufront/db/Object.hx" module="ufront.db.Object">
		<c path="ufront.db.BelongsTo.T"/>
		<haxe_doc><![CDATA[BelongsTo relationship.

Use this whenever the current object belongs to just one instance of another object.
For example a BlogPost might belong to an Author, and an Invoice might belong to a Customer.

The build macro will transform this into a property to fetch the related object from the database.
You use it directly.

```haxe
class BlogPost extends Object {
	public var author:BelongsTo<Author>;
}

function() {
	var blogPost = BlogPost.get(1);
	blogPost.author.name; // Will fetch the related "Author" object, cache it, and get the name.
	blogPost.author.email; // Will use the cached related "Author" object, and get the email.
}
```

T must be a type that extends ufront.db.Object.]]></haxe_doc>
	</typedef>
	<typedef path="ufront.db.HasMany" params="T" file="C:\HaxeToolkit\haxe\lib/ufront-orm/1,0,0-rc,11/src/ufront/db/Object.hx" module="ufront.db.Object">
		<c path="List"><c path="ufront.db.HasMany.T"/></c>
		<haxe_doc><![CDATA[HasMany relationship.

This type is transformed into an List that lets you iterate over related objects.
Related objects are determined by a corresponding "BelongsTo<T>" in the related class.

Please note that at this time setting or modifying the list has no effect on the database.
To update the relations in the database you must update the related `BelongsTo` property on each related object.

```haxe
class Author extends Object {
	public var posts:HasMany<BlogPost>;
}
function() {
	var author = Author.manager.get(1);
	author.posts.length; // Will fetch the `List` of related BlogPost objects, cache it, and get the length of the list.
	author.posts.first(); // Will use the cached `List` of related BlogPost objects, and fetch the first post.

	var newBlogPost = new BlogPost();
	newBlogPost.author = author;
	newBlogPost.save();
}
```

T must be a type that extends `ufront.db.Object`]]></haxe_doc>
	</typedef>
	<typedef path="ufront.db.HasOne" params="T" file="C:\HaxeToolkit\haxe\lib/ufront-orm/1,0,0-rc,11/src/ufront/db/Object.hx" module="ufront.db.Object">
		<t path="Null"><c path="ufront.db.HasOne.T"/></t>
		<haxe_doc>HasOne relationship.

This behaves the same as `HasMany`, but only fetches the first related object, not a list of all relationships.

Similar to `HasMany`, you must update relationships by changing the `BelongsTo` property on the related object.

T must be a type that extends `ufront.db.Object`</haxe_doc>
	</typedef>
	<class path="ufront.db.Relationship" params="" file="C:\HaxeToolkit\haxe\lib/ufront-orm/1,0,0-rc,11/src/ufront/db/Relationship.hx">
		<extends path="ufront.db.Object"/>
		<manager public="1" line="767" static="1"><c path="sys.db.Manager"><c path="ufront.db.Relationship"/></c></manager>
		<r1 public="1"><t path="sys.db.SUInt"/></r1>
		<r2 public="1"><t path="sys.db.SUInt"/></r2>
		<_validationsFromMacros set="method" line="779" override="1"><f a=""><x path="Void"/></f></_validationsFromMacros>
		<new public="1" set="method" line="12"><f a="r1:r2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n="rtti"><e>"oy4:namey12:Relationshipy7:indexesahy9:relationsahy7:hfieldsby2:idoR0R5y6:isNullfy1:tjy17:sys.db.RecordType:0:0gy8:modifiedoR0R9R6fR7jR8:11:0gy2:r2oR0R10R6fR7jR8:3:0gy7:createdoR0R11R6fR7r7gy2:r1oR0R12R6fR7r9ghy3:keyaR5hy6:fieldsar4r10r6r11r8hg"</e></m>
			<m n="ufRelationships"/>
			<m n="ufSerialize">
				<e>"r1"</e>
				<e>"r2"</e>
				<e>"id"</e>
				<e>"created"</e>
				<e>"modified"</e>
			</m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="noTable"/>
		</meta>
	</class>
	<abstract path="ufront.db.ValidationErrors" params="" file="C:\HaxeToolkit\haxe\lib/ufront-orm/1,0,0-rc,11/src/ufront/db/ValidationErrors.hx">
		<this><c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c></this>
		<to>
			<icast field="toMap"><x path="Map">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></icast>
			<icast field="toSimpleMap"><c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c></icast>
			<icast field="toArray"><c path="Array"><t path="tink.Pair">
	<c path="String"/>
	<c path="String"/>
</t></c></icast>
			<icast field="toSimpleArray"><c path="Array"><c path="String"/></c></icast>
			<icast field="toString"><c path="String"/></icast>
		</to>
		<impl><class path="ufront.db._ValidationErrors.ValidationErrors_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/ufront-orm/1,0,0-rc,11/src/ufront/db/ValidationErrors.hx" private="1" module="ufront.db.ValidationErrors">
	<_new public="1" set="method" line="8" static="1">
		<f a=""><c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c></f>
		<meta><m n=":impl"/></meta>
	</_new>
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<isValid public="1" get="accessor" set="null" static="1">
		<x path="Bool"/>
		<meta><m n=":impl"/></meta>
	</isValid>
	<isInvalid public="1" get="accessor" set="null" static="1">
		<x path="Bool"/>
		<meta><m n=":impl"/></meta>
	</isInvalid>
	<reset public="1" set="method" line="14" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</reset>
	<set public="1" set="method" line="21" static="1">
		<f a="this:field:error">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<c path="String"/>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Add an error to a particular field.  If the field already has an error, this will be added to it</haxe_doc>
	</set>
	<errorMessage public="1" set="method" line="28" static="1">
		<f a="this:field">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Get a list of errors for a particular field.  Null if there are no errors.  If multiple errors, they are joined together with '\n'</haxe_doc>
	</errorMessage>
	<errors public="1" set="method" line="34" static="1">
		<f a="this:field">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<c path="String"/>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Get a list of errors for a particular field as an array.  Array is empty if there are no errors.</haxe_doc>
	</errors>
	<isFieldValid public="1" set="method" line="40" static="1">
		<f a="this:field">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Check whether or not a field is has any validation errors.</haxe_doc>
	</isFieldValid>
	<areFieldsValid public="1" set="method" line="46" static="1">
		<f a="this:fields">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<c path="Array"><c path="String"/></c>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Get a list of errors for a particular field as an array.  Array is empty if there are no errors.</haxe_doc>
	</areFieldsValid>
	<toMap public="1" get="inline" set="null" line="54" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<x path="Map">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toMap>
	<toSimpleMap public="1" set="method" line="58" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toSimpleMap>
	<toArray public="1" set="method" line="66" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<c path="Array"><t path="tink.Pair">
	<c path="String"/>
	<c path="String"/>
</t></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<toSimpleArray public="1" set="method" line="70" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<c path="Array"><c path="String"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toSimpleArray>
	<toString public="1" set="method" line="74" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<c path="String"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toString>
	<iterator public="1" get="inline" set="null" line="78" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<t path="Iterator"><t path="tink.Pair">
	<c path="String"/>
	<c path="String"/>
</t></t>
		</f>
		<meta><m n=":impl"/></meta>
	</iterator>
	<get_length set="method" line="82" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<get_isValid get="inline" set="null" line="88" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_isValid>
	<get_isInvalid get="inline" set="null" line="89" static="1">
		<f a="this">
			<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_isInvalid>
</class></impl>
	</abstract>
	<class path="ufront.db._ValidationErrors.ValidationErrors_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/ufront-orm/1,0,0-rc,11/src/ufront/db/ValidationErrors.hx" private="1" module="ufront.db.ValidationErrors">
		<_new public="1" set="method" line="8" static="1">
			<f a=""><c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c></f>
			<meta><m n=":impl"/></meta>
		</_new>
		<length public="1" get="accessor" set="null" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<isValid public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":impl"/></meta>
		</isValid>
		<isInvalid public="1" get="accessor" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":impl"/></meta>
		</isInvalid>
		<reset public="1" set="method" line="14" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</reset>
		<set public="1" set="method" line="21" static="1">
			<f a="this:field:error">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Add an error to a particular field.  If the field already has an error, this will be added to it</haxe_doc>
		</set>
		<errorMessage public="1" set="method" line="28" static="1">
			<f a="this:field">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Get a list of errors for a particular field.  Null if there are no errors.  If multiple errors, they are joined together with '\n'</haxe_doc>
		</errorMessage>
		<errors public="1" set="method" line="34" static="1">
			<f a="this:field">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Get a list of errors for a particular field as an array.  Array is empty if there are no errors.</haxe_doc>
		</errors>
		<isFieldValid public="1" set="method" line="40" static="1">
			<f a="this:field">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Check whether or not a field is has any validation errors.</haxe_doc>
		</isFieldValid>
		<areFieldsValid public="1" set="method" line="46" static="1">
			<f a="this:fields">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<c path="Array"><c path="String"/></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Get a list of errors for a particular field as an array.  Array is empty if there are no errors.</haxe_doc>
		</areFieldsValid>
		<toMap public="1" get="inline" set="null" line="54" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<x path="Map">
					<c path="String"/>
					<c path="Array"><c path="String"/></c>
				</x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toMap>
		<toSimpleMap public="1" set="method" line="58" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toSimpleMap>
		<toArray public="1" set="method" line="66" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<c path="Array"><t path="tink.Pair">
	<c path="String"/>
	<c path="String"/>
</t></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<toSimpleArray public="1" set="method" line="70" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toSimpleArray>
		<toString public="1" set="method" line="74" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<c path="String"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toString>
		<iterator public="1" get="inline" set="null" line="78" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<t path="Iterator"><t path="tink.Pair">
	<c path="String"/>
	<c path="String"/>
</t></t>
			</f>
			<meta><m n=":impl"/></meta>
		</iterator>
		<get_length set="method" line="82" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<get_isValid get="inline" set="null" line="88" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_isValid>
		<get_isInvalid get="inline" set="null" line="89" static="1">
			<f a="this">
				<c path="haxe.ds.StringMap"><c path="Array"><c path="String"/></c></c>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_isInvalid>
	</class>
	<class path="ufront.db.joins.Join_Group_User" params="" file="C:\HaxeToolkit\haxe\lib/ufront-orm/1,0,0-rc,11/src/ufront/db/Object.hx">
		<extends path="ufront.db.Relationship"/>
		<manager public="1" line="66" static="1"><c path="sys.db.Manager"><c path="ufront.db.joins.Join_Group_User"/></c></manager>
		<_validationsFromMacros set="method" line="779" override="1"><f a=""><x path="Void"/></f></_validationsFromMacros>
		<new public="1" set="method" line="66"><f a="r1:r2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n="rtti"><e>"oy4:namey16:_join_Group_Usery7:indexesahy9:relationsahy7:hfieldsby2:idoR0R5y6:isNullfy1:tjy17:sys.db.RecordType:0:0gy8:modifiedoR0R9R6fR7jR8:11:0gy2:r2oR0R10R6fR7jR8:3:0gy7:createdoR0R11R6fR7r7gy2:r1oR0R12R6fR7r9ghy3:keyaR5hy6:fieldsar4r10r6r11r8hg"</e></m>
			<m n="ufRelationships"/>
			<m n="ufSerialize">
				<e>"r1"</e>
				<e>"r2"</e>
				<e>"id"</e>
				<e>"created"</e>
				<e>"modified"</e>
			</m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":table"><e>"_join_Group_User"</e></m>
		</meta>
	</class>
	<class path="ufront.handler.ErrorPageHandler" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/handler/ErrorPageHandler.hx">
		<implements path="ufront.app.UFErrorHandler"/>
		<errorStackItems public="1" set="method" line="158" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<meta><m n=":access"><e>'???'</e></m></meta>
			<haxe_doc><![CDATA[Turns an `Array<StackItem>` into an `Array<String>`, ready to print.]]></haxe_doc>
		</errorStackItems>
		<catchErrors public="1">
			<x path="Bool"/>
			<haxe_doc>A flag for catching and handling errors.

		The only reason you would disable this is for debugging or unit testing.

		`true` by default.</haxe_doc>
		</catchErrors>
		<handleError public="1" set="method" line="48">
			<f a="httpError:ctx">
				<t path="tink.core.Error"/>
				<c path="ufront.web.context.HttpContext"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<meta><m n=":access"><e>'???'</e></m></meta>
			<haxe_doc>Event handler for an error on HttpApplication.

		It will use a HttpError, or wrap a different kind of exception in an InternalServerError, and display an appropriate error message.

		Http Response Codes will be set as per the HttpError, and any existing output will be cleared.

		You can change the output by overriding the

		TODO: give more options for processing different kinds of errors
		TODO: figure out async support</haxe_doc>
		</handleError>
		<renderErrorContent public="1" set="dynamic" line="101">
			<f a="error:?showStack" v=":false">
				<t path="tink.core.Error"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<meta><m n=":access"><e>'???'</e></m></meta>
			<haxe_doc><![CDATA[Render the given error message into a String (usually HTML) to be used in `renderErrorPage()`.

		This method provides HTML for the error message content, to be inserted into your usual site layout.

		This function is dynamic, so you can override it if you wish to supply a different error template.

		It is recommended that this method have as few dependencies as possible, for example,
		avoid using templating engines as any errors in displaying the error template will not
		be displayed correctly.

		It is also expected that this method should be synchronous.  If you require loading
		something asynchronously it will be easiest to create a new ErrorHandler.

		The default template looks like:

		```
		<summary class="error-summary">
			<h1 class="error-message">${error.toString()}</h1>
		</summary>
		<details class="error-details">
			<p class="error-data">${error.data}</p>
			<p class="error-pos">${error.pos}</p>
			<p class="error-exception-stack">${exceptionStackFromError}</p>
			<p class="error-call-stack">${callStackFromError}</p>
		</details>
		```]]></haxe_doc>
		</renderErrorContent>
		<renderErrorPage public="1" set="dynamic" line="140">
			<f a="title:content">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Render the given error title and error content (from `renderErrorContent`) into a page to be sent to the browser.

		This method takes two arguments: a window title, and content representing the error page.
		It then renders a full HTML page with these variables inserted.

		This function is dynamic, so you can override it if you wish to supply a different template.

		It is recommended that this method have as few dependencies as possible, for example,
		avoid using templating engines as any errors in displaying the error template will not
		be displayed correctly.

		It is also expected that this method should be synchronous.  If you require loading
		something asynchronously it will be easiest to create a new ErrorHandler.

		The default template uses a CDN-hosted Bootstrap stylesheet, a "jumbotron" component and a giant sad-face.  It took 1000 designers 1000 days to craft this work of art.</haxe_doc>
		</renderErrorPage>
		<renderError public="1" set="method" line="149">
			<f a="error:?showStack" v=":null">
				<t path="tink.core.Error"/>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>Renders the error content and places it in the error page.

		To change the look of your error messages, edit either `renderErrorContent` or `renderErrorPage`.</haxe_doc>
		</renderError>
		<new public="1" set="method" line="33"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A module which adds an error handler to your application.

	If an error is of the type `tink.core.Error`, it will display the details of the given error.

	Otherwise, it will wrap the exception with `ufront.web.HttpError.internalServerError()`.

	It will display the error message in a simple template, and set the appropriate HTTP response code.</haxe_doc>
	</class>
	<class path="ufront.handler.MVCHandler" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/handler/MVCHandler.hx">
		<implements path="ufront.app.UFInitRequired"/>
		<implements path="ufront.app.UFRequestHandler"/>
		<indexController public="1">
			<x path="Class"><c path="ufront.web.Controller"/></x>
			<haxe_doc>The index controller which is used to match requests to controllers / actions.

		This controller may sub-dispatch to other controllers.

		The controller will be instantiated using the dependency injector for that request.

		If using `UfrontApplication`, then during `init` we will set `indexController` to `ufrontApp.configuration.indexController`.</haxe_doc>
		</indexController>
		<init public="1" set="method" line="41"><f a="application">
	<c path="ufront.app.HttpApplication"/>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></init>
		<dispose public="1" set="method" line="50">
			<f a="app">
				<c path="ufront.app.HttpApplication"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Disposes of the resources (other than memory) that are used by the module.</haxe_doc>
		</dispose>
		<handleRequest public="1" set="method" line="56">
			<f a="ctx">
				<c path="ufront.web.context.HttpContext"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Initializes a module and prepares it to handle requests.</haxe_doc>
		</handleRequest>
		<processRequest set="method" line="62"><f a="context">
	<c path="ufront.web.context.HttpContext"/>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></processRequest>
		<executeResult set="method" line="77"><f a="context">
	<c path="ufront.web.context.HttpContext"/>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></executeResult>
		<toString public="1" set="method" line="88"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="39"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Uses a `ufront.web.Controller` to execute a controller for the current request.

	@author Jason O'Neil</haxe_doc>
	</class>
	<class path="ufront.handler.RemotingHandler" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/handler/RemotingHandler.hx">
		<implements path="ufront.app.UFInitRequired"/>
		<implements path="ufront.app.UFRequestHandler"/>
		<apiContexts><c path="List"><x path="Class"><c path="ufront.api.UFApiContext"/></x></c></apiContexts>
		<apis><c path="List"><x path="Class"><c path="ufront.api.UFApi"/></x></c></apis>
		<context><c path="haxe.remoting.Context"/></context>
		<loadApi public="1" get="inline" set="null" line="45">
			<f a="api">
				<x path="Class"><c path="ufront.api.UFApi"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Expose a single UFApi to the request</haxe_doc>
		</loadApi>
		<loadApis public="1" get="inline" set="null" line="50">
			<f a="newAPIs">
				<t path="Iterable"><x path="Class"><c path="ufront.api.UFApi"/></x></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Expose a single UFApi to the request</haxe_doc>
		</loadApis>
		<loadApiContext public="1" get="inline" set="null" line="56">
			<f a="apiContext">
				<x path="Class"><c path="ufront.api.UFApiContext"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Expose a UFApiContext to the request</haxe_doc>
		</loadApiContext>
		<init public="1" set="method" line="61">
			<f a="app">
				<c path="ufront.app.HttpApplication"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Initializes a module and prepares it to handle remoting requests.</haxe_doc>
		</init>
		<dispose public="1" set="method" line="71">
			<f a="app">
				<c path="ufront.app.HttpApplication"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Disposes of the resources (other than memory) that are used by the module.</haxe_doc>
		</dispose>
		<handleRequest public="1" set="method" line="76"><f a="httpContext">
	<c path="ufront.web.context.HttpContext"/>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></handleRequest>
		<initializeContext public="1" set="method" line="128"><f a="injector">
	<c path="minject.Injector"/>
	<x path="Void"/>
</f></initializeContext>
		<executeApiCall public="1" set="method" line="146">
			<f a="path:args:remotingContext:actionContext">
				<c path="Array"><c path="String"/></c>
				<c path="Array"><d/></c>
				<c path="haxe.remoting.Context"/>
				<c path="ufront.web.context.ActionContext"/>
				<t path="tink.Future"><d/></t>
			</f>
			<meta><m n=":access"><e>'???'</e></m></meta>
		</executeApiCall>
		<remotingError set="method" line="180"><f a="e:httpContext">
	<d/>
	<c path="ufront.web.context.HttpContext"/>
	<c path="String"/>
</f></remotingError>
		<toString public="1" set="method" line="199"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="39">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Construct a new RemotingModule, optionally adding an API to the remoting Context.</haxe_doc>
		</new>
		<haxe_doc>Checks if a request is a remoting request and processes accordingly.

	It looks for the "X-Haxe-Remoting" remoting header to check if this is a remoting call - the path/URL used does not matter.
	If it is a remoting call, it will process it accordingly and return a remoting result (basically serialized Haxe values).
	Traces are also serialized and sent to the client.

	If used with a UfrontApplication, and the `UfrontConfiguration.remotingApi` option was set, that API will be loaded automatically.
	Further APIs can be loaded through `ufrontApp.remotingHandler.loadApiContext()`.

	@author Jason O'Neil</haxe_doc>
	</class>
	<class path="ufront.log.BrowserConsoleLogger" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/log/BrowserConsoleLogger.hx">
		<implements path="ufront.app.UFLogHandler"/>
		<formatMessage public="1" set="method" line="50" static="1"><f a="m">
	<t path="ufront.log.Message"/>
	<c path="String"/>
</f></formatMessage>
		<log public="1" set="method" line="26"><f a="ctx:appMessages">
	<c path="ufront.web.context.HttpContext"/>
	<c path="Array"><t path="ufront.log.Message"/></c>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></log>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Trace module that adds javascript snippet to output trace to Javascript console.

	This will flush the messages (traces, logs, warnings and errors) from the current context to the browser.

	If `-debug` is defined, any application level messages (not necessarily associated with this request, made using "trace()" rather than "ufTrace()") will also be sent to the browser.

	If the `HttpResponse` output type is not "text/html", the traces will not be displayed.

	The trace output will be added as an inline javascript snippet at the very end of the response, after the closing `</html>` tag.

	This module will respect the trace types specified in the `haxe.log.Message`, using `console.log`, `console.info`, `console.warn` and `console.error` as appropriate.]]></haxe_doc>
	</class>
	<class path="ufront.log.FileLogger" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/log/FileLogger.hx">
		<implements path="ufront.app.UFInitRequired"/>
		<implements path="ufront.app.UFLogHandler"/>
		<REMOVENL line="97" static="1"><c path="EReg"/></REMOVENL>
		<format public="1" set="method" line="98" static="1"><f a="msg">
	<t path="ufront.log.Message"/>
	<c path="String"/>
</f></format>
		<path>
			<c path="String"/>
			<haxe_doc>the relative path to the log file</haxe_doc>
		</path>
		<init public="1" set="method" line="59">
			<f a="app">
				<c path="ufront.app.HttpApplication"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Initialize the module</haxe_doc>
		</init>
		<dispose public="1" set="method" line="64">
			<f a="app">
				<c path="ufront.app.HttpApplication"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Close the log file, dispose of the module</haxe_doc>
		</dispose>
		<log public="1" set="method" line="70">
			<f a="context:appMessages">
				<c path="ufront.web.context.HttpContext"/>
				<c path="Array"><t path="ufront.log.Message"/></c>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Write any messages from the context or application.</haxe_doc>
		</log>
		<new public="1" set="method" line="54">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Initiate the new module.  Specify the path to the file that you will be logging to.</haxe_doc>
		</new>
		<haxe_doc>Trace module that logs traces to a file.

	During the `onLogRequest` event, this will open a file (relative to the `HttpContext.contentDirectory`) and append entries to the log.

	This will log traces, logs, warnings and errors from the current request.  	If the current application is a UfrontApplication, it will also log messages which are not associated with a particular request.

	Entries are as follows:

	- A general request log: `$datetime [$method] [$uri] from [$clientIP] with session [$sessionID], response: [$code $contentType]`
	- Any messages from the HttpContext, in the format `\t[$messageType] $className($line): "$message"` (note the leading tab)
	- Any messages from the HttpApplication, in the same format.

	New lines will be removed from the log, and added as a literal "\n".

	Example output:

	```
	2013-09-18 11:11:07 [GET] [/staff/view/1033/] from [10.1.1.36] with session [2AijlXS3PUbxnaoFYc1pVQwPtMzigWAPfYB2y6x2], response: [200 text/html]
	2013-09-18 11:11:07 [POST] [/remoting/] from [10.1.1.36] with session [null], response: [500 text/html]
		[Error] ufront.module.ErrorModule._onError(64): "Handling error: cgi.c(165) : Cannot set Return code : Headers already sent"
		[Trace] ufront.application.HttpApplication._conclude(263): "in _conclude()"
	2013-09-18 11:11:07 [POST] [/remoting/] from [10.1.1.36] with session [2AijlXS3PUbxnaoFYc1pVQwPtMzigWAPfYB2y6x2], response: [500 text/html]
	```

	The file will be flushed after the log is written, and closed when the module is disposed</haxe_doc>
	</class>
	<typedef path="ufront.log.Message" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/log/Message.hx"><a>
	<type><e path="ufront.log.MessageType"/></type>
	<pos><t path="haxe.PosInfos"/></pos>
	<msg><d/></msg>
</a></typedef>
	<enum path="ufront.log.MessageType" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/log/Message.hx" module="ufront.log.Message">
		<Trace/>
		<Log/>
		<Warning/>
		<Error/>
		<haxe_doc>A simple enum to differentiate what sort of message was being traced.</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="ufront.log.MessageList" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/log/MessageList.hx">
		<messages public="1" set="null">
			<t path="Null"><c path="Array"><t path="ufront.log.Message"/></c></t>
			<haxe_doc>The messages array to push each message to.  Set via the constructor.</haxe_doc>
		</messages>
		<onMessage public="1" set="null">
			<t path="Null"><f a="">
	<t path="ufront.log.Message"/>
	<x path="Void"/>
</f></t>
			<haxe_doc>The callback to process each message as it comes through.  Set via the constructor.</haxe_doc>
		</onMessage>
		<push public="1" set="method" line="32">
			<f a="m">
				<t path="ufront.log.Message"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Process a new message.</haxe_doc>
		</push>
		<new public="1" set="method" line="26">
			<f a="?messages:?onMessage" v="null:null">
				<c path="Array"><t path="ufront.log.Message"/></c>
				<f a="">
					<t path="ufront.log.Message"/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new MessageList, parsing in either an array or callback, or both.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A class that can be used to take messages, and either push them to an array, or process them immediately.

	In some contexts, for example, the remoting APIs, we are not sure if we want to:

	1. collect traces and process them all together at a later stage (eg in a Http Context, where we log to file or browser at the end of the request).
	2. display the traces immediately (eg in a UFTask context or in an interactive context).

	This class is a generic implementation that allows us to do either or both.

	This would be better written as an abstract or typedef wrapping `Message->Void`, but minject only allows injecting class instances at this time.

	See `ufront.api.UFApi.messages` for the main place this class is used.]]></haxe_doc>
	</class>
	<class path="ufront.log.RemotingLogger" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/log/RemotingLogger.hx">
		<implements path="ufront.app.UFLogHandler"/>
		<formatMessage public="1" set="method" line="44" static="1"><f a="m">
	<t path="ufront.log.Message"/>
	<c path="String"/>
</f></formatMessage>
		<log public="1" set="method" line="22"><f a="httpContext:appMessages">
	<c path="ufront.web.context.HttpContext"/>
	<c path="Array"><t path="ufront.log.Message"/></c>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></log>
		<new public="1" set="method" line="20"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Trace module that adds a "hxt" line to haxe remoting call, that can work with `ufront.api.HttpAsyncConnectionWithTraces`

	When `log` is fired, this will flush the messages (traces, logs, warnings and errors) from the current context to the remoting response.

	If `-debug` is defined, any application level messages (those from "trace" rather than "ufTrace", which may not necessarily be associated with this request) will also be sent to the remoting response.

	If the `HttpResponse` output type is not "application/x-haxe-remoting", the traces will not be displayed.</haxe_doc>
	</class>
	<class path="ufront.log.ServerConsoleLogger" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/log/ServerConsoleLogger.hx">
		<implements path="ufront.app.UFLogHandler"/>
		<logMessage public="1" set="method" line="36" static="1"><f a="m">
	<t path="ufront.log.Message"/>
	<x path="Void"/>
</f></logMessage>
		<log public="1" set="method" line="24"><f a="ctx:appMessages">
	<c path="ufront.web.context.HttpContext"/>
	<c path="Array"><t path="ufront.log.Message"/></c>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></log>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Trace module that prints to the server console where it makes sense to do so.

	This will use a different method on each platform where it makes sense:

	- `neko.Web.logMessage()` on Neko.
	- `error_log()` on PHP.
	- `console.log()`, `console.info()`, `console.warn()`, and `console.error()` on JS.

	This will flush the messages (traces, logs, warnings and errors) from the current context to the appropriate server log.</haxe_doc>
	</class>
	<class path="ufront.middleware.InlineSessionMiddleware" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/middleware/InlineSessionMiddleware.hx">
		<implements path="ufront.app.UFMiddleware"/>
		<alwaysStart public="1" line="24" static="1">
			<x path="Bool"/>
			<haxe_doc>Should we start a session for every request, or only if one already exists?
		If false, one will only be started if init() is called specifically on one request.
		(For example, when they log in).
		From there onwards it will initialize with each request.</haxe_doc>
		</alwaysStart>
		<requestIn public="1" set="method" line="31">
			<f a="ctx">
				<c path="ufront.web.context.HttpContext"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Start the session if a SessionID exists in the request, or if `alwaysStart` is true.</haxe_doc>
		</requestIn>
		<responseOut public="1" set="method" line="44">
			<f a="ctx">
				<c path="ufront.web.context.HttpContext"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>If the session is active, commit the session before finishing the request.</haxe_doc>
		</responseOut>
		<new public="1" set="method" line="26"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Make sure we `init()` sessions before the request starts, and `commit()` them before it ends

	@author Jason O'Neil</haxe_doc>
	</class>
	<class path="ufront.spadm.DBAdmin" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/ufront/spadm/DBAdmin.hx">
		<extends path="spadm.Admin"/>
		<handler public="1" set="method" line="96" static="1"><f a="?baseUrl" v="null">
	<c path="String"/>
	<x path="Void"/>
</f></handler>
		<manyToManyTableNames public="1"><c path="Array"><c path="String"/></c></manyToManyTableNames>
		<getTables set="method" line="32" override="1"><f a=""><c path="Array"><c path="spadm.TableInfos"/></c></f></getTables>
		<addTable set="method" line="47">
			<f a="tables:model">
				<c path="Array"><c path="spadm.TableInfos"/></c>
				<x path="Class"><d/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":access"><e>'???'</e></m></meta>
		</addTable>
		<new public="1" set="method" line="26"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* An extension of DBAdmin that co-operates better with ufront.db classes
	* 
	* Changes
	*  - Ignore classes with @noTable metadata
	*  - Find classes using CompileTime.getAllClasses() instead
	*  - Check relationships and add ManyToMany tables
	*
	* It has a handler() static method that is used in the exact same way as spadm.Admin.handler
	* for processing the actual requests.</haxe_doc>
	</class>
	<class path="ufront.sys.SysUtil" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/sys/SysUtil.hx">
		<mkdir public="1" set="method" line="19" static="1">
			<f a="dir">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a directory if it doesn't exist.

			This also creates any parent directories that are required, similar to the `mkdir -p` command.</haxe_doc>
		</mkdir>
		<recursiveCopy public="1" set="method" line="36" static="1">
			<f a="inFile:outFile">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Recursively copy a file or directory from one location to another.

			If `inFile` does not exist, it will throw an error.
			If the parent directory of `outFile` does not exist, it will create it.
			If `inFile` is a file, the contents will be copied to `outFile`.
			If `inFile` is a directory, a directory with the same name will be created at `outFile`, and all child files copied from the `inFile` to `outFile` recursively.</haxe_doc>
		</recursiveCopy>
		<getCommandOutput public="1" set="method" line="72" static="1">
			<f a="cmd:args">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Run a command and get the command output.

			If the command returns an exit code other than 0, it will throw the console output.</haxe_doc>
		</getCommandOutput>
		<areFilesDifferent public="1" set="method" line="92" static="1">
			<f a="file1:file2">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check if 2 files are different.

			Assumes both files exist.

			Will compare file sizes, and if they are identical, will compare the bytes of the files to see if they are different.</haxe_doc>
		</areFilesDifferent>
	</class>
	<class path="ufront.ufadmin.UFAdminModule" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/ufront/ufadmin/UFAdminModule.hx">
		<extends path="ufront.web.Controller"/>
		<wrapInLayout public="1" set="method" line="55" static="1">
			<f a="title:template:data">
				<c path="String"/>
				<c path="String"/>
				<x path="ufront.view.TemplateData"/>
				<c path="ufront.web.result.ViewResult"/>
			</f>
			<haxe_doc>A helper function for UFAdmin modules to wrap their content in a layout.
		The layout has a simple HTML structure, the bootstrap stylesheet, and a base HREF relative the `/ufadmin/` path.

		@param title The title of the current page.
		@param template The string of the template to use. We recommend including this using `CompileTime.readFile(view.html)` or similar to avoid runtime dependencies.
		@param data The `TemplateData` to use when rendering the template.
		@return ViewResult A ready to use ViewResult.</haxe_doc>
		</wrapInLayout>
		<slug public="1">
			<c path="String"/>
			<haxe_doc>The url slug for this controller.  Should be URL-friendly (a-zA-Z0-9_-)</haxe_doc>
		</slug>
		<title public="1">
			<c path="String"/>
			<haxe_doc>The title of this module, to show in side menus etc</haxe_doc>
		</title>
		<thisIsAWorkaround set="method" line="27">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n="wrapResult"><e>7</e></m>
				<m n=":route"><e>"this-is-a-workaround"</e></m>
			</meta>
		</thisIsAWorkaround>
		<checkPermissions public="1" set="method" line="42">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Check if the current auth session has permission to use this module.
		
		Use `context.auth.checkPermission()` etc to check.

		If this does not return true, the module will not be added to menu, and the user will not be able to access this module.

		By default this simply returns true.</haxe_doc>
		</checkPermissions>
		<execute public="1" set="method" line="419" override="1"><f a=""><t path="tink.Surprise">
	<c path="ufront.web.result.ActionResult"/>
	<t path="tink.core.Error"/>
</t></f></execute>
		<new set="method" line="20"><f a="slug:title">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A base-class used to define a controller that can be used in the UFAdmin control panel.

	It adds "slug", "title" and "checkPermissions" so that menus appropriate for the current user can be constructed.</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="ufront.ufadmin.modules.DBAdminModule" params="" file="C:\HaxeToolkit\haxe\lib/ufront-ufadmin/1,0,0-beta,11/src/ufront/ufadmin/modules/DBAdminModule.hx">
		<extends path="ufront.ufadmin.UFAdminModule"/>
		<checkPermissions public="1" set="method" line="12" override="1"><f a=""><x path="Bool"/></f></checkPermissions>
		<doDefault public="1" set="method" line="17">
			<f a=""><c path="String"/></f>
			<meta>
				<m n="wrapResult"><e>7</e></m>
				<m n=":route"><e>"/*"</e></m>
			</meta>
		</doDefault>
		<execute public="1" set="method" line="419" override="1"><f a=""><t path="tink.Surprise">
	<c path="ufront.web.result.ActionResult"/>
	<t path="tink.core.Error"/>
</t></f></execute>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="ufront.ufadmin.modules.EasyAuthAdminModule" params="" file="C:\HaxeToolkit\haxe\lib/ufront-easyauth/1,0,0-rc,9/src/ufront/ufadmin/modules/EasyAuthAdminModule.hx">
		<extends path="ufront.ufadmin.UFAdminModule"/>
		<easyAuth public="1">
			<c path="ufront.auth.EasyAuth"/>
			<meta>
				<m n="name"><e>"easyAuth"</e></m>
				<m n="type"><e>"ufront.auth.EasyAuth"</e></m>
				<m n="inject"/>
			</meta>
		</easyAuth>
		<api public="1">
			<c path="ufront.auth.api.EasyAuthApi"/>
			<meta>
				<m n="name"><e>"api"</e></m>
				<m n="type"><e>"ufront.auth.api.EasyAuthApi"</e></m>
				<m n="inject"/>
			</meta>
		</api>
		<index public="1" set="method" line="23">
			<f a=""><c path="ufront.web.result.ViewResult"/></f>
			<meta>
				<m n="wrapResult"><e>3</e></m>
				<m n=":route"><e>"/"</e></m>
			</meta>
		</index>
		<listAllUsers public="1" set="method" line="28">
			<f a=""><c path="ufront.web.result.ViewResult"/></f>
			<meta>
				<m n="wrapResult"><e>3</e></m>
				<m n=":route"><e>"/users/all/"</e></m>
			</meta>
		</listAllUsers>
		<displayUserList set="method" line="32"><f a="userList:title">
	<t path="Iterable"><c path="ufront.auth.model.User"/></t>
	<c path="String"/>
	<c path="ufront.web.result.ViewResult"/>
</f></displayUserList>
		<showUserProfile public="1" set="method" line="43">
			<f a="username">
				<c path="String"/>
				<c path="ufront.web.result.ViewResult"/>
			</f>
			<meta>
				<m n="wrapResult"><e>3</e></m>
				<m n=":route"><e>"/user/$username/"</e></m>
			</meta>
		</showUserProfile>
		<loginAs public="1" set="method" line="60">
			<f a="id">
				<x path="Int"/>
				<c path="ufront.web.result.RedirectResult"/>
			</f>
			<meta>
				<m n="wrapResult"><e>3</e></m>
				<m n=":route"><e>"/loginas/$id/"</e></m>
			</meta>
		</loginAs>
		<newUserForm public="1" set="method" line="70">
			<f a=""><c path="String"/></f>
			<meta>
				<m n="wrapResult"><e>7</e></m>
				<m n=":route">
					<e>GET</e>
					<e>"/users/new/"</e>
				</m>
			</meta>
		</newUserForm>
		<editUserForm public="1" set="method" line="75">
			<f a="username">
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n="wrapResult"><e>7</e></m>
				<m n=":route"><e>"/user/$username/edit/"</e></m>
			</meta>
		</editUserForm>
		<showUserForm set="method" line="79"><f a="?u" v="null">
	<c path="ufront.auth.model.User"/>
	<c path="ufront.web.result.ViewResult"/>
</f></showUserForm>
		<execute public="1" set="method" line="419" override="1"><f a=""><t path="tink.Surprise">
	<c path="ufront.web.result.ActionResult"/>
	<t path="tink.core.Error"/>
</t></f></execute>
		<new public="1" set="method" line="18"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="ufront.view.UFViewEngine" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/view/UFViewEngine.hx">
		<engines><c path="Array"><t path="ufront.view.TemplatingEngine"/></c></engines>
		<cache><x path="Map">
	<c path="String"/>
	<t path="tink.Pair">
		<c path="String"/>
		<x path="ufront.view.UFTemplate"/>
	</t>
</x></cache>
		<getTemplate public="1" set="method" line="85">
			<f a="path:?templatingEngine" v=":null">
				<c path="String"/>
				<t path="ufront.view.TemplatingEngine"/>
				<t path="tink.Surprise">
					<x path="ufront.view.UFTemplate"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Fetch a template for the given path.

		Behaviour:

		- **If caching is enabled, and a cache for this request exists, use it**

		- **If a templating engine is specified, and the path has an extension:**
		  The exact path will used, with the given templating engine, regardless of whether the extensions match or not.

		- **If a templating engine is specified, and the path does not have an extension:**
		  For each extension that this templating engine supports, look for an available template.
		  The first match will be used.

		- **If no templating engine is specified, and the path has an extension:**
		  Go through the available templating engines, in the order they were added.
		  If the engine supports our extension, check for a matching template.
		  The first match will be used.

		- **If no templating engine is specified, and the path does not have an extension:**
		  Go through the available templating engines, in the order they were added.
		  For each extension that the engine supports, check for a matching template.
		  The first match will be used.

		In each case, if no match is found, this will fail with the appropriate error.

		Once the template is found, the appropriate engine will be used to generate a UFTemplate (ready to execute) from that template.

		If there is an error parsing or initializing a template, this will return a failure.

		If a template was initialized successfully, it will be added to the cache.

		Please note, `ufront.view.UFViewEngine` is an abstract implementation that never checks for templates, it always fails.  Please use the appropriate implementation class if you want your templates to work.

		This operation is asynchronous (a `tink.core.Surprise`), and should return a Failure if the view is not found or could not be parsed.</haxe_doc>
		</getTemplate>
		<getTemplateString public="1" set="method" line="213">
			<f a="path">
				<c path="String"/>
				<t path="tink.Surprise">
					<e path="haxe.ds.Option"><c path="String"/></e>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Abstract method to fetch the template string for an exact path.

		This must be overridden by a subclass to be useful, in `UFViewEngine` it will always return a Failure.

		The return type is:

		```
		- A Future (so async platforms are supported)
		- An Outcome (success or failure)
			- Failure means an error occured while checking if the file exists, or while trying to read it.
			- Success returns an Option, letting you know:
				- Some - the template exists, and here are it's contents as a String, or
				- None - no file existed at that path..
		```</haxe_doc>
		</getTemplateString>
		<addTemplatingEngine public="1" get="inline" set="null" line="227">
			<f a="engine">
				<t path="ufront.view.TemplatingEngine"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add support for a templating engine.

		A supplied `ufront.view.TemplatingEngine` which given a template string, will prepare a ready-to-execute UFTemplate.
		See `ufront.view.TemplatingEngines` for a list of templating engines that are available and ready to use.

		If the engine specifies one or more file extensions, any views found with those extension will use this templating engine.
		If multiple templating engines use the same extension, the first templating engine added will be the used to process the template.
		If no extension is specified for this engine, then the engine will be used for any view regardless of the extension.</haxe_doc>
		</addTemplatingEngine>
		<new set="method" line="44">
			<f a="?cachingEnabled" v="true">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new view engine.

		@param cachingEnabled Should we cache templates in memory so they are ready to re-execute? Default=true.</haxe_doc>
		</new>
		<haxe_doc>The base class for view engines.

	Each view engine is responsible for getting access to the raw templates, and, using a pluggable system, preparing templates so they are ready to execute.

	In detail:

	- adding support for different templating engines.
	  The UFViewEngine never parses or executes the template, we leave this to the templating engine.
	  But we can plug different templating engines in with `addTemplatingEngine()`.

	- given a view path, finding the correct template, feeding it to the correct templating engine, and returning a ready to execute `ufront.view.UFTemplate`

	- any caching, such as keeping the templates loaded, parsed and ready to execute between multiple requests etc.

	The `UFViewEngine` base class does not provide the `getTemplateString()` implementation.
	Each View Engine implementation must provide this.
	Example implementations may be `ufront.view.FileViewEngine` (load from files on hard drive), "DatabaseViewEngine" (load templates from DB) or "MacroViewEngine" (import views at macro time so we have them ready to go in our code.
	This `UFViewEngine` base class does provide a `getTemplate()` which will wrap each implementations `getTemplateString()` method and provide appropriate searching, caching and instantiating of templates.
	See the documentation on the `getTemplate` method for more details.</haxe_doc>
	</class>
	<class path="ufront.view.FileViewEngine" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/view/FileViewEngine.hx">
		<extends path="ufront.view.UFViewEngine"/>
		<scriptDir public="1">
			<c path="String"/>
			<meta>
				<m n="name"><e>"scriptDir"</e></m>
				<m n="type"><e>"String"</e></m>
				<m n="inject"><e>"scriptDirectory"</e></m>
			</meta>
			<haxe_doc>The script directory for your app. This value should be injected.</haxe_doc>
		</scriptDir>
		<path public="1" set="null">
			<c path="String"/>
			<meta>
				<m n="name"><e>"path"</e></m>
				<m n="type"><e>"String"</e></m>
				<m n="inject"><e>"viewPath"</e></m>
			</meta>
			<haxe_doc>The path to your views (absolute, or relative to the script directory). This value should be injected.</haxe_doc>
		</path>
		<isPathAbsolute public="1" get="accessor" set="null">
			<x path="Bool"/>
			<haxe_doc>Is `path` absolute (true) or relative to `scriptDir` (false)? This value is set in the constructor.</haxe_doc>
		</isPathAbsolute>
		<viewDirectory public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The absolute path to your views.  Basically `$scriptDir$path/` (or `$path/` if path is absolute).</haxe_doc>
		</viewDirectory>
		<get_viewDirectory set="method" line="29"><f a=""><c path="String"/></f></get_viewDirectory>
		<getTemplateString public="1" set="method" line="39" override="1">
			<f a="viewRelativePath">
				<c path="String"/>
				<t path="tink.Surprise">
					<e path="haxe.ds.Option"><c path="String"/></e>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Check if a file exists, and read a file from the file system using the synchronous `sys.FileSystem` api from the standard library.

		A pull request for a NodeJS asynchronous implementation is invited.

		@param viewRelativePath The relative path to the view. Please note this path is not checked for "../" or similar path hacks, so be wary of using user inputted data here.
		@return A future (resolved synchronously) containing details on if the template existed at the given path or not, or a failure if there was an unexpected error.</haxe_doc>
		</getTemplateString>
		<get_isPathAbsolute set="method" line="52"><f a=""><x path="Bool"/></f></get_isPathAbsolute>
		<new set="method" line="16"><f a="?cachingEnabled">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A UFViewEngine that loads views from the filesystem on the web server.

	This currently only has a synchronous implementation on "sys" platforms.</haxe_doc>
	</class>
	<abstract path="ufront.view.TemplateData" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/view/TemplateData.hx">
		<from>
			<icast field="fromMap"><x path="Map">
	<c path="String"/>
	<c path="fromMap.T"/>
</x></icast>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.T"/></c></icast>
			<icast field="fromMany"><t path="Iterable"><x path="ufront.view.TemplateData"/></t></icast>
			<icast field="fromObject"><a/></icast>
		</from>
		<this><a/></this>
		<to>
			<icast><a/></icast>
			<icast field="toMap"><x path="Map">
	<c path="String"/>
	<d/>
</x></icast>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><d/></c></icast>
		</to>
		<haxe_doc><![CDATA[A trampoline type for TemplateData, accepting, in order:

	- {}
	- Map<String,Dynamic>
	- Iterable<TemplateData>

	These methods are provided to access or modify the contents of the template data:

	- `get()`
	- `set()`
	- `setObject()`
	- `setMap()`

	Array access is also provided for getting / setting data.

	No string conversion or escaping happens at this level, that is up to the templating engine.]]></haxe_doc>
		<impl><class path="ufront.view._TemplateData.TemplateData_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/view/TemplateData.hx" private="1" module="ufront.view.TemplateData">
	<_new public="1" get="inline" set="null" line="32" static="1">
		<f a="?obj" v="null">
			<a/>
			<a/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Create a template data object.

		@param obj The object to use.  If null a new TemplateData object with no values will be used.</haxe_doc>
	</_new>
	<toObject public="1" get="inline" set="null" line="40" static="1">
		<f a="this">
			<a/>
			<d><d/></d>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Convert into a `Dynamic<Dynamic>` anonymous object.
		Please note this is not an implicit `@:to` cast, because the resulting type would match too many false positives.
		To use this cast call `templateData.toObject()` explicitly.]]></haxe_doc>
	</toObject>
	<toMap public="1" set="method" line="47" static="1">
		<f a="this">
			<a/>
			<x path="Map">
				<c path="String"/>
				<d/>
			</x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[Convert into a `Map<String,Dynamic>`.
		This is also available as an implicit `@:to` cast.]]></haxe_doc>
	</toMap>
	<toStringMap public="1" get="inline" set="null" line="57" static="1">
		<f a="this">
			<a/>
			<c path="haxe.ds.StringMap"><d/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[Convert into a `StringMap<Dynamic>`.
		This is also available as an implicit `@:to` cast.]]></haxe_doc>
	</toStringMap>
	<get public="1" get="inline" set="null" line="68" static="1">
		<f a="this:key">
			<a/>
			<c path="String"/>
			<t path="Null"><d/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Get a value from the template data.
		This is also used for array access: `templateData['name']` is the same as `templateData.get('name')`.

		@param key The name of the value to retrieve.
		@return The value, or null if it was not available.</haxe_doc>
	</get>
	<exists public="1" set="method" line="73" static="1">
		<f a="this:key">
			<a/>
			<c path="String"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>See if a specific field exists in the template data.</haxe_doc>
	</exists>
	<set public="1" set="method" line="86" static="1">
		<f a="this:key:val">
			<a/>
			<c path="String"/>
			<d/>
			<x path="ufront.view.TemplateData"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Set a value on the template data.

		Please note array setters are also available, but they use the private `array_set` method which returns the value, rather than the TemplateData object.

		@param key The name of the key to set.
		@param val The value to set.
		@return The same TemplateData so that method chaining is enabled.</haxe_doc>
	</set>
	<array_set params="T" set="method" line="92" static="1">
		<f a="this:key:val">
			<a/>
			<c path="String"/>
			<c path="array_set.T"/>
			<c path="array_set.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
		<haxe_doc>Array access setter.</haxe_doc>
	</array_set>
	<setMap public="1" params="T" set="method" line="105" static="1">
		<f a="this:map">
			<a/>
			<x path="Map">
				<c path="String"/>
				<c path="setMap.T"/>
			</x>
			<x path="ufront.view.TemplateData"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Set many values from a `Map<String,Dynamic>`

		`templateData.set(key,map[key])` will be called for each pair in the map.

		@param map The map data to set.
		@return The same TemplateData so that method chaining is enabled.]]></haxe_doc>
	</setMap>
	<setObject public="1" set="method" line="122" static="1">
		<f a="this:d">
			<a/>
			<a/>
			<x path="ufront.view.TemplateData"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[Set many values from a `Map<String,Dynamic>`

		`templateData.set(fieldName,fieldValue)` will be called for each field on the object.

		Reflect is used with `fields` and `field` to read the value of every field.

		@param map The data object to set.
		@return The same TemplateData so that method chaining is enabled.]]></haxe_doc>
	</setObject>
	<fromMap public="1" params="T" set="method" line="132" static="1">
		<f a="d">
			<x path="Map">
				<c path="String"/>
				<c path="fromMap.T"/>
			</x>
			<x path="ufront.view.TemplateData"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>from casts</haxe_doc>
	</fromMap>
	<fromStringMap public="1" params="T" get="inline" set="null" line="141" static="1">
		<f a="d">
			<c path="haxe.ds.StringMap"><c path="fromStringMap.T"/></c>
			<x path="ufront.view.TemplateData"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[Automatically cast from a `StringMap<Dynamic>` into a TemplateData.]]></haxe_doc>
	</fromStringMap>
	<fromMany public="1" set="method" line="154" static="1">
		<f a="dataSets">
			<t path="Iterable"><x path="ufront.view.TemplateData"/></t>
			<x path="ufront.view.TemplateData"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[Automatically cast from a `Iterable<TemplateData>` into a combined `TemplateData.
		Values will be added in order, and later values with the same name as an earlier value will override the earlier value.
		If the iterable is empty, the resulting TemplateData will contain no properties.
		If an individual item is a StringMap, it will be added with `setMap`, otherwise it will be added with `setObject`.

		@param dataSets The collection of TemplateData objects to iterate over.
		@return The same TemplateData so that method chaining is enabled.]]></haxe_doc>
	</fromMany>
	<fromObject public="1" get="inline" set="null" line="174" static="1">
		<f a="d">
			<a/>
			<x path="ufront.view.TemplateData"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc>Automatically cast from an object to a TemplateData.
		This is a no-op - the object will be used as is.
		This cast comes last in the code so it should be used only if none of the other casts were utilised.</haxe_doc>
	</fromObject>
</class></impl>
	</abstract>
	<class path="ufront.view._TemplateData.TemplateData_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/view/TemplateData.hx" private="1" module="ufront.view.TemplateData">
		<_new public="1" get="inline" set="null" line="32" static="1">
			<f a="?obj" v="null">
				<a/>
				<a/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Create a template data object.

		@param obj The object to use.  If null a new TemplateData object with no values will be used.</haxe_doc>
		</_new>
		<toObject public="1" get="inline" set="null" line="40" static="1">
			<f a="this">
				<a/>
				<d><d/></d>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Convert into a `Dynamic<Dynamic>` anonymous object.
		Please note this is not an implicit `@:to` cast, because the resulting type would match too many false positives.
		To use this cast call `templateData.toObject()` explicitly.]]></haxe_doc>
		</toObject>
		<toMap public="1" set="method" line="47" static="1">
			<f a="this">
				<a/>
				<x path="Map">
					<c path="String"/>
					<d/>
				</x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[Convert into a `Map<String,Dynamic>`.
		This is also available as an implicit `@:to` cast.]]></haxe_doc>
		</toMap>
		<toStringMap public="1" get="inline" set="null" line="57" static="1">
			<f a="this">
				<a/>
				<c path="haxe.ds.StringMap"><d/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[Convert into a `StringMap<Dynamic>`.
		This is also available as an implicit `@:to` cast.]]></haxe_doc>
		</toStringMap>
		<get public="1" get="inline" set="null" line="68" static="1">
			<f a="this:key">
				<a/>
				<c path="String"/>
				<t path="Null"><d/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Get a value from the template data.
		This is also used for array access: `templateData['name']` is the same as `templateData.get('name')`.

		@param key The name of the value to retrieve.
		@return The value, or null if it was not available.</haxe_doc>
		</get>
		<exists public="1" set="method" line="73" static="1">
			<f a="this:key">
				<a/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>See if a specific field exists in the template data.</haxe_doc>
		</exists>
		<set public="1" set="method" line="86" static="1">
			<f a="this:key:val">
				<a/>
				<c path="String"/>
				<d/>
				<x path="ufront.view.TemplateData"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Set a value on the template data.

		Please note array setters are also available, but they use the private `array_set` method which returns the value, rather than the TemplateData object.

		@param key The name of the key to set.
		@param val The value to set.
		@return The same TemplateData so that method chaining is enabled.</haxe_doc>
		</set>
		<array_set params="T" set="method" line="92" static="1">
			<f a="this:key:val">
				<a/>
				<c path="String"/>
				<c path="array_set.T"/>
				<c path="array_set.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
			<haxe_doc>Array access setter.</haxe_doc>
		</array_set>
		<setMap public="1" params="T" set="method" line="105" static="1">
			<f a="this:map">
				<a/>
				<x path="Map">
					<c path="String"/>
					<c path="setMap.T"/>
				</x>
				<x path="ufront.view.TemplateData"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Set many values from a `Map<String,Dynamic>`

		`templateData.set(key,map[key])` will be called for each pair in the map.

		@param map The map data to set.
		@return The same TemplateData so that method chaining is enabled.]]></haxe_doc>
		</setMap>
		<setObject public="1" set="method" line="122" static="1">
			<f a="this:d">
				<a/>
				<a/>
				<x path="ufront.view.TemplateData"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[Set many values from a `Map<String,Dynamic>`

		`templateData.set(fieldName,fieldValue)` will be called for each field on the object.

		Reflect is used with `fields` and `field` to read the value of every field.

		@param map The data object to set.
		@return The same TemplateData so that method chaining is enabled.]]></haxe_doc>
		</setObject>
		<fromMap public="1" params="T" set="method" line="132" static="1">
			<f a="d">
				<x path="Map">
					<c path="String"/>
					<c path="fromMap.T"/>
				</x>
				<x path="ufront.view.TemplateData"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>from casts</haxe_doc>
		</fromMap>
		<fromStringMap public="1" params="T" get="inline" set="null" line="141" static="1">
			<f a="d">
				<c path="haxe.ds.StringMap"><c path="fromStringMap.T"/></c>
				<x path="ufront.view.TemplateData"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[Automatically cast from a `StringMap<Dynamic>` into a TemplateData.]]></haxe_doc>
		</fromStringMap>
		<fromMany public="1" set="method" line="154" static="1">
			<f a="dataSets">
				<t path="Iterable"><x path="ufront.view.TemplateData"/></t>
				<x path="ufront.view.TemplateData"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[Automatically cast from a `Iterable<TemplateData>` into a combined `TemplateData.
		Values will be added in order, and later values with the same name as an earlier value will override the earlier value.
		If the iterable is empty, the resulting TemplateData will contain no properties.
		If an individual item is a StringMap, it will be added with `setMap`, otherwise it will be added with `setObject`.

		@param dataSets The collection of TemplateData objects to iterate over.
		@return The same TemplateData so that method chaining is enabled.]]></haxe_doc>
		</fromMany>
		<fromObject public="1" get="inline" set="null" line="174" static="1">
			<f a="d">
				<a/>
				<x path="ufront.view.TemplateData"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc>Automatically cast from an object to a TemplateData.
		This is a no-op - the object will be used as is.
		This cast comes last in the code so it should be used only if none of the other casts were utilised.</haxe_doc>
		</fromObject>
	</class>
	<class path="ufront.view.TemplatingEngines" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/view/TemplatingEngines.hx">
		<haxe public="1" get="accessor" set="null" static="1">
			<t path="ufront.view.TemplatingEngine"/>
			<haxe_doc>A templating engine for `haxe.Template` templates, using "html" and "tpl" extensions.

		This is available through the standard library.</haxe_doc>
		</haxe>
		<get_haxe set="method" line="32" static="1"><f a=""><a>
	<type><c path="String"/></type>
	<factory><f a="tplString">
	<c path="String"/>
	<x path="ufront.view.UFTemplate"/>
</f></factory>
	<extensions><c path="Array"><c path="String"/></c></extensions>
</a></f></get_haxe>
		<haxe_doc>This class provides some shortcut definitions to TemplatingEngines.

	These shortcuts are added for your convenience.
	They don't include the actual template libraries, rather, they return a typedef that let's our UFViewEngine know how to use the templating library so you can add it easily.

	The static variables for each library are surrounded in conditionals, so they will only be included if you have that library included in your current build.

	Templating engines currently provided:

	- `haxe` - provided in the Standard Library, no extra haxelibs needed.
	- `hxdtl` - Django Templating Library for Haxe.  Available if `hxdtl` haxelib is included.
	- `hxtemplo` - Simn's port of the `templo` templating language.  Available if `hxtemplo` haxelib is included.
	- `mustache` - Mustache "Logic-less" templates.  Available if `mustache` haxelib is included.
	- `erazor` - A powerful templating language that lets you switch between templates and haxe-code effortlessly.  Based on `mvc-razor`.  Available if `erazor` haxelib is included.

	If you would like to add support for another library, please send a pull request!</haxe_doc>
	</class>
	<typedef path="ufront.view.TemplatingEngine" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/view/TemplatingEngines.hx" module="ufront.view.TemplatingEngines">
		<a>
			<type><c path="String"/></type>
			<factory><f a="">
	<c path="String"/>
	<x path="ufront.view.UFTemplate"/>
</f></factory>
			<extensions><c path="Array"><c path="String"/></c></extensions>
		</a>
		<haxe_doc>A summary of the information required for adding a templating engine to `ufront.view.UFViewEngine`</haxe_doc>
	</typedef>
	<abstract path="ufront.view.UFTemplate" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/view/UFTemplate.hx">
		<from><icast><f a="">
	<x path="ufront.view.TemplateData"/>
	<c path="String"/>
</f></icast></from>
		<this><f a="">
	<x path="ufront.view.TemplateData"/>
	<c path="String"/>
</f></this>
		<to><icast><f a="">
	<x path="ufront.view.TemplateData"/>
	<c path="String"/>
</f></icast></to>
		<haxe_doc><![CDATA[A type representing a template that is ready to render a template with the given TemplateData.

	This is an abstract, and at runtime it will simply use the callback directly.

	It was designed this way to be flexible and integrate easily with existing templating systems.

	For example, to use haxe's templating engine:

	```
	var tpl:UFTemplate = function (data) new haxe.Template( myTemplate ).execute( data.toObject() );
	tpl.execute([ 'name'=>'Jason', 'age'=>26, helper=>someHelper ]);
	```]]></haxe_doc>
		<impl><class path="ufront.view._UFTemplate.UFTemplate_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/view/UFTemplate.hx" private="1" module="ufront.view.UFTemplate">
	<_new public="1" set="method" line="21" static="1">
		<f a="cb">
			<f a="">
				<x path="ufront.view.TemplateData"/>
				<c path="String"/>
			</f>
			<f a="">
				<x path="ufront.view.TemplateData"/>
				<c path="String"/>
			</f>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<execute public="1" get="inline" set="null" line="28" static="1">
		<f a="this:data">
			<f a="">
				<x path="ufront.view.TemplateData"/>
				<c path="String"/>
			</f>
			<x path="ufront.view.TemplateData"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Execute the template with the given data.

		Notice that `data:TemplateData` is a trampoline type and can accept `haxe.ds.StringMap`, a `Dynamic` Object, or an `Iterable` combination of these.</haxe_doc>
	</execute>
</class></impl>
	</abstract>
	<class path="ufront.view._UFTemplate.UFTemplate_Impl_" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/view/UFTemplate.hx" private="1" module="ufront.view.UFTemplate">
		<_new public="1" set="method" line="21" static="1">
			<f a="cb">
				<f a="">
					<x path="ufront.view.TemplateData"/>
					<c path="String"/>
				</f>
				<f a="">
					<x path="ufront.view.TemplateData"/>
					<c path="String"/>
				</f>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<execute public="1" get="inline" set="null" line="28" static="1">
			<f a="this:data">
				<f a="">
					<x path="ufront.view.TemplateData"/>
					<c path="String"/>
				</f>
				<x path="ufront.view.TemplateData"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc>Execute the template with the given data.

		Notice that `data:TemplateData` is a trampoline type and can accept `haxe.ds.StringMap`, a `Dynamic` Object, or an `Iterable` combination of these.</haxe_doc>
		</execute>
	</class>
	<enum path="ufront.web.WrapRequired" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/Controller.hx" module="ufront.web.Controller">
		<WRFuture/>
		<WROutcome/>
		<WRResultOrError/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="ufront.web.Dispatch" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/Dispatch.hx">
		<extends path="haxe.web.Dispatch"/>
		<method public="1" set="null">
			<c path="String"/>
			<haxe_doc>The method used in the request.

		Is set via the constructor.  Whatever value this is set to will be transformed to lowercase.</haxe_doc>
		</method>
		<controller public="1">
			<t path="Null"><a/></t>
			<haxe_doc>The controller / API object that was used.

		After a successful `processDispatchRequest`, it will contain the object (controller) to be used
		for dispatching.  This may be the object passed to Dispatch, or it may be another object, that
		was used as a sub-dispatch.

		This can be useful to get Controller Information while processing an ActionResult, for example,
		while trying to find the appropriate View to use for a controller.

		Before a successful `processDispatchRequest`, it will be null.

		This value can be changed, and will affect `executeDispatchRequest()`, do so at your peril.</haxe_doc>
		</controller>
		<action public="1">
			<t path="Null"><c path="String"/></t>
			<haxe_doc>The name of the selected action to be used in the dispatch.

		After a successful `processDispatchRequest`, it will contain the name of the action that
		dispatch has chosen to execute.  eg. `doSomething` if `doSomething()` is to be called.

		This can be useful to get Action Information while processing an ActionResult, for example,
		while trying to find the appropriate View to use for an action.

		Before a successful `processDispatchRequest`, it will be null.

		This value can be changed, and will affect `executeDispatchRequest()`, do so at your peril.</haxe_doc>
		</action>
		<arguments public="1">
			<t path="Null"><c path="Array"><d/></c></t>
			<haxe_doc>The arguments created based on the request.

		After a successful `processDispatchRequest`, it will contain an array of the arguments sent to
		the given action.

		Before a successful `processDispatchRequest`, it will be null.

		This value can be changed, and will affect `executeDispatchRequest()`, do so at your peril.</haxe_doc>
		</arguments>
		<onProcessDispatchRequest public="1">
			<x path="tink.core.Signal"><e path="tink.core.Noise"/></x>
			<haxe_doc>Fires whenever `processDispatchRequest` is called.

		This allows you to listen to changes to the controller, action and arguments and process them accordingly.</haxe_doc>
		</onProcessDispatchRequest>
		<onProcessDispatchRequestTrigger public="1"><x path="tink.core.SignalTrigger"><e path="tink.core.Noise"/></x></onProcessDispatchRequestTrigger>
		<resolveNames set="method" line="143">
			<f a="name">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Will return an array of possible names.

		If method is not null, it will match '$method_$name'.

		For example:

		'someAction' with no method will produce ['doSomeAction']
		'someAction' with 'post' method will produce ['post_doSomeAction', 'doSomeAction']</haxe_doc>
		</resolveNames>
		<processDispatchRequest public="1" set="method" line="166">
			<f a="cfg">
				<t path="haxe.web.DispatchConfig"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Process the request and find the controller, action and arguments to be used.

		The logic in processing the request is slightly different to `haxe.web.Dispatch`

		Full list of differences:

		* We call resolveNames(), and match against multiple names, so that we can find
		  `post_doSubmit()` etc
		* We also make the method name lower-case, making Dispatch case insensitive.
		* When a successful match is found, we populate the "controller" and "action" and
		  "argument" properties of the Dispatch object.

		This function does not execute the result, it merely populates `controller`, `action`
		and `argument` properties.  Use `executeDispatchRequest` to then execute this request.</haxe_doc>
		</processDispatchRequest>
		<executeDispatchRequest public="1" set="method" line="216">
			<f a=""><d/></f>
			<haxe_doc>Will execute the action, controller and arguments specified by `processDispatchRequest`

		The result of the action will be returned.

		If `processDispatchRequest`has not been run, `DispatchError.DEMissing` will be thrown.

		This method will not catch or handle `Redirect` exceptions in the same way as `runtimeReturnDispatch`.  If you are calling this method manually you should account for this.</haxe_doc>
		</executeDispatchRequest>
		<runtimeDispatch public="1" set="method" line="227">
			<f a="cfg">
				<t path="haxe.web.DispatchConfig"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The same as `runtimeReturnDispatch`, except it does not return a result, so it is consistent with the super class.</haxe_doc>
		</runtimeDispatch>
		<runtimeReturnDispatch public="1" set="method" line="238">
			<f a="cfg">
				<t path="haxe.web.DispatchConfig"/>
				<unknown/>
			</f>
			<haxe_doc>This simple calls `processDispatchRequest`,followed by `executeDispatchRequest`

		If a `Redirect` is thrown, it will rerun the two method recursively until a result is reached or an error thrown.

		So the functionality is similar to the `runtimeDispatch` in `haxe.web.Dispatch`, except ufront's processing rules are used, and a result is returned.</haxe_doc>
		</runtimeReturnDispatch>
		<toString public="1" set="method" line="249">
			<f a=""><c path="String"/></f>
			<haxe_doc>When tracing arguments, a Dispatch argument can cause recursive errors.  Better to just have this return a String</haxe_doc>
		</toString>
		<new public="1" set="method" line="111">
			<f a="url:params:?method" v="::null">
				<c path="String"/>
				<x path="Map">
					<c path="String"/>
					<c path="String"/>
				</x>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a new Dispatch object, for the given URL, parameters and HTTP method</haxe_doc>
		</new>
		<haxe_doc>An extension of `haxe.web.Dispatch` modified for use in the ufront framework.

	Key differences:

	- It can check for HTTP methods (get/post) etc and specialised actions for those.
	- Dispatching returns the result of the called action
	- Processing the dispatch and executing the action are separated, so code (for example, ufront's DispatchModule) can intercept execution inbetween stages.
	- The controller, action and arguments that are used are recorded, to assist with unit testing.
	- It is case insensitive.  So "doSomethingLong" will resolve to "/somethinglong/" or "/SomethingLONG/" etc

	The important static macros and methods are still available here and function similarly to those in `haxe.web.Dispatch`, except for the changes described above.</haxe_doc>
	</class>
	<class path="ufront.web.HttpCookie" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/HttpCookie.hx">
		<dayNames line="68" static="1"><c path="Array"><c path="String"/></c></dayNames>
		<monthNames line="69" static="1"><c path="Array"><c path="String"/></c></monthNames>
		<tzOffset static="1"><t path="Null"><x path="Float"/></t></tzOffset>
		<addPair set="method" line="112" static="1"><f a="buf:name:?value:?allowNullValue" v="::null:false">
	<c path="StringBuf"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addPair>
		<domain public="1">
			<c path="String"/>
			<haxe_doc>The domain this cookie applies to.</haxe_doc>
		</domain>
		<expires public="1">
			<t path="Null"><c path="Date"/></t>
			<haxe_doc>The date this cookie will expire. If `null`, then the cookie will not include an expiry date.</haxe_doc>
		</expires>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the cookie, used to access it in future requests: `request.cookies[name]`.</haxe_doc>
		</name>
		<path public="1">
			<c path="String"/>
			<haxe_doc>The path on the server this cookie applies to.</haxe_doc>
		</path>
		<secure public="1">
			<x path="Bool"/>
			<haxe_doc>Whether or not this cookie is marked as `secure`. Default is false.</haxe_doc>
		</secure>
		<httpOnly public="1">
			<x path="Bool"/>
			<haxe_doc>Whether or not this cookie is for http only (not available on client JS etc). Default is false.</haxe_doc>
		</httpOnly>
		<value public="1" set="accessor">
			<c path="String"/>
			<haxe_doc>The value to store in the cookie.</haxe_doc>
		</value>
		<description public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>The cookie string used to send to the client.</haxe_doc>
		</description>
		<expireNow public="1" set="method" line="50">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Cause the cookie to expire with this request, by setting the date to a time in the past.</haxe_doc>
		</expireNow>
		<toString public="1" set="method" line="54"><f a=""><c path="String"/></f></toString>
		<setName set="method" line="58"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></setName>
		<set_value set="method" line="63"><f a="v">
	<c path="String"/>
	<c path="String"/>
</f></set_value>
		<get_description set="method" line="72"><f a=""><c path="String"/></f></get_description>
		<new public="1" set="method" line="39"><f a="name:value:?expires:?domain:?path:?secure:?httpOnly" v="::null:null:null:false:false">
	<c path="String"/>
	<c path="String"/>
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>A class describing a Http Cookie.

	This does not actually set a cookie.  Use `setCookie()` on a `HttpResponse` object to set the cookie.

	TODO: document further.

	@author Franco Ponticelli</haxe_doc>
	</class>
	<class path="ufront.web.HttpError" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/HttpError.hx">
		<wrap public="1" set="method" line="18" static="1">
			<f a="e:?msg:?pos" v=":'Internal Server Error':null">
				<d/>
				<c path="String"/>
				<t path="tink.core.Pos"/>
				<t path="tink.Error"/>
			</f>
			<haxe_doc>Wrap an existing error into a Error

		- If it was an Error already, return it as is
		- If it was a normal exception, use code 500, with "Internal Server Error" as the message, the exception as the data, and the pos that call site for `wrap()` as the pos.</haxe_doc>
		</wrap>
		<badRequest public="1" get="inline" set="null" line="26" static="1">
			<f a="?reason:?pos" v="null:null">
				<c path="String"/>
				<t path="tink.core.Pos"/>
				<t path="tink.Error"/>
			</f>
			<haxe_doc>A Http 400 "Bad Request" error</haxe_doc>
		</badRequest>
		<internalServerError public="1" set="method" line="36" static="1">
			<f a="?msg:?inner:?pos" v="'Internal Server Error':null:null">
				<c path="String"/>
				<d/>
				<t path="tink.core.Pos"/>
				<t path="tink.Error"/>
			</f>
			<haxe_doc>A Http 500 "Internal Server Error", optionally containing the inner error</haxe_doc>
		</internalServerError>
		<methodNotAllowed public="1" set="method" line="43" static="1">
			<f a="?pos" v="null">
				<t path="tink.core.Pos"/>
				<t path="tink.Error"/>
			</f>
			<haxe_doc>A Http 405 "Method Not Allowed" error</haxe_doc>
		</methodNotAllowed>
		<pageNotFound public="1" set="method" line="50" static="1">
			<f a="?pos" v="null">
				<t path="tink.core.Pos"/>
				<t path="tink.Error"/>
			</f>
			<haxe_doc>A Http 404 "Page Not Found" error</haxe_doc>
		</pageNotFound>
		<unauthorized public="1" set="method" line="57" static="1">
			<f a="?pos" v="null">
				<t path="tink.core.Pos"/>
				<t path="tink.Error"/>
			</f>
			<haxe_doc>A Http 401 "Unauthorized Access" error</haxe_doc>
		</unauthorized>
		<unprocessableEntity public="1" set="method" line="64" static="1">
			<f a="?pos" v="null">
				<t path="tink.core.Pos"/>
				<t path="tink.Error"/>
			</f>
			<haxe_doc>A Http 422 "Unprocessable Entity" error</haxe_doc>
		</unprocessableEntity>
		<fakePosition public="1" get="inline" set="null" line="77" static="1">
			<f a="obj:method:?args" v="::null">
				<d/>
				<c path="String"/>
				<c path="Array"><d/></c>
				<a>
					<methodName><c path="String"/></methodName>
					<lineNumber><x path="Int"/></lineNumber>
					<fileName><c path="String"/></fileName>
					<customParams><c path="Array"><d/></c></customParams>
					<className><c path="String"/></className>
				</a>
			</f>
			<haxe_doc>Generate a fake HaxePos position for a given class, method and args.

		Useful for debugging async code when you're not sure where the error came from.

		@param obj - The object (controller / module / handler) from which we derive the class name
		@param method - the method name to use in our position
		@param args - any arguments parsed to that method.  If not given, an empty array will be used.</haxe_doc>
		</fakePosition>
		<haxe_doc>Some helpers for error functions.</haxe_doc>
	</class>
	<typedef path="ufront.web.UfrontConfiguration" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/UfrontConfiguration.hx">
		<a>
			<viewPath>
				<t path="Null"><c path="String"/></t>
				<meta><m n=":optional"/></meta>
			</viewPath>
			<viewEngine>
				<t path="Null"><x path="Class"><c path="ufront.view.UFViewEngine"/></x></t>
				<meta><m n=":optional"/></meta>
			</viewEngine>
			<urlRewrite>
				<x path="Bool"/>
				<meta><m n=":optional"/></meta>
			</urlRewrite>
			<templatingEngines>
				<c path="Array"><t path="ufront.view.TemplatingEngine"/></c>
				<meta><m n=":optional"/></meta>
			</templatingEngines>
			<sessionImplementation>
				<x path="Class"><c path="ufront.web.session.UFHttpSession"/></x>
				<meta><m n=":optional"/></meta>
			</sessionImplementation>
			<responseMiddleware>
				<c path="Array"><c path="ufront.app.UFResponseMiddleware"/></c>
				<meta><m n=":optional"/></meta>
			</responseMiddleware>
			<requestMiddleware>
				<c path="Array"><c path="ufront.app.UFRequestMiddleware"/></c>
				<meta><m n=":optional"/></meta>
			</requestMiddleware>
			<remotingApi>
				<x path="Class"><c path="ufront.api.UFApiContext"/></x>
				<meta><m n=":optional"/></meta>
			</remotingApi>
			<logFile>
				<t path="Null"><c path="String"/></t>
				<meta><m n=":optional"/></meta>
			</logFile>
			<indexController>
				<x path="Class"><c path="ufront.web.Controller"/></x>
				<meta><m n=":optional"/></meta>
			</indexController>
			<errorHandlers>
				<c path="Array"><c path="ufront.app.UFErrorHandler"/></c>
				<meta><m n=":optional"/></meta>
			</errorHandlers>
			<disableServerTrace>
				<x path="Bool"/>
				<meta><m n=":optional"/></meta>
			</disableServerTrace>
			<disableBrowserTrace>
				<x path="Bool"/>
				<meta><m n=":optional"/></meta>
			</disableBrowserTrace>
			<defaultLayout>
				<t path="Null"><c path="String"/></t>
				<meta><m n=":optional"/></meta>
			</defaultLayout>
			<controllers>
				<t path="Null"><t path="Iterable"><x path="Class"><c path="ufront.web.Controller"/></x></t></t>
				<meta><m n=":optional"/></meta>
			</controllers>
			<contentDirectory>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
			</contentDirectory>
			<basePath>
				<c path="String"/>
				<meta><m n=":optional"/></meta>
			</basePath>
			<authImplementation>
				<x path="Class"><c path="ufront.auth.UFAuthHandler"><c path="ufront.auth.UFAuthUser"/></c></x>
				<meta><m n=":optional"/></meta>
			</authImplementation>
			<apis>
				<t path="Null"><t path="Iterable"><x path="Class"><c path="ufront.api.UFApi"/></x></t></t>
				<meta><m n=":optional"/></meta>
			</apis>
			<adminModules>
				<t path="Iterable"><x path="Class"><c path="ufront.ufadmin.UFAdminModule"/></x></t>
				<meta><m n=":optional"/></meta>
			</adminModules>
		</a>
		<haxe_doc>Small configuration options that affect a ufront application.

	Used in `ufront.web.UfrontApplication`</haxe_doc>
	</typedef>
	<class path="ufront.web.DefaultUfrontConfiguration" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/UfrontConfiguration.hx" module="ufront.web.UfrontConfiguration"><get public="1" set="method" line="209" static="1">
	<f a=""><t path="ufront.web.UfrontConfiguration"/></f>
	<haxe_doc>Fetch a default `UfrontConfiguration`.

		The values here are as explained in the documentation for each field of `UfrontConfiguration`.

		If you do not supply a UfrontConfiguration object to your `UfrontApplication`, or if your object does not specify all the required values, it will use these values as a fallback.

		Defaults for each value are described in the documentation for each field in `UfrontConfiguration`</haxe_doc>
</get></class>
	<class path="ufront.web.DefaultUfrontController" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/UfrontConfiguration.hx" module="ufront.web.UfrontConfiguration">
		<extends path="ufront.web.Controller"/>
		<showMessage set="method" line="260">
			<f a=""><c path="String"/></f>
			<meta>
				<m n="wrapResult"><e>7</e></m>
				<m n=":route"><e>"/*"</e></m>
			</meta>
		</showMessage>
		<execute public="1" set="method" line="419" override="1"><f a=""><t path="tink.Surprise">
	<c path="ufront.web.result.ActionResult"/>
	<t path="tink.core.Error"/>
</t></f></execute>
		<new public="1" set="method" line="258"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A simple controller to use if no other is specified.</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="ufront.web.UserAgent" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/UserAgent.hx">
		<dataBrowser line="24" static="1"><c path="Array"><a>
	<versionSearch>
		<c path="String"/>
		<meta><m n=":optional"/></meta>
	</versionSearch>
	<subString><c path="String"/></subString>
	<identity><c path="String"/></identity>
</a></c></dataBrowser>
		<dataOS line="82" static="1"><c path="Array"><a>
	<subString><c path="String"/></subString>
	<identity><c path="String"/></identity>
</a></c></dataOS>
		<fromString public="1" set="method" line="121" static="1"><f a="s">
	<c path="String"/>
	<c path="ufront.web.UserAgent"/>
</f></fromString>
		<extractVersion set="method" line="145" static="1"><f a="searchString:s">
	<c path="String"/>
	<c path="String"/>
	<a>
		<version><c path="String"/></version>
		<minorVersion><t path="Null"><x path="Int"/></t></minorVersion>
		<majorVersion><t path="Null"><x path="Int"/></t></majorVersion>
	</a>
</f></extractVersion>
		<searchString set="method" line="160" static="1"><f a="data:s">
	<c path="Array"><d/></c>
	<c path="String"/>
	<a>
		<versionString><c path="String"/></versionString>
		<app><d/></app>
	</a>
</f></searchString>
		<browser public="1" set="null"><c path="String"/></browser>
		<version public="1" set="null"><c path="String"/></version>
		<majorVersion public="1" set="null"><x path="Int"/></majorVersion>
		<minorVersion public="1" set="null"><x path="Int"/></minorVersion>
		<platform public="1" set="null"><c path="String"/></platform>
		<toString public="1" set="method" line="116"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="107"><f a="browser:version:majorVersion:minorVersion:platform">
	<c path="String"/>
	<c path="String"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>UserAgent information detected from the version string.

	This class is fairly outdated, so usefulness may vary.  For example, iOS is listed as a known OS, but Android isn't.

	You can access a pre-filled version for the current request using:

	`myHttpContext.request.userAgent`

	TODO: update the usefulness
	TODO: document further

	@author Franco Ponticelli</haxe_doc>
	</class>
	<class path="ufront.web.context.ActionContext" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/context/ActionContext.hx">
		<httpContext public="1" set="null">
			<c path="ufront.web.context.HttpContext"/>
			<haxe_doc>A link to the full `HttpContext`</haxe_doc>
		</httpContext>
		<handler public="1">
			<t path="Null"><a/></t>
			<haxe_doc>The UFRequestHandler that was used in this request.  Will be null until the request is handled.</haxe_doc>
		</handler>
		<controller public="1">
			<t path="Null"><a/></t>
			<haxe_doc>The controller that was used in this request.  Will be null until the request is handled.</haxe_doc>
		</controller>
		<action public="1">
			<t path="Null"><c path="String"/></t>
			<haxe_doc>The name of the action / method that was used in this request.  Will be null until the request is handled.</haxe_doc>
		</action>
		<args public="1">
			<t path="Null"><c path="Array"><d/></c></t>
			<haxe_doc>The array of arguments used for the current action / method in this request.  Will be null until the request is handled.</haxe_doc>
		</args>
		<actionResult public="1">
			<c path="ufront.web.result.ActionResult"/>
			<haxe_doc>The `ActionResult` that came from processing the request. Will be null until the action has been executed.</haxe_doc>
		</actionResult>
		<uriParts public="1" get="accessor" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>An array containing all the "parts" of the current Uri, split by "/".

		The first time you access this, it will load it from `httpContext.getRequestUri().split("/")`.

		Note: this array may be modified as the request is handled.
		For example, if dispatching to a sub-controller, the controller may remove certain parts and leave only parts relevant to the sub controller.
		If you need access to the original `uriParts`, you should split the `httpContext.getRequestUri()` yourself to be sure.</haxe_doc>
		</uriParts>
		<get_uriParts set="method" line="52"><f a=""><c path="Array"><c path="String"/></c></f></get_uriParts>
		<toString public="1" set="method" line="61"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="47">
			<f a="httpContext">
				<c path="ufront.web.context.HttpContext"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new ActionContext.  HttpContext is required.</haxe_doc>
		</new>
		<haxe_doc>A context describing the result returned by an action.

	Contains the `HttpContext`, as well as the utilised UFRequestHandler, controller, action, arguments and result.

	It is useful for helping know how to present a response to the client, and is used in the `ufront.web.result.ActionResult` classes.

	It is also helpful for logging and for unit testing - so we can be sure our requests are being acted upon in the way we expect.</haxe_doc>
	</class>
	<class path="ufront.web.context.HttpContext" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/context/HttpContext.hx">
		<createSysContext public="1" set="method" line="34" static="1">
			<f a="?request:?response:?appInjector:?session:?auth:?urlFilters:?relativeContentDir" v="null:null:null:null:null:null:'uf-content'">
				<c path="ufront.web.context.HttpRequest"/>
				<c path="ufront.web.context.HttpResponse"/>
				<c path="minject.Injector"/>
				<c path="ufront.web.session.UFHttpSession"/>
				<c path="ufront.auth.UFAuthHandler"><c path="ufront.auth.UFAuthUser"/></c>
				<c path="Array"><c path="ufront.web.url.filter.UFUrlFilter"/></c>
				<c path="String"/>
				<c path="ufront.web.context.HttpContext"/>
			</f>
			<haxe_doc>Create a HttpContext for Neko or PHP environments.
			If request and response are not supplied, they will created.
			The rest of the parameters are passed directly to the `HttpContext` constructor.</haxe_doc>
		</createSysContext>
		<injector public="1" set="null">
			<c path="minject.Injector"/>
			<haxe_doc>An dependency injector for the current request.

		By default, mappings are provided for the following classes:

		- `ufront.web.context.HttpContext`
		- `ufront.web.context.HttpRequest`
		- `ufront.web.context.HttpResponse`
		- `ufront.web.context.ActionContext`
		- `ufront.log.MessageList`
		- `ufront.web.session.UFHttpSession` (and the implementation class used for the session).
		- `ufront.auth.UFAuthHandler` (and the implementation class used for the auth handler).

		When used in a HttpApplication, each call to `execute` will set the application's injector as this context's parent injector.
		This means all mappings at the application level will be available in the request injector.</haxe_doc>
		</injector>
		<request public="1" set="null">
			<c path="ufront.web.context.HttpRequest"/>
			<haxe_doc>The current HttpRequest</haxe_doc>
		</request>
		<response public="1" set="null">
			<c path="ufront.web.context.HttpResponse"/>
			<haxe_doc>The current HttpResponse</haxe_doc>
		</response>
		<session public="1" set="null">
			<c path="ufront.web.session.UFHttpSession"/>
			<haxe_doc>The current session.
		Either set during the constructor or created via dependency injection.</haxe_doc>
		</session>
		<sessionID public="1" get="accessor" set="null">
			<t path="Null"><c path="String"/></t>
			<haxe_doc>The current session ID.

		This is a shortcut for `session.id`, but will return null if `session` is null.</haxe_doc>
		</sessionID>
		<auth public="1" set="null">
			<c path="ufront.auth.UFAuthHandler"><c path="ufront.auth.UFAuthUser"/></c>
			<haxe_doc>The current auth handler.
		Either set during the constructor or created via dependency injection.</haxe_doc>
		</auth>
		<currentUser public="1" get="accessor" set="null">
			<t path="Null"><c path="ufront.auth.UFAuthUser"/></t>
			<haxe_doc>The current user.

		This is a shortcut for `auth.currentUser`, but will return null if `auth` is null.</haxe_doc>
		</currentUser>
		<currentUserID public="1" get="accessor" set="null">
			<t path="Null"><c path="String"/></t>
			<haxe_doc>The current user.

		This is a shortcut for `auth.currentUser.id`, but will return null if `auth` or `auth.currentUser` is null.</haxe_doc>
		</currentUserID>
		<actionContext public="1" set="null">
			<c path="ufront.web.context.ActionContext"/>
			<haxe_doc>The `ActionContext` used in processing the request. Will be null until the application has found a handler for the request.</haxe_doc>
		</actionContext>
		<completion public="1">
			<x path="haxe.EnumFlags"><e path="ufront.web.context.RequestCompletion"/></x>
			<haxe_doc>The completion progress of the current request. Setting these values will affect the flow of the request.

		For example, if a middleware restores a response from a cached entry matching the current request, it may want to skip the `RequestHandler` and any `ResponseMiddleware`:

		```
		// Skip remaining request middleware, and the request handler (this will then skip to the response middleware)
		ctx.completion.set( CRequestMiddlewareComplete );
		ctx.completion.set( CRequestHandlerComplete );
		```

		Another example is if you have a controller or some code that writes directly to the output, not the response object, in which case you want to skip the log, flush, middleware etc.  (This is the case with the `dbadmin` tool)

		```
		ctx.completion.set( CRequestHandlerComplete );
		ctx.completion.set( CResponseMiddlewareComplete );
		ctx.completion.set( CLogComplete );
		ctx.completion.set( CFlushComplete );
		```

		These values are updated by HttpApplication and various middleware and handlers, or you can update them manually.</haxe_doc>
		</completion>
		<urlFilters public="1" set="null">
			<t path="Iterable"><c path="ufront.web.url.filter.UFUrlFilter"/></t>
			<haxe_doc>The URL filters to be used for `getRequestUri()` and `generateUri()`</haxe_doc>
		</urlFilters>
		<_requestUri><c path="String"/></_requestUri>
		<getRequestUri public="1" set="method" line="194">
			<f a=""><c path="String"/></f>
			<haxe_doc>Gets the filtered request URI.

		It uses the request uri found in the supplied `HttpRequest`, but applies the Url Filters to it.
		For example, if you use `PathInfoUrlFilter` to filter `index.n?path=/home/` into `/home/`, this will return the filtered result.</haxe_doc>
		</getRequestUri>
		<generateUri public="1" set="method" line="210">
			<f a="uri">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Takes a URI and runs it through the given filters in reverse.

		For example, if you use `PathInfoUrlFilter` this could turn `/home/` into `index.n?path=/home/`.
		This is useful so your code contains the simple URIs, but at runtime they are transformed into the correct form depending on the environment.</haxe_doc>
		</generateUri>
		<setUrlFilters public="1" set="method" line="222">
			<f a="filters">
				<t path="Iterable"><c path="ufront.web.url.filter.UFUrlFilter"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the URL filters.  Should only be used before the request has begun processing.</haxe_doc>
		</setUrlFilters>
		<contentDirectory public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Get the path of the content directory.

		This is a directory that ufront has write-access to, and should preferably not be available for general Http access.

		It can be used to store sessions, log files, cache, uploaded files etc.

		The value is essentially `${request.scriptDirectory}/$relativeContentDir/`, where `relativeContentDir` is the value that was supplied to the constructor.

		If using `ufront.application.UfrontApplication`, this value can be set with the `contentDirectory` setting in your `ufront.web.Configuration` initialization settings.

		The trailing slash is always included.</haxe_doc>
		</contentDirectory>
		<relativeContentDir><c path="String"/></relativeContentDir>
		<_contentDir><c path="String"/></_contentDir>
		<get_contentDirectory set="method" line="244"><f a=""><c path="String"/></f></get_contentDirectory>
		<commitSession public="1" set="method" line="260">
			<f a=""><t path="tink.Surprise">
	<t path="tink.Noise"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Commit the session data, if there is any.

		Will return a future letting you know when the session commit has been completed</haxe_doc>
		</commitSession>
		<ufTrace public="1" get="inline" set="null" line="275">
			<f a="msg:?pos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>A trace statement that will be associated with this HttpContext

		Because of the static nature of Haxe's `trace` (it always uses `haxe.Log.trace`, and that does not have access to information about our request), it can be hard to differentiate which traces belong to which requests.

		A workaround is to call HttpContext's ufTrace(), store our messages here, and output them at the end of the request.  You can call `httpContext.ufTrace(someValue)` just like you would any other trace, and the traces will be displayed as normal at the end of the request.

		Inline shortcuts are provided from `ufront.web.Controller` and `ufront.api.UFApi` so that you can call ufTrace() and it points to this method.</haxe_doc>
		</ufTrace>
		<ufLog public="1" get="inline" set="null" line="284">
			<f a="msg:?pos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a Log message on the current request.

		Similar to ufTrace, except that the message is noted to be a Log, which may be displayed differently by the tracing module.</haxe_doc>
		</ufLog>
		<ufWarn public="1" get="inline" set="null" line="293">
			<f a="msg:?pos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a Warning message on the current request.

		Similar to ufTrace, except that the message is noted to be a Warning, which may be displayed differently by the tracing module.</haxe_doc>
		</ufWarn>
		<ufError public="1" get="inline" set="null" line="305">
			<f a="msg:?pos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a Error message on the current request.

		Similar to ufTrace, except that the message is noted to be a Error, which may be displayed differently by the tracing module.

		Please note this does not throw or catch errors, it merely outputs a message to the log and marks that message as an error.
		It may be sensible to use it in your error handling code, but not _as_ your error handling code.</haxe_doc>
		</ufError>
		<messages public="1">
			<c path="Array"><t path="ufront.log.Message"/></c>
			<haxe_doc>A collection of messages that were traced during this request.</haxe_doc>
		</messages>
		<get_sessionID get="inline" set="null" line="314"><f a=""><c path="String"/></f></get_sessionID>
		<get_currentUser get="inline" set="null" line="318"><f a=""><t path="Null"><c path="ufront.auth.UFAuthUser"/></t></f></get_currentUser>
		<get_currentUserID get="inline" set="null" line="322"><f a=""><c path="String"/></f></get_currentUserID>
		<new public="1" set="method" line="65">
			<f a="request:response:?appInjector:?session:?auth:?urlFilters:?relativeContentDir" v="::null:null:null:null:'uf-content'">
				<c path="ufront.web.context.HttpRequest"/>
				<c path="ufront.web.context.HttpResponse"/>
				<c path="minject.Injector"/>
				<c path="ufront.web.session.UFHttpSession"/>
				<c path="ufront.auth.UFAuthHandler"><c path="ufront.auth.UFAuthUser"/></c>
				<c path="Array"><c path="ufront.web.url.filter.UFUrlFilter"/></c>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a HttpContext object using the explicitly supplied objects.

		For creating a context for each platform see `createSysContext` and `createNodeJSContext`.

		@param request (required) The current `HttpRequest`.
		@param response (required) The current `HttpResponse`.
		@param appInjector (optional) The HttpApplication injector, which will be the parent injector for this request - all appInjector mappings will be shared with this context's injector. If null no parent injector will be used.
		@param session (optional) The current session. If null, we will attempt to get a `UFHttpSession` from the injector. If that fails, we will use a `VoidSession`.
		@param auth (optional) The current authentication handler. If null, we will attempt to get a `UFAuthHandler` from the injector. If that fails, we will use a `NobodyAuthHandler`, which is appropriate for a visitor who has no permissions.
		@param urlFilters (optional) The URL Filters to use on the current request. If null, an empty array (no filters) will be used.
		@param relativeContentDir (optional) The path to the content directory, relative to the script directory. Default is "uf-content".</haxe_doc>
		</new>
		<haxe_doc>A context describing the current Http request, response and session.</haxe_doc>
	</class>
	<enum path="ufront.web.context.RequestCompletion" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/context/HttpContext.hx" module="ufront.web.context.HttpContext">
		<CRequestMiddlewareComplete/>
		<CRequestHandlersComplete/>
		<CResponseMiddlewareComplete/>
		<CLogHandlersComplete/>
		<CFlushComplete/>
		<CErrorHandlersComplete/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="ufront.web.context.OnPartCallback" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/context/HttpRequest.hx" module="ufront.web.context.HttpRequest">
		<f a=":">
			<c path="String"/>
			<c path="String"/>
			<t path="tink.Surprise">
				<t path="tink.Noise"/>
				<t path="tink.Error"/>
			</t>
		</f>
		<haxe_doc><![CDATA[`function onPart(paramName:String, origFileName:String):Surprise<Noise,Error>`]]></haxe_doc>
	</typedef>
	<typedef path="ufront.web.context.OnDataCallback" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/context/HttpRequest.hx" module="ufront.web.context.HttpRequest">
		<f a="::">
			<c path="haxe.io.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<t path="tink.Surprise">
				<t path="tink.Noise"/>
				<t path="tink.Error"/>
			</t>
		</f>
		<haxe_doc><![CDATA[`function onData(bytes:Bytes, pos:Int, length:Int):Surprise<Noise,Error>`]]></haxe_doc>
	</typedef>
	<typedef path="ufront.web.context.OnEndPartCallback" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/context/HttpRequest.hx" module="ufront.web.context.HttpRequest">
		<f a=""><t path="tink.Surprise">
	<t path="tink.Noise"/>
	<t path="tink.Error"/>
</t></f>
		<haxe_doc><![CDATA[`function onEnd():Surprise<Noise,Error>`]]></haxe_doc>
	</typedef>
	<class path="ufront.web.result.ActionResult" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/result/ActionResult.hx">
		<wrap public="1" set="method" line="38" static="1">
			<f a="resultValue">
				<d/>
				<c path="ufront.web.result.ActionResult"/>
			</f>
			<haxe_doc>Wrap a dynamic result in an ActionResult.

		If it is null, an `EmptyResult` will be used.
		If it is an ActionResult, it will be left as is.
		If it is a different type, it will be converted to a String and used in a ContentResult.</haxe_doc>
		</wrap>
		<executeResult public="1" set="method" line="27">
			<f a="actionContext">
				<c path="ufront.web.context.ActionContext"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Every ActionResult must implement the `executeResult` method.

		This method can write output to the HTTP Response, set headers, change content types etc.

		The method may be asynchronous, and should return a `tink.core.Surprise`.

		The ActionResult base class provides a default implementation which has no effect (does not render a result).</haxe_doc>
		</executeResult>
		<haxe_doc>ActionResult is the base class for all results of actions performed during a MVC request.

	Each action (method) in your controller returns an action result.
	This result will take information about the request (the result of the action, which action was called etc) and write an appropriate response to the client.
	For example, a ViewResult will render a view using the data provided and a template whose path is guessed based on the name of the controller and action that were called.
	As another example, a JsonResult will serialize the returned data and send it to the client as JSON, with the correct HTTP content type headings.

	Please note if an action does not return an action result, it will be wrapped into one using `wrap()` below.</haxe_doc>
	</class>
	<typedef path="ufront.web.result.ActionOutcome" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/result/ActionResult.hx" module="ufront.web.result.ActionResult">
		<t path="tink.Outcome">
			<c path="ufront.web.result.ActionResult"/>
			<t path="tink.Error"/>
		</t>
		<haxe_doc>A typedef shortcut for an action return type that either gives a valid result or a Error</haxe_doc>
	</typedef>
	<typedef path="ufront.web.result.FutureActionResult" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/result/ActionResult.hx" module="ufront.web.result.ActionResult">
		<t path="tink.Future"><c path="ufront.web.result.ActionResult"/></t>
		<haxe_doc>A typedef shortcut for a Future that will contain an ActionResult</haxe_doc>
	</typedef>
	<typedef path="ufront.web.result.FutureActionOutcome" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/result/ActionResult.hx" module="ufront.web.result.ActionResult">
		<t path="tink.Future"><t path="ufront.web.result.ActionOutcome"/></t>
		<haxe_doc>A typedef shortcut for a Future that will contain either an ActionResult or a Error</haxe_doc>
	</typedef>
	<class path="ufront.web.result.ContentResult" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/result/ContentResult.hx">
		<extends path="ufront.web.result.ActionResult"/>
		<content public="1"><c path="String"/></content>
		<contentType public="1"><c path="String"/></contentType>
		<executeResult public="1" set="method" line="17" override="1"><f a="actionContext">
	<c path="ufront.web.context.ActionContext"/>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></executeResult>
		<new public="1" set="method" line="12"><f a="?content:?contentType" v="null:null">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Represents a user-defined content type that is the result of an action method.</haxe_doc>
	</class>
	<class path="ufront.web.result.EmptyResult" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/result/EmptyResult.hx">
		<extends path="ufront.web.result.ActionResult"/>
		<preventFlush><x path="Bool"/></preventFlush>
		<executeResult public="1" set="method" line="24" override="1"><f a="actionContext">
	<c path="ufront.web.context.ActionContext"/>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></executeResult>
		<new public="1" set="method" line="20">
			<f a="?preventFlush" v="false">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@param preventFlush Should we prevent the application from "flushing" the response, this will prevent both content and headers, cookies, status codes etc from being returned to the client.</haxe_doc>
		</new>
		<haxe_doc>Represents a result that takes no further action and writes nothing to the response.

	This is useful if your controller action has written to the response directly, for example using `Sys.println`.

	@author Andreas Soderlund</haxe_doc>
	</class>
	<class path="ufront.web.result.RedirectResult" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/result/RedirectResult.hx">
		<extends path="ufront.web.result.ActionResult"/>
		<url public="1">
			<c path="String"/>
			<haxe_doc>The target URL.</haxe_doc>
		</url>
		<permanentRedirect public="1">
			<x path="Bool"/>
			<haxe_doc>Indicates whether the redirection should be permanent.</haxe_doc>
		</permanentRedirect>
		<executeResult public="1" set="method" line="22" override="1"><f a="actionContext">
	<c path="ufront.web.context.ActionContext"/>
	<t path="tink.Surprise">
		<t path="tink.Noise"/>
		<t path="tink.Error"/>
	</t>
</f></executeResult>
		<new public="1" set="method" line="16"><f a="url:?permanentRedirect" v=":false">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Controls the processing of application actions by redirecting to a specified URI.</haxe_doc>
	</class>
	<class path="ufront.web.result.ViewResult" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/result/ViewResult.hx">
		<extends path="ufront.web.result.ActionResult"/>
		<globalValues public="1" line="170" static="1">
			<x path="ufront.view.TemplateData"/>
			<haxe_doc>Global values that should be made available to every view result.</haxe_doc>
		</globalValues>
		<viewPath public="1">
			<t path="Null"><c path="String"/></t>
			<haxe_doc>The path to the view.

		If not specified when `executeResult` is called, it will be inferred from the Http Context.
		If an extension is not specified, any extensions that match the given templating engines will be used.
		See `executeResult` for details on this selection process.</haxe_doc>
		</viewPath>
		<templatingEngine public="1">
			<t path="Null"><t path="ufront.view.TemplatingEngine"/></t>
			<haxe_doc>A specific templating engine to use for this request.
		This is helpful if you have views with file extensions shared by more than one view engine (eg: *.html).
		Specifying an engine explicitly when a viewPath has been set will force that view to be rendered with a specific engine.
		Specifying an engine when no view path is set, or a view path without an extension, will search for views with an extension matching thos supported by this templating engine.</haxe_doc>
		</templatingEngine>
		<data public="1">
			<x path="ufront.view.TemplateData"/>
			<haxe_doc>The data to pass to the template during `executeResult`.
		This will be combined with the `helpers` and `globalData` before being passed to the templates `execute` function.
		This is set during the constructor, and you can add to it using the `setVar` and `setVars` helper methods.</haxe_doc>
		</data>
		<layout public="1">
			<t path="Null"><e path="haxe.ds.Option"><t path="tink.Pair">
	<c path="String"/>
	<t path="ufront.view.TemplatingEngine"/>
</t></e></t>
			<haxe_doc>The layout to wrap around this view.

		A layout is another `ufront.view.UFTemplate` which takes the parameter "viewContent".
		The result of the current view will be inserted into the "viewContent" field of the layout.

		All of the same data mappings and helpers will be available to the layout when it renders.

		If no layout is specified, then we will see if there is a default one for the application.
		(You can set a default layout for a `UfrontApplication` using the `UfrontConfiguration.defaultLayout` configuration property).

		If you call `viewResult.withoutLayout()` then no layout will wrap the current view, even if a default layout is specified.</haxe_doc>
		</layout>
		<helpers public="1">
			<x path="ufront.view.TemplateData"/>
			<haxe_doc>Any helpers (dynamic functions) to pass to the template when it is executed.</haxe_doc>
		</helpers>
		<templateFromString>
			<x path="ufront.view.UFTemplate"/>
			<haxe_doc>An explicit string to use as the template, rather than loading the template through our UFViewEngine.</haxe_doc>
		</templateFromString>
		<layoutFromString>
			<x path="ufront.view.UFTemplate"/>
			<haxe_doc>An explicit string to use as the layout template, rather than loading the layout through our UFViewEngine.</haxe_doc>
		</layoutFromString>
		<withLayout public="1" set="method" line="251">
			<f a="layoutPath:?templatingEngine" v=":null">
				<c path="String"/>
				<t path="ufront.view.TemplatingEngine"/>
				<c path="ufront.web.result.ViewResult"/>
			</f>
			<haxe_doc>Specify a layout to wrap this view.

		@param layoutPath
		@param ?templatingEngine A templating engine to use with this layout. If none is specified, the first templating engine matching the layoutPath's extension will be used. (If layoutPath is not specified, this parameter will have no effect).</haxe_doc>
		</withLayout>
		<withoutLayout public="1" set="method" line="259">
			<f a=""><c path="ufront.web.result.ViewResult"/></f>
			<haxe_doc>Prevent a default layout from wrapping this view - this view will appear unwrapped.</haxe_doc>
		</withoutLayout>
		<usingTemplateString public="1" set="method" line="274">
			<f a="template:?layout:?templatingEngine" v=":null:null">
				<c path="String"/>
				<c path="String"/>
				<t path="ufront.view.TemplatingEngine"/>
				<c path="ufront.web.result.ViewResult"/>
			</f>
			<haxe_doc>Use a static string as the templates, rather than loading from a UFViewEngine.

		If `template` or `layout` is not supplied or null, the usual rules will apply for loading a view using the UFViewEngine.
		
		@param template The template string for the main view template.
		@param layout The template string for the layout.
		@param templatingEngine The templating engine to render the given templates with.
		@return ViewResult (to allow method chaining).</haxe_doc>
		</usingTemplateString>
		<setVar public="1" set="method" line="290">
			<f a="key:val">
				<c path="String"/>
				<d/>
				<c path="ufront.web.result.ViewResult"/>
			</f>
			<haxe_doc><![CDATA[Add a key=>value pair to our TemplateData]]></haxe_doc>
		</setVar>
		<setVars public="1" set="method" line="296">
			<f a="?map:?obj" v="null:null">
				<x path="Map">
					<c path="String"/>
					<d/>
				</x>
				<a/>
				<c path="ufront.web.result.ViewResult"/>
			</f>
			<haxe_doc><![CDATA[Add an object or map with key=>value pairs to our TemplateData]]></haxe_doc>
		</setVars>
		<executeResult public="1" set="method" line="313" override="1">
			<f a="actionContext">
				<c path="ufront.web.context.ActionContext"/>
				<t path="tink.Surprise">
					<e path="tink.core.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Execute the given view, wrap it in a layout, and write it to the response.

		In detail:

		- Figure out which template and which layout to use. (See the documentation at the top of this class for more details.)
		- Load the template and layout.
		- Once loaded, execute the view template with all of our data (a combination of `globalValues`, `helpers` and `data`).
		- If a layout is used, execute the layout with the same data, inserting our view into the `viewContent` variable of the layout.
		- Write the final output to the `ufront.web.context.HttpResponse` with a `text/html` content type.</haxe_doc>
		</executeResult>
		<error set="method" line="459"><f a="reason:data">
	<c path="String"/>
	<d/>
	<e path="tink.core.Outcome">
		<e path="tink.core.Noise"/>
		<t path="tink.Error"/>
	</e>
</f></error>
		<new public="1" set="method" line="237">
			<f a="?data:?viewPath:?templatingEngine" v="null:null:null">
				<x path="ufront.view.TemplateData"/>
				<c path="String"/>
				<t path="ufront.view.TemplatingEngine"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new ViewResult, with the specified data.

		You can optionally specify a custom `viewPath` or a specific `templatingEngine`.

		If `viewPath` is not specified, the `actionContext` will be used to choose a view during `executeResult`.
		See the documentation on `executeResult` for details.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[A ViewResult loads a view from a templating engine, optionally wraps it in a layout, and writes the result to the HttpResponse with a `text/html` content type.

### Choosing a view

There's a fair bit of magic to how ufront chooses a template for the ViewResult.

__Let's look at an example:__

```haxe
class AdminController extends Controller {
	@:route("/dashboard/")
	function doDashboard() {
		return new ViewResult();
	}

	@:route("/camera/")
	function takePhoto() {
		return new ViewResult();
	}
}
```

If you visit `/dashboard/`, it is going to use a template at "/view/admin/dashboard.html" by default.
If you visit `/camera/`, it is going to use a template at "/view/admin/takePhoto.html" by default.

__How does it know to look there?__

1. "/view/" is your viewPath, set in `UfrontConfiguration.viewPath`
2. "admin/" is guessed based on the name "AdminController".  We lower-case the first letter, and ignore the "Controller" part of the name.  Another example is "BlogPostController" or just "BlogPost" looking for views in "/blogPost/".
3. "dashboard.html" and "takePhoto.html" are guessed based on the action name / method name.  If the name begins with "do", we ignore those two letters.  We also make sure the first letter is lower-case.

__How do we change it?__

Well you can use metadata.

To change the default folder that views in this controller are found in, use the `@viewFolder` metadata:

```haxe
@viewFolder("/admin-templates/")
class AdminController extends Controller {
	...
}
```

You can also set a default layout for every action on the controller:

```haxe
@viewFolder("/admin-templates/")
@layout("layout.html") // Will look in `view/admin-templates/layout.html`
// By contrast, `@layout("/layout.html")` will look in "/view/layout.html" - notice the leading slash.
class AdminController extends Controller {
	...
}
```

If you want to change the template used for one of our actions, you can use the `@template` metadata:

```haxe
@:route("/camera/")
@template("camera.html") // Will look in `view/admin-templates/camera.html`
function takePhoto() {
	return new ViewResult();
}
```

To specify a template to use manually in your code:

```
return new ViewResult({}, "myView.html");
return new ViewResult({}, "myView.html").withLayout("layout.html");
return new ViewResult({}, "myView.html").withoutLayout();
```

This gives you a fair amount of flexibility:

1. Do nothing, and let Ufront guess.
2. Be more specific, and use metadata, which is still nice and clean.
3. Be very specific and flexible, specifying it in your code.

__What about file extensions__

I've used ".html" views in all these examples, but you could leave this out.

If the viewPath does not include an extension, any view matching one of the extensions supported by our templating engines will be used.
You can optionally specify a TemplatingEngine to use also.
See `UFViewEngine.getTemplate()` for a detailed description of how a template is chosen.

### Setting data

When you create the view, you can specify some data to execute the template with:

```haxe
new ViewResult({ name: "jason", age: 26 });
```

You can add to this data using `ViewResult.setVar()` and `ViewResult.setVars()`.

You can also specify some global data that will always be included for your app:

```
ViewResult.globalValues["copyright"] = "&copy; 2014 Haxe Foundation, all rights reserved.";
```

Helpers (dynamic functions) can be included in your ViewResult also.

### Wrapping your view with a layout

Most websites will have a layout that is used on almost all of your pages, and then individual views for each different kind of page.

In Ufront, a layout is just another `ufront.view.UFTemplate` which has a variable called "viewContent".
The result of the current view will be inserted into the "viewContent" field of the layout.
All of the same data mappings and helpers will be available to the layout when it renders.

You can set a default layout to be used with all ViewResults using the static method `ViewResult.setDefaultLayout()`, or by injecting a String named "defaultLayout" into the app's dependency injector.
You can set a default layout for a controller using `@layout("layout.html")` style metadata.
You can set a layout for an individual result using `ViewResult.withLayout()`.
Finally if you have a default layout, but want to NOT use a layout, you can use `ViewResult.withoutLayout()`

### Where does it get the views from?

Short answer: by default, it gets them from the filesystem in the "view/" folder relative to the script directory.

Long answer:

Ufront supports different view engines. (See `UFViewEngine`).
For example, you could have a view engine that loads templates from a database, rather than from the FileSystem.
Or one that loads them over HTTP from a server somewhere.

ViewResult will use dependency injection to get the correct UFViewEngine four our app.
You can set this by setting `UfrontConfiguration.viewEngine` when you start your Ufront app.
By default, it is configured to use the `FileViewEngine`, loading views from the "view/" directory relative to your script directory, so "www/view/".

### What if I want a different templating engine?

We use a `UFViewEngine` to load our templates, and these support multiple templating engines.
You can view some available engines in `TemplatingEngines`, and it will be fairly easy to create a new templating engine if needed.
You can use `UfrontApplication.addTemplatingEngine()` to add a new engine, which will then be available to your view results.]]></haxe_doc>
	</class>
	<class path="ufront.web.session.UFHttpSession" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/session/UFHttpSession.hx" interface="1">
		<id public="1" get="null" set="null">
			<c path="String"/>
			<haxe_doc>The ID of the current session</haxe_doc>
		</id>
		<init public="1" set="method">
			<f a=""><t path="tink.Surprise">
	<t path="tink.Noise"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Initiate the session (either read existing or start new session) and prepare so other operations can happen synchronously

		Returns a Surprise to let you know when the session is ready, after which operations can happen synchronously until you `commit()`.

		If the session fails to initiate, the Surprise will be a Failure, containing the error message.</haxe_doc>
		</init>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empty the session of values.  Please note this does not end the session.</haxe_doc>
		</clear>
		<get public="1" set="method">
			<f a="name">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Get an existing session item.</haxe_doc>
		</get>
		<set public="1" set="method">
			<f a="name:value">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set a session item.  This should not be committed until `commit()` is called</haxe_doc>
		</set>
		<exists public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check if a session value exists</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove an item from the session</haxe_doc>
		</remove>
		<isActive public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Return whether or not there is already an active session, and whether it is ready to use (that is, `init()` has been completed).</haxe_doc>
		</isActive>
		<close public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flag the current session for removal.  The session data and session ID should be set to null and when `commit()` is called and the session should be removed from the server.</haxe_doc>
		</close>
		<setExpiry public="1" set="method">
			<f a="lifetime">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the number of seconds a session should last.  A value of 0 means the session will expire when the browser window is closed.</haxe_doc>
		</setExpiry>
		<commit public="1" set="method">
			<f a=""><t path="tink.Surprise">
	<t path="tink.Noise"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Commit the request.  Return a surprise, either notifying you of completion or giving an error message if it failed.</haxe_doc>
		</commit>
		<triggerCommit public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Flag this session for a commit.  This will happen automatically if you call `set`, `remove`, `clear`, or `regenerateID`, but this can be useful if a value has updated without "set" being called.</haxe_doc>
		</triggerCommit>
		<regenerateID public="1" set="method">
			<f a=""><t path="tink.Surprise">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Regenerate the session ID, making the changes on the server and informing the client.

		The new ID should be reserved now, though the actual content should not be saved until commit() is called.

		If commit() is not called, the existing ID will remain.

		Returns a Surprise to notify you when a new ID has been selected, or if a new ID was not able to be set.</haxe_doc>
		</regenerateID>
		<haxe_doc>An interface describing an open HTTP session.

	The methods are similar to `Map`, with `get()`, `set()`, `exists()`, `remove()` and `clear()`.

	There are also some methods to do with the actual session, not the data inside it: `init()`, `isActive()`, `getID()`, `close()`, `commit()`, `regenerateID()` and `setExpiry()`.

	@author Franco Ponticelli
	@author Jason O'Neil</haxe_doc>
		<meta><m n="interface"/></meta>
	</class>
	<class path="ufront.web.session.FileSession" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/session/FileSession.hx">
		<implements path="ufront.web.session.UFHttpSession"/>
		<defaultSessionName public="1" line="44" static="1">
			<c path="String"/>
			<haxe_doc>The default session name to use if none is provided.
		The default value is "UfrontSessionID".
		You can change this static variable to set a new default.</haxe_doc>
		</defaultSessionName>
		<defaultSavePath public="1" line="51" static="1">
			<c path="String"/>
			<haxe_doc>The default savePath.
		This should be relative to the `HttpContext.contentDirectory`, or absolute.
		The default value is "sessions/".  You can change this static value to set a new default.</haxe_doc>
		</defaultSavePath>
		<defaultExpiry public="1" line="58" static="1">
			<x path="Int"/>
			<haxe_doc>The default expiry value.
		The default value is 0 (expire when window is closed).
		You can change the default by changing this static variable.</haxe_doc>
		</defaultExpiry>
		<validID line="420" static="1"><c path="EReg"/></validID>
		<testValidId get="inline" set="null" line="421" static="1"><f a="id">
	<c path="String"/>
	<x path="Void"/>
</f></testValidId>
		<started><x path="Bool"/></started>
		<commitFlag><x path="Bool"/></commitFlag>
		<closeFlag><x path="Bool"/></closeFlag>
		<regenerateFlag><x path="Bool"/></regenerateFlag>
		<expiryFlag><x path="Bool"/></expiryFlag>
		<sessionID><c path="String"/></sessionID>
		<oldSessionID><t path="Null"><c path="String"/></t></oldSessionID>
		<sessionData><c path="haxe.ds.StringMap"><d/></c></sessionData>
		<context public="1">
			<c path="ufront.web.context.HttpContext"/>
			<meta>
				<m n="name"><e>"context"</e></m>
				<m n="type"><e>"ufront.web.context.HttpContext"</e></m>
				<m n="inject"/>
			</meta>
			<haxe_doc>The current HttpContext, should be supplied by injection.</haxe_doc>
		</context>
		<id public="1" get="accessor" set="null"><t path="Null"><c path="String"/></t></id>
		<injectConfig public="1" set="method" line="104">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n="name"><e>"injectConfig"</e></m>
				<m n="args"/>
				<m n="post"/>
			</meta>
			<haxe_doc>Use the current injector to check for configuration for this session: sessionName, expiry and savePath.
		If no values are available in the injector, the defaults will be used.
		This will be called automatically after `context` has been injected.</haxe_doc>
		</injectConfig>
		<sessionName public="1" set="null">
			<c path="String"/>
			<haxe_doc>The variable name to reference the session ID.

		This will be the name set in the Cookie sent to the client, or the name to search for in the parameters or cookies.

		This is set by injecting a String named "sessionName", otherwise the default `defaultSessionName` value is used.</haxe_doc>
		</sessionName>
		<expiry public="1" set="null">
			<t path="Null"><x path="Int"/></t>
			<haxe_doc><![CDATA[The lifetime/expiry of the cookie, in seconds.

		A positive value sets the cookie to expire that many seconds from the current time.
		A value of 0 represents expiry when the browser window is closed.
		A negative value expires the cookie immediately.

		This is set by injecting a `InjectionRef<Int> named "sessionExpiry", otherwise the default `defaultExpiry` value is used.]]></haxe_doc>
		</expiry>
		<savePath public="1" set="null">
			<c path="String"/>
			<haxe_doc>The save path for the session files.

		This should be absolute, or relative to the `HttpContext.contentDirectory`

		Relative paths should not have a leading slash.
		If a trailing slash is not included, it will be added.

		This is set by injecting a String named "sessionSavePath", otherwise the default `defaultSavePath` value is used.</haxe_doc>
		</savePath>
		<setExpiry public="1" set="method" line="162">
			<f a="e">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the number of seconds the session should last

		Note in this implementation only the cookie expiry is affected - the user could manually override this or send the session variable in the request parameters, and the session would still work.</haxe_doc>
		</setExpiry>
		<init public="1" set="method" line="175">
			<f a=""><t path="tink.Surprise">
	<t path="tink.Noise"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Initiate the session.

		This will check for an existing session ID.  If one exists, it will read and unserialize the session data from that session's file.

		If a session does not exist, one will be created.

		This is called before any other operations which require access to the current session.</haxe_doc>
		</init>
		<setCookie set="method" line="243"><f a="id:expiryLength">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setCookie>
		<commit public="1" set="method" line="260">
			<f a=""><t path="tink.Surprise">
	<t path="tink.Noise"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Commit if required.

		Returns an Outcome, which is a Failure if the commit failed, usually because of not having permission to write to disk.</haxe_doc>
		</commit>
		<get public="1" get="inline" set="null" line="304">
			<f a="name">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Retrieve an item from the session data</haxe_doc>
		</get>
		<set public="1" get="inline" set="null" line="314">
			<f a="name:value">
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set an item in the session data.

		Note this will not commit the value to a file until dispose() is called (generally at the end of a request)</haxe_doc>
		</set>
		<exists public="1" get="inline" set="null" line="325">
			<f a="name">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Check if a session has the specified item.</haxe_doc>
		</exists>
		<remove public="1" get="inline" set="null" line="334">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove an item from the session</haxe_doc>
		</remove>
		<clear public="1" get="inline" set="null" line="345">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empty all items from the current session data without closing the session</haxe_doc>
		</clear>
		<triggerCommit public="1" get="inline" set="null" line="355">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Force the session to be committed at the end of this request</haxe_doc>
		</triggerCommit>
		<regenerateID public="1" set="method" line="362">
			<f a=""><t path="tink.Surprise">
	<c path="String"/>
	<c path="String"/>
</t></f>
			<haxe_doc>Regenerate the ID for this session, renaming the file on the server and sending a new session ID to the cookie.</haxe_doc>
		</regenerateID>
		<isActive public="1" get="inline" set="null" line="377">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Whether or not the current session is active.

		This is determined by if a sessionID exists, which will happen if init() has been called or if a SessionID was provided in the request context (via Cookie or GET/POST parameter etc).</haxe_doc>
		</isActive>
		<get_id set="method" line="384">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return the current ID</haxe_doc>
		</get_id>
		<close public="1" set="method" line="395">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Close the session.

		The sessionData and sessionID will be set to null, and the session will be flagged for deletion (when `commit` is called)</haxe_doc>
		</close>
		<toString public="1" set="method" line="401"><f a=""><c path="String"/></f></toString>
		<getSessionFilePath get="inline" set="null" line="407"><f a="id">
	<c path="String"/>
	<c path="String"/>
</f></getSessionFilePath>
		<generateSessionID get="inline" set="null" line="411"><f a=""><c path="String"/></f></generateSessionID>
		<checkStarted get="inline" set="null" line="415"><f a=""><x path="Void"/></f></checkStarted>
		<new public="1" set="method" line="88">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Construct a new session object.

		This does not create the session file or commit any data, rather, it sets up the object so that read or writes can then happen.

		Data is read during `init` and written during `commit`.

		A new session object should be created for each request, and it will then associate itself with the correct session file for the given user.

		In general you should create your object using `injector.instantiate( FileSession )`, so that the HttpContext is made available and various the `injectConfig` initializations take place.</haxe_doc>
		</new>
		<haxe_doc>A session implementation using flat files.

	Files are saved to the folder `savePath`, with one file per session.  The folder must be writeable by the web server.

	Each session has a unique ID, which is randomly generated and used as the file.

	The contents of the file are a serialized StringMap representing the current session.  The serialization is done using `haxe.Serializer` and `haxe.Unserializer`.

	The session ID is sent to the client as a Cookie.  When reading the SessionID, Cookies are checked first, followed by GET/POST parameters.

	When searching the parameters or cookies for the Session ID, the name to search for is defined by the `sessionName` property.</haxe_doc>
	</class>
	<class path="ufront.web.session.VoidSession" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/session/VoidSession.hx">
		<implements path="ufront.web.session.UFHttpSession"/>
		<id public="1" get="accessor" set="null"><c path="String"/></id>
		<setExpiry public="1" set="method" line="20"><f a="e">
	<x path="Int"/>
	<x path="Void"/>
</f></setExpiry>
		<init public="1" set="method" line="22"><f a=""><t path="tink.Surprise">
	<t path="tink.Noise"/>
	<c path="String"/>
</t></f></init>
		<commit public="1" set="method" line="24"><f a=""><t path="tink.Surprise">
	<t path="tink.Noise"/>
	<c path="String"/>
</t></f></commit>
		<triggerCommit public="1" set="method" line="26"><f a=""><x path="Void"/></f></triggerCommit>
		<isActive public="1" set="method" line="28"><f a=""><x path="Bool"/></f></isActive>
		<get public="1" set="method" line="30"><f a="name">
	<c path="String"/>
	<d/>
</f></get>
		<set public="1" set="method" line="32"><f a="name:value">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></set>
		<exists public="1" set="method" line="34"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></exists>
		<remove public="1" set="method" line="36"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></remove>
		<clear public="1" set="method" line="38"><f a=""><x path="Void"/></f></clear>
		<regenerateID public="1" set="method" line="40"><f a=""><x path="tink.core.Future"><e path="tink.core.Outcome">
	<c path="String"/>
	<c path="String"/>
</e></x></f></regenerateID>
		<close public="1" set="method" line="42"><f a=""><x path="Void"/></f></close>
		<get_id set="method" line="44"><f a=""><c path="String"/></f></get_id>
		<new public="1" set="method" line="18"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A session implementation that doesn't actually save session state.

	In fact, it forgets everything the moment you ask it.
	Use this when you do not want a session implementation, but also do not want to get null related errors in your code.
	For example, when testing.</haxe_doc>
	</class>
	<class path="ufront.web.upload.FileUpload" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/upload/FileUpload.hx" interface="1">
		<postName public="1">
			<c path="String"/>
			<haxe_doc>The name of the POST argument (that is, the name of the file input) that this file was uploaded with.</haxe_doc>
		</postName>
		<originalFileName public="1">
			<c path="String"/>
			<haxe_doc>The original name of this file on the client.</haxe_doc>
		</originalFileName>
		<size public="1">
			<x path="Int"/>
			<haxe_doc>The size of the upload in Bytes</haxe_doc>
		</size>
		<getBytes public="1" set="method">
			<f a=""><t path="tink.Surprise">
	<c path="haxe.io.Bytes"/>
	<t path="tink.Error"/>
</t></f>
			<haxe_doc>The contentType of the upload.

		Please note this is not verified, so do not rely on this for security.</haxe_doc>
		</getBytes>
		<getString public="1" set="method">
			<f a=""><t path="tink.Surprise">
	<c path="String"/>
	<t path="tink.Error"/>
</t></f>
			<haxe_doc>Get the current upload as a `String`</haxe_doc>
		</getString>
		<writeToFile public="1" set="method">
			<f a="filePath">
				<c path="String"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Write the current upload to a file on the filesystem</haxe_doc>
		</writeToFile>
		<process public="1" set="method">
			<f a="onData:?partSize">
				<f a="::">
					<c path="haxe.io.Bytes"/>
					<x path="Int"/>
					<x path="Int"/>
					<t path="tink.Surprise">
						<t path="tink.Noise"/>
						<t path="tink.Error"/>
					</t>
				</f>
				<x path="Int"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc><![CDATA[A method for streaming data to a specified method.

		@param onData - method to execute for each set, eg. `function onData(data:Bytes, pos:Int, length:Int):Surprise<Noise,Error>`
		@param partSize - the maximum amount of data to stream in each part.  Optional, default depends on FileUpload implementation.]]></haxe_doc>
		</process>
		<haxe_doc>An interface describing an uploaded file.

	Each platform can respond to file uploads differently.
	For example, PHP stores temp files for each request, mod_neko has a callback for processing multitype data, and NodeJS will have it's own async methods.

	This interface aims to provide a safe abstraction for working with uploaded files, no matter which platform.</haxe_doc>
		<meta><m n="interface"/></meta>
	</class>
	<class path="ufront.web.upload.TmpFileUploadMiddleware" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/upload/TmpFileUploadMiddleware.hx">
		<implements path="ufront.app.UFMiddleware"/>
		<subDir public="1" line="39" static="1">
			<c path="String"/>
			<haxe_doc>Sub-directory to save temporary uploads to.

		This should represent a path, relative to `context.contentDirectory`.

		Default is "uf-upload-tmp"</haxe_doc>
		</subDir>
		<files><c path="Array"><c path="ufront.web.upload.TmpFileUploadSync"/></c></files>
		<requestIn public="1" set="method" line="52">
			<f a="ctx">
				<c path="ufront.web.context.HttpContext"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Start the session if a SessionID exists in the request, or if `alwaysStart` is true.

		If the chosen `subDir` does not exist, it will attempt to create it, but only one level deep - it will not recursively create directories for you.</haxe_doc>
		</requestIn>
		<responseOut public="1" set="method" line="113">
			<f a="ctx">
				<c path="ufront.web.context.HttpContext"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Delete the temporary file at the end of the request</haxe_doc>
		</responseOut>
		<new public="1" set="method" line="43"><f a=""><x path="Void"/></f></new>
		<haxe_doc>If the HttpRequest is multipart, parse it, and store any uploads in a temporary file, adding them to `httpRequest.files`

	Any post variables encountered in the multipart will be added to `httpRequest.post`.

	This middleware will need to be called before `httpRequest.post` or `httpRequest.params` is ever accessed.
	It is probably wise to run this as your very first middleware.

	The response middleware will delete the temporary file at the end of the request.

	@author Jason O'Neil</haxe_doc>
	</class>
	<class path="ufront.web.upload.TmpFileUploadSync" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/upload/TmpFileUploadSync.hx">
		<implements path="ufront.web.upload.FileUpload"/>
		<postName public="1">
			<c path="String"/>
			<haxe_doc>The name of the POST argument (that is, the name of the file input) that this file was uploaded with.</haxe_doc>
		</postName>
		<originalFileName public="1">
			<c path="String"/>
			<haxe_doc>The original name of this file on the client.</haxe_doc>
		</originalFileName>
		<size public="1">
			<x path="Int"/>
			<haxe_doc>The size of the upload in Bytes</haxe_doc>
		</size>
		<tmpFileName>
			<c path="String"/>
			<haxe_doc>The contentType of the upload.

		Please note this is not verified, so do not rely on this for security.</haxe_doc>
		</tmpFileName>
		<getBytes public="1" set="method" line="58">
			<f a=""><t path="tink.Surprise">
	<c path="haxe.io.Bytes"/>
	<t path="tink.Error"/>
</t></f>
			<haxe_doc>Get the current upload as a `haxe.io.Bytes`

		Uses `sys.io.File.getBytes(tmpFileName)` behind the scenes.</haxe_doc>
		</getBytes>
		<getString public="1" set="method" line="74">
			<f a=""><t path="tink.Surprise">
	<c path="String"/>
	<t path="tink.Error"/>
</t></f>
			<haxe_doc>Get the current upload as a `String`

		Uses `sys.io.File.getContent(tmpFileName)` behind the scenes.</haxe_doc>
		</getString>
		<writeToFile public="1" set="method" line="90">
			<f a="newFilePath">
				<c path="String"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc>Write the current upload to a file on the filesystem.

		Uses `sys.io.File.copy( tmpFileName, newFilePath )` behind the scenes.</haxe_doc>
		</writeToFile>
		<process public="1" set="method" line="113">
			<f a="onData:?partSize" v=":null">
				<f a="::">
					<c path="haxe.io.Bytes"/>
					<x path="Int"/>
					<x path="Int"/>
					<t path="tink.Surprise">
						<t path="tink.Noise"/>
						<t path="tink.Error"/>
					</t>
				</f>
				<x path="Int"/>
				<t path="tink.Surprise">
					<t path="tink.Noise"/>
					<t path="tink.Error"/>
				</t>
			</f>
			<haxe_doc><![CDATA[A method for streaming data to a specified method.

		Will read the temporary file from the disk, one part at a time.
		Each part that is read will be passed to the "onData" function.
		Once `onData`'s future is resolved, the next part will be written.

		@param onData - method to execute for each set, eg. `function onData(data:Bytes, pos:Int, length:Int):Surprise<Noise,Error>`
		@param partSize - the maximum amount of data to stream in each part.  Default is 8KB for PHP, 16KB for other targets.
		@return a future to notify you once all the data has been processed, or if an error occured at any point.]]></haxe_doc>
		</process>
		<deleteTemporaryFile public="1" set="method" line="160">
			<f a=""><t path="tink.Outcome">
	<t path="tink.Noise"/>
	<t path="tink.Error"/>
</t></f>
			<haxe_doc>Delete the temporary file.

		After doing this, other functions that rely on the temporary file will no longer work.</haxe_doc>
		</deleteTemporaryFile>
		<new public="1" set="method" line="46">
			<f a="tmpFileName:postName:originalFileName:size">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new TempFileUploadSync

		Please note that "originalFileName" will be sanitised using `haxe.io.Path.withoutDirectory()`.</haxe_doc>
		</new>
		<haxe_doc>A FileUpload implementation that works on `SYS` platforms (Neko, PHP etc).

	All methods are performed synchronously, but work with the async interface.</haxe_doc>
	</class>
	<class path="ufront.web.url.PartialUrl" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/url/PartialUrl.hx">
		<parse public="1" set="method" line="24" static="1"><f a="url">
	<c path="String"/>
	<c path="ufront.web.url.PartialUrl"/>
</f></parse>
		<feed public="1" set="method" line="30" static="1"><f a="u:url">
	<c path="ufront.web.url.PartialUrl"/>
	<c path="String"/>
	<x path="Void"/>
</f></feed>
		<segments public="1"><c path="Array"><c path="String"/></c></segments>
		<query public="1"><c path="ufront.core.OrderedStringMap"><a>
	<value><c path="String"/></value>
	<encoded><x path="Bool"/></encoded>
</a></c></query>
		<fragment public="1"><c path="String"/></fragment>
		<queryString public="1" set="method" line="50"><f a=""><c path="String"/></f></queryString>
		<toString public="1" set="method" line="59"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="18"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A class which describes a partial URL, separating segments, query parameters and fragments.

	This is used when reading request URLs and generating URLs so that we can apply the appropriate filters.

	Todo: document both usage and other purposes.</haxe_doc>
	</class>
	<enum path="ufront.web.url.UrlDirection" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/url/UrlDirection.hx">
		<IncomingUrlRequest/>
		<UrlGeneration/>
		<haxe_doc>An enum to differentiate between incoming URLs and URLs that we are generating.
	@author Franco Ponticelli</haxe_doc>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<class path="ufront.web.url.VirtualUrl" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/url/VirtualUrl.hx">
		<extends path="ufront.web.url.PartialUrl"/>
		<parse public="1" set="method" line="17" static="1"><f a="url">
	<c path="String"/>
	<c path="ufront.web.url.VirtualUrl"/>
</f></parse>
		<feed public="1" set="method" line="23" static="1"><f a="u:url">
	<c path="ufront.web.url.VirtualUrl"/>
	<c path="String"/>
	<x path="Void"/>
</f></feed>
		<isPhysical public="1"><x path="Bool"/></isPhysical>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<haxe_doc>A class which describes a Virtual URL, separating segments, query parameters and fragments.

	Todo: document both usage and purpose.</haxe_doc>
	</class>
	<class path="ufront.web.url.filter.UFUrlFilter" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/url/filter/UFUrlFilter.hx" interface="1">
		<filterIn public="1" set="method"><f a="url:request">
	<c path="ufront.web.url.PartialUrl"/>
	<c path="ufront.web.context.HttpRequest"/>
	<x path="Void"/>
</f></filterIn>
		<filterOut public="1" set="method"><f a="url:request">
	<c path="ufront.web.url.VirtualUrl"/>
	<c path="ufront.web.context.HttpRequest"/>
	<x path="Void"/>
</f></filterOut>
		<haxe_doc>Interface for defining new Url filters</haxe_doc>
		<meta><m n="interface"/></meta>
	</class>
	<class path="ufront.web.url.filter.DirectoryUrlFilter" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/url/filter/DirectoryUrlFilter.hx">
		<implements path="ufront.web.url.filter.UFUrlFilter"/>
		<directory public="1" set="null">
			<c path="String"/>
			<haxe_doc>The directory that is being filtered</haxe_doc>
		</directory>
		<segments><c path="Array"><c path="String"/></c></segments>
		<filterIn public="1" set="method" line="33">
			<f a="url:request">
				<c path="ufront.web.url.PartialUrl"/>
				<c path="ufront.web.context.HttpRequest"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove the subdirectory from a PartialUrl</haxe_doc>
		</filterIn>
		<filterOut public="1" set="method" line="42">
			<f a="url:request">
				<c path="ufront.web.url.VirtualUrl"/>
				<c path="ufront.web.context.HttpRequest"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add the subdirectory to a partial URL</haxe_doc>
		</filterOut>
		<new public="1" set="method" line="23">
			<f a="directory">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a new filter for the given directory</haxe_doc>
		</new>
		<haxe_doc>URLFilter to add/remove a subdirectory that this app is stored in.

	For example `/myappdir/posts/3/` becomes `/posts/3/`</haxe_doc>
	</class>
	<class path="ufront.web.url.filter.PathInfoUrlFilter" params="" file="C:\HaxeToolkit\haxe\lib/ufront-mvc/1,0,0-rc,13/src/ufront/web/url/filter/PathInfoUrlFilter.hx">
		<implements path="ufront.web.url.filter.UFUrlFilter"/>
		<frontScript public="1" set="null"><c path="String"/></frontScript>
		<useCleanRoot public="1" set="null"><x path="Bool"/></useCleanRoot>
		<filterIn public="1" set="method" line="41">
			<f a="url:request">
				<c path="ufront.web.url.PartialUrl"/>
				<c path="ufront.web.context.HttpRequest"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Remove frontScript from front of URL segments</haxe_doc>
		</filterIn>
		<filterOut public="1" set="method" line="47">
			<f a="url:request">
				<c path="ufront.web.url.VirtualUrl"/>
				<c path="ufront.web.context.HttpRequest"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Add frontScript to URL segments</haxe_doc>
		</filterOut>
		<new public="1" set="method" line="25">
			<f a="?frontScript:?useCleanRoot" v="null:true">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Construct a new Filter based on the given frontScript name

	@param frontScript Front script to ignore Default is "index.php" or "index.n", or error on other platforms..
	@param useCleanRoot Unsure, please ask Franco :)  Default=true</haxe_doc>
		</new>
		<haxe_doc>URLFilter to add/remove a front script from the URL segments.

	To be used if URL rewriting is not being used but PathInfo is.

	For example `index.n/some/path/` becomes `/some/path/`</haxe_doc>
	</class>
</haxe>